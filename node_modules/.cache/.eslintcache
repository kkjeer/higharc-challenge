[{"C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\index.tsx":"1","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\reportWebVitals.ts":"2","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\App.tsx":"3","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\AddSmoothie.tsx":"4","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\ViewSmoothies.tsx":"5","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\types.ts":"6"},{"size":151,"mtime":1652420686716,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1652404053034,"results":"9","hashOfConfig":"8"},{"size":1856,"mtime":1652420923196,"results":"10","hashOfConfig":"8"},{"size":6015,"mtime":1652420525765,"results":"11","hashOfConfig":"8"},{"size":2445,"mtime":1652420354079,"results":"12","hashOfConfig":"8"},{"size":266,"mtime":1652417330712,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1l29hgk",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\index.tsx",[],["30","31"],"C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\reportWebVitals.ts",[],["32","33"],"C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\App.tsx",[],"C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\AddSmoothie.tsx",["34","35"],"import * as React from \"react\";\r\nimport { Smoothies, IIngredient, ISmoothie, UNITS } from \"./types\";\r\nimport { Stack, Text, TextField, DefaultButton, IconButton, PrimaryButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\r\n\r\ninterface IAddSmoothieProps {\r\n  smoothies: Smoothies;\r\n  onAddSmoothie: (name: string, smoothie: ISmoothie) => void;\r\n}\r\n\r\ninterface IAddSmoothieState {\r\n  name: string;\r\n  ingredients: IIngredient[];\r\n}\r\n\r\nconst EMPTY_INGREDIENT = {\r\n  name: \"\",\r\n  quantity: \"0\",\r\n  unit: UNITS[0]\r\n};\r\n\r\n/**\r\n * Renders UI that allows the user to add one new smoothie at a time.\r\n */\r\nexport class AddSmoothie extends React.Component<IAddSmoothieProps, IAddSmoothieState> {\r\n  constructor(props: IAddSmoothieProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      ingredients: [EMPTY_INGREDIENT]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { name, ingredients } = this.state;\r\n\r\n    return (\r\n      <Stack\r\n        className=\"card\"\r\n        tokens={{childrenGap: 10}}\r\n        horizontalAlign=\"start\"\r\n        styles={{root: {\r\n          padding: 10,\r\n          alignSelf: \"flex-start\"\r\n        }}}>\r\n        <Text variant=\"large\">Add a smoothie</Text>\r\n        <Stack horizontal verticalAlign=\"end\" tokens={{childrenGap: 10}}>\r\n          <TextField\r\n            label=\"Smoothie name\"\r\n            value={name}\r\n            onChange={this._changeSmoothieName}\r\n            errorMessage={this._isNameConflict() ? \"A smoothie with this name already exists.\" : \"\"}\r\n          />\r\n          <PrimaryButton\r\n            text=\"Add smoothie\"\r\n            onClick={this._addSmoothie}\r\n            disabled={this._isNameConflict() || !name}\r\n          />\r\n        </Stack>\r\n        {ingredients.map((ingredient: IIngredient, index: number) => this._ingredient(ingredient, index))}\r\n        <DefaultButton text=\"Add ingredient\" onClick={this._addIngredient} />\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler for changing the pending name of the smoothie to add.\r\n   */\r\n  _changeSmoothieName = (ev: any, val?: string) => {\r\n    this.setState({ name: val || \"\" });\r\n  }\r\n\r\n  /**\r\n   * Event handler to add the current pending smoothie.\r\n   */\r\n  _addSmoothie = (ev: any) => {\r\n    const { onAddSmoothie } = this.props;\r\n    const { name, ingredients } = this.state;\r\n\r\n    const smoothie = {\r\n      ingredients: ingredients.filter(ingredient => ingredient.name != \"\").map(ingredient => ({\r\n        ...ingredient,\r\n        unit: ingredient.unit || UNITS[0]\r\n      }))\r\n    };\r\n\r\n    onAddSmoothie(name, smoothie);\r\n    this.setState({\r\n      name: \"\",\r\n      ingredients: [EMPTY_INGREDIENT]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the UI to construct a single pending ingredient.\r\n   */\r\n  _ingredient = (ingredient: IIngredient, index: number) => {\r\n    const quantityErrorMsg = isNaN(Number(ingredient.quantity || \"0\")) ? \"Quantity must be a number.\" : \"\";\r\n\r\n    return (\r\n      <Stack key={index} horizontal verticalAlign=\"end\" tokens={{childrenGap: 10}}>\r\n        <TextField\r\n          label=\"Ingredient name\"\r\n          value={ingredient.name}\r\n          onChange={this._changeIngredientName(index)}\r\n        />\r\n        <TextField\r\n          label=\"Quantity\"\r\n          value={ingredient.quantity}\r\n          onChange={this._changeIngredientQuantity(index)}\r\n          errorMessage={quantityErrorMsg}\r\n        />\r\n        <Dropdown\r\n          label=\"Unit\"\r\n          options={UNITS.map(unit => ({ key: unit, text: unit }))}\r\n          selectedKey={ingredient.unit || UNITS[0]}\r\n          onChange={this._changeUnit(index)}\r\n          styles={{\r\n            root: {\r\n              minWidth: 80\r\n            }\r\n          }}\r\n        />\r\n        <IconButton iconProps={{iconName: \"Delete\"}} onClick={this._deleteIngredient(index)} />\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler to add a new blank pending ingredient.\r\n   */\r\n  _addIngredient = (ev: any) => {\r\n    const ingredients = [...this.state.ingredients, {\r\n      name: \"\",\r\n      quantity: \"0\",\r\n      unit: \"\"\r\n    }];\r\n    this.setState({ ingredients });\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to change the name of the pending ingredient at the given index.\r\n   */\r\n  _changeIngredientName = (index: number) => {\r\n    return (ev: any, val?: string) => {\r\n      const ingredients = JSON.parse(JSON.stringify(this.state.ingredients));\r\n      ingredients[index].name = val || \"\";\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to change the quantity of the pending ingredient at the given index.\r\n   */\r\n  _changeIngredientQuantity = (index: number) => {\r\n    return (ev: any, val?: string) => {\r\n      const ingredients = JSON.parse(JSON.stringify(this.state.ingredients));\r\n      ingredients[index].quantity = val || \"\";\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to change the unit of the pending ingredient at the given index.\r\n   */\r\n  _changeUnit = (index: number) => {\r\n    return (ev: any, option?: IDropdownOption) => {\r\n      if (!option) return;\r\n      const ingredients = [...this.state.ingredients];\r\n      ingredients[index].unit = option.key.toString();\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to delete the pending ingredient at the given index.\r\n   */\r\n  _deleteIngredient = (index: number) => {\r\n    return (ev: any) => {\r\n      let ingredients = this.state.ingredients;\r\n      ingredients.splice(index, 1);\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if and only if there is already a smoothie with the same (case-insensitive)\r\n   * name as the name of the pending smoothie.\r\n   */\r\n  _isNameConflict = () => {\r\n    const { smoothies } = this.props;\r\n    const { name } = this.state;\r\n\r\n    if (!name) {\r\n      return false;\r\n    }\r\n\r\n    for (const existingName in smoothies) {\r\n      if (existingName.toLowerCase() == name.toLowerCase()) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\ViewSmoothies.tsx",["36"],"import * as React from \"react\";\r\nimport { Stack, Text, IconButton } from \"@fluentui/react\";\r\nimport { Smoothies, IIngredient } from \"./types\";\r\n\r\ninterface IViewSmoothiesProps {\r\n  smoothies: Smoothies;\r\n  onDeleteSmoothie: (name: string) => void;\r\n}\r\n\r\ninterface IViewSmoothiesState { }\r\n\r\n/**\r\n * Renders a set of smoothies in a grid view.\r\n * Each smoothie UI contains the capability to delete that smoothie.\r\n */\r\nexport class ViewSmoothies extends React.Component<IViewSmoothiesProps, IViewSmoothiesState> {\r\n  constructor(props: IViewSmoothiesProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { smoothies } = this.props;\r\n    return (\r\n      <Stack\r\n        horizontal\r\n        wrap\r\n        tokens={{childrenGap: 20}}\r\n        horizontalAlign=\"start\">\r\n        {Object.keys(smoothies).map(name => this._smoothie(name))}\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Renders one smoothie.\r\n   */\r\n  _smoothie = (name: string) => {\r\n    const smoothie = this.props.smoothies[name];\r\n    return (\r\n      <Stack\r\n        className=\"card\"\r\n        key={name}\r\n        tokens={{childrenGap: 10}}\r\n        styles={{root: {\r\n          padding: 5,\r\n          paddingBottom: 10,\r\n          paddingLeft: 10\r\n        }}}>\r\n          <Stack\r\n            horizontal\r\n            horizontalAlign=\"space-between\"\r\n            verticalAlign=\"center\"\r\n            tokens={{childrenGap: 20}}>\r\n            <Text variant=\"mediumPlus\">{name}</Text>\r\n            <IconButton iconProps={{iconName: \"Delete\"}} onClick={this._deleteSmoothie(name)} />\r\n          </Stack>\r\n          <Stack tokens={{childrenGap: 10}} styles={{root: {paddingLeft: 5}}}>\r\n            {smoothie.ingredients.map(ingredient => this._ingredient(ingredient))}\r\n          </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Renders the information for one ingredient.\r\n   */\r\n  _ingredient = (ingredient: IIngredient) => {\r\n    const { name, quantity, unit } = ingredient;\r\n\r\n    // Remove the last \"s\" in the unit display string if the quantity is 1\r\n    let unitStr = unit;\r\n    if (Number(quantity) === 1) {\r\n      unitStr = unitStr.substring(0, unitStr.length - 1);\r\n    }\r\n\r\n    return <Text key={name}>{quantity} {unitStr} of {name.toLowerCase()}</Text>\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to delete the smoothie with the given name.\r\n   */\r\n  _deleteSmoothie = (name: string) => {\r\n    return (ev: any) => {\r\n      this.props.onDeleteSmoothie(name);\r\n    }\r\n  }\r\n}","C:\\Users\\kkjee\\Coding\\higharc-challenge\\src\\types.ts",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"41"},{"ruleId":"39","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":81,"column":69,"nodeType":"45","messageId":"46","endLine":81,"endColumn":71},{"ruleId":"43","severity":1,"message":"47","line":199,"column":38,"nodeType":"45","messageId":"46","endLine":199,"endColumn":40},{"ruleId":"48","severity":1,"message":"49","line":17,"column":3,"nodeType":"50","messageId":"51","endLine":19,"endColumn":4},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],["52"],["53"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]