{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar COMPONENT_NAME = 'Shimmer';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexport var ShimmerBase = React.forwardRef(function (props, ref) {\n  var styles = props.styles,\n      shimmerElements = props.shimmerElements,\n      children = props.children,\n      width = props.width,\n      className = props.className,\n      customElementsGroup = props.customElementsGroup,\n      theme = props.theme,\n      ariaLabel = props.ariaLabel,\n      shimmerColors = props.shimmerColors,\n      _a = props.isDataLoaded,\n      isDataLoaded = _a === void 0 ? false : _a;\n  var divProps = getNativeProps(props, divProperties);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    isDataLoaded: isDataLoaded,\n    className: className,\n    transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n    shimmerColor: shimmerColors && shimmerColors.shimmer,\n    shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n  });\n  var internalState = useConst({\n    lastTimeoutId: 0\n  });\n\n  var _b = useSetTimeout(),\n      setTimeout = _b.setTimeout,\n      clearTimeout = _b.clearTimeout;\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n\n\n  var _c = React.useState(isDataLoaded),\n      contentLoaded = _c[0],\n      setContentLoaded = _c[1];\n\n  var divStyleProp = {\n    width: width ? width : '100%'\n  };\n  React.useEffect(function () {\n    if (isDataLoaded !== contentLoaded) {\n      if (isDataLoaded) {\n        internalState.lastTimeoutId = setTimeout(function () {\n          setContentLoaded(true);\n        }, TRANSITION_ANIMATION_INTERVAL);\n        return function () {\n          return clearTimeout(internalState.lastTimeoutId);\n        };\n      } else {\n        setContentLoaded(false);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n\n  }, [isDataLoaded]);\n  return React.createElement(\"div\", __assign({}, divProps, {\n    className: classNames.root,\n    ref: ref\n  }), !contentLoaded && React.createElement(\"div\", {\n    style: divStyleProp,\n    className: classNames.shimmerWrapper\n  }, React.createElement(\"div\", {\n    className: classNames.shimmerGradient\n  }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n    shimmerElements: shimmerElements,\n    backgroundColor: shimmerColors && shimmerColors.background\n  })), children && React.createElement(\"div\", {\n    className: classNames.dataWrapper\n  }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n    className: classNames.screenReaderText\n  }, ariaLabel))));\n});\nShimmerBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,EAA6B,aAA7B,EAA4C,cAA5C,EAA4D,aAA5D,QAAiF,iBAAjF;AACA,SAAS,oBAAT,QAAqC,6CAArC;AACA,SAAS,aAAT,EAAwB,QAAxB,QAAwC,uBAAxC;AAGA,IAAM,6BAA6B,GAAG,GAAtC;AAA2C;;AAC3C,IAAM,cAAc,GAAG,SAAvB;AAEA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;AAEA;;AAEG;;AACH,OAAO,IAAM,WAAW,GAA2C,KAAK,CAAC,UAAN,CACjE,UAAC,KAAD,EAAQ,GAAR,EAAW;EAEP,IAAA,MAAM,GAUJ,KAAK,CAVD,MAAN;EAAA,IACA,eAAe,GASb,KAAK,CATQ,eADf;EAAA,IAEA,QAAQ,GAQN,KAAK,CARC,QAFR;EAAA,IAGA,KAAK,GAOH,KAAK,CAPF,KAHL;EAAA,IAIA,SAAS,GAMP,KAAK,CANE,SAJT;EAAA,IAKA,mBAAmB,GAKjB,KAAK,CALY,mBALnB;EAAA,IAMA,KAAK,GAIH,KAAK,CAJF,KANL;EAAA,IAOA,SAAS,GAGP,KAAK,CAHE,SAPT;EAAA,IAQA,aAAa,GAEX,KAAK,CAFM,aARb;EAAA,IASA,EAAA,GACE,KAAK,CADa,YATpB;EAAA,IASA,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EATpB;EAYF,IAAM,QAAQ,GAAG,cAAc,CAAuC,KAAvC,EAA8C,aAA9C,CAA/B;EAEA,IAAM,UAAU,GAA8C,aAAa,CAAC,MAAD,EAAU;IACnF,KAAK,EAAE,KAD4E;IAEnF,YAAY,EAAA,YAFuE;IAGnF,SAAS,EAAA,SAH0E;IAInF,2BAA2B,EAAE,6BAJsD;IAKnF,YAAY,EAAE,aAAa,IAAI,aAAa,CAAC,OALsC;IAMnF,gBAAgB,EAAE,aAAa,IAAI,aAAa,CAAC;EANkC,CAAV,CAA3E;EASA,IAAM,aAAa,GAAG,QAAQ,CAAC;IAC7B,aAAa,EAAE;EADc,CAAD,CAA9B;;EAIM,IAAA,EAAA,GAA+B,aAAa,EAA5C;EAAA,IAAE,UAAU,GAAA,EAAA,CAAA,UAAZ;EAAA,IAAc,YAAY,GAAA,EAAA,CAAA,YAA1B;EAEN;;AAEG;;;EACG,IAAA,EAAA,GAAoC,KAAK,CAAC,QAAN,CAAe,YAAf,CAApC;EAAA,IAAC,aAAa,GAAA,EAAA,CAAA,CAAA,CAAd;EAAA,IAAgB,gBAAgB,GAAA,EAAA,CAAA,CAAA,CAAhC;;EAEN,IAAM,YAAY,GAAG;IAAE,KAAK,EAAE,KAAK,GAAG,KAAH,GAAW;EAAzB,CAArB;EAEA,KAAK,CAAC,SAAN,CAAgB,YAAA;IACd,IAAI,YAAY,KAAK,aAArB,EAAoC;MAClC,IAAI,YAAJ,EAAkB;QAChB,aAAa,CAAC,aAAd,GAA8B,UAAU,CAAC,YAAA;UACvC,gBAAgB,CAAC,IAAD,CAAhB;QACD,CAFuC,EAErC,6BAFqC,CAAxC;QAIA,OAAO,YAAA;UAAM,OAAA,YAAY,CAAC,aAAa,CAA1B,aAAY,CAAZ;QAAyC,CAAtD;MACD,CAND,MAMO;QACL,gBAAgB,CAAC,KAAD,CAAhB;MACD;IACF,CAXa,CAYd;;EACD,CAbD,EAaG,CAAC,YAAD,CAbH;EAeA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAS,QAAT,EAAiB;IAAE,SAAS,EAAE,UAAU,CAAC,IAAxB;IAA8B,GAAG,EAAE;EAAnC,CAAjB,CAAA,EACG,CAAC,aAAD,IACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,KAAK,EAAE,YAAZ;IAA0B,SAAS,EAAE,UAAU,CAAC;EAAhD,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,UAAU,CAAC;EAA3B,CAAA,CADF,EAEG,mBAAmB,GAClB,mBADkB,GAGlB,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB;IACnB,eAAe,EAAE,eADE;IAEnB,eAAe,EAAE,aAAa,IAAI,aAAa,CAAC;EAF7B,CAArB,CALJ,CAFJ,EAcG,QAAQ,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,UAAU,CAAC;EAA3B,CAAA,EAAyC,QAAzC,CAdf,EAeG,SAAS,IAAI,CAAC,YAAd,IACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,IAAI,EAAC,QAAV;IAAkB,aAAW;EAA7B,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAE,UAAU,CAAC;EAA3B,CAAA,EAA8C,SAA9C,CADF,CADF,CAhBJ,CADF;AAyBD,CA/EgE,CAA5D;AAiFP,WAAW,CAAC,WAAZ,GAA0B,cAA1B","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nimport type { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nconst COMPONENT_NAME = 'Shimmer';\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerBase: React.FunctionComponent<IShimmerProps> = React.forwardRef<HTMLDivElement, IShimmerProps>(\n  (props, ref) => {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n      isDataLoaded = false,\n    } = props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames: { [key in keyof IShimmerStyles]: string } = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const internalState = useConst({\n      lastTimeoutId: 0,\n    });\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    /**\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\n     */\n    const [contentLoaded, setContentLoaded] = React.useState(isDataLoaded);\n\n    const divStyleProp = { width: width ? width : '100%' };\n\n    React.useEffect(() => {\n      if (isDataLoaded !== contentLoaded) {\n        if (isDataLoaded) {\n          internalState.lastTimeoutId = setTimeout(() => {\n            setContentLoaded(true);\n          }, TRANSITION_ANIMATION_INTERVAL);\n\n          return () => clearTimeout(internalState.lastTimeoutId);\n        } else {\n          setContentLoaded(false);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n    }, [isDataLoaded]);\n\n    return (\n      <div {...divProps} className={classNames.root} ref={ref}>\n        {!contentLoaded && (\n          <div style={divStyleProp} className={classNames.shimmerWrapper}>\n            <div className={classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nShimmerBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}