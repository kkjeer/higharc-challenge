{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\n\nexport function warnMutuallyExclusive(componentName, props, exclusiveMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        var propInExclusiveMapValue = exclusiveMap[propName];\n\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== undefined) {\n          warn(componentName + \" property '\" + propName + \"' is mutually exclusive with '\" + exclusiveMap[propName] + \"'. \" + \"Use one or the other.\");\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["warn/warnMutuallyExclusive.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,QAArB;AAGA;;;;;;;AAOG;;AACH,OAAM,SAAU,qBAAV,CAAmC,aAAnC,EAA0D,KAA1D,EAAoE,YAApE,EAAiG;EACrG,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,KAAK,IAAM,QAAX,IAAuB,YAAvB,EAAqC;MACnC,IAAI,KAAK,IAAI,KAAK,CAAC,QAAD,CAAL,KAAoB,SAAjC,EAA4C;QAC1C,IAAI,uBAAuB,GAAG,YAAY,CAAC,QAAD,CAA1C;;QACA,IAAI,uBAAuB,IAAI,KAAK,CAAC,uBAAD,CAAL,KAA8C,SAA7E,EAAwF;UACtF,IAAI,CACC,aAAa,GAAA,aAAb,GAA2B,QAA3B,GAAmC,gCAAnC,GAAoE,YAAY,CAAC,QAAD,CAAhF,GAA0F,KAA1F,GACD,uBAFA,CAAJ;QAID;MACF;IACF;EACF;AACF","sourcesContent":["import { warn } from './warn';\nimport type { ISettingsMap } from './warn';\n\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        let propInExclusiveMapValue = exclusiveMap[propName];\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue as keyof P] !== undefined) {\n          warn(\n            `${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. ` +\n              `Use one or the other.`,\n          );\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}