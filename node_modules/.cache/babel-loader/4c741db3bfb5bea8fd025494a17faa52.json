{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight,\n    COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n\nvar GroupedListBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupedListBase, _super);\n\n  function GroupedListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._list = React.createRef();\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          dragDropHelper = _a.dragDropHelper,\n          eventsToRegister = _a.eventsToRegister,\n          groupProps = _a.groupProps,\n          items = _a.items,\n          listProps = _a.listProps,\n          onRenderCell = _a.onRenderCell,\n          selectionMode = _a.selectionMode,\n          selection = _a.selection,\n          viewport = _a.viewport,\n          onShouldVirtualize = _a.onShouldVirtualize,\n          groups = _a.groups,\n          compact = _a.compact; // override group header/footer props as needed\n\n      var dividerProps = {\n        onToggleSelectGroup: _this._onToggleSelectGroup,\n        onToggleCollapse: _this._onToggleCollapse,\n        onToggleSummarize: _this._onToggleSummarize\n      };\n\n      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);\n\n      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);\n\n      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);\n\n      var groupNestingDepth = _this._getGroupNestingDepth();\n\n      if (!groupProps.showEmptyGroups && group && group.count === 0) {\n        return null;\n      }\n\n      var finalListProps = __assign(__assign({}, listProps || {}), {\n        version: _this.state.version\n      });\n\n      return React.createElement(GroupedListSection, {\n        key: _this._getGroupKey(group, groupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,\n        group: group,\n        groupIndex: groupIndex,\n        groupNestingDepth: groupNestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        listProps: finalListProps,\n        items: items,\n        onRenderCell: onRenderCell,\n        onRenderGroupHeader: groupProps.onRenderHeader,\n        onRenderGroupShowAll: groupProps.onRenderShowAll,\n        onRenderGroupFooter: groupProps.onRenderFooter,\n        selectionMode: selectionMode,\n        selection: selection,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onShouldVirtualize: onShouldVirtualize,\n        groupedListClassNames: _this._classNames,\n        groups: groups,\n        compact: compact\n      });\n    };\n\n    _this._getDefaultGroupItemLimit = function (group) {\n      return group.children && group.children.length > 0 ? group.children.length : group.count;\n    };\n\n    _this._getGroupItemLimit = function (group) {\n      var groupProps = _this.props.groupProps;\n      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n      return getGroupItemLimit(group);\n    };\n\n    _this._getGroupHeight = function (group) {\n      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n    };\n\n    _this._getPageHeight = function (itemIndex) {\n      var groups = _this.state.groups;\n      var _a = _this.props.getGroupHeight,\n          getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n      var pageGroup = groups && groups[itemIndex];\n\n      if (pageGroup) {\n        return getGroupHeight(pageGroup, itemIndex);\n      } else {\n        return 0;\n      }\n    };\n\n    _this._onToggleCollapse = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n      if (group) {\n        if (onToggleCollapse) {\n          onToggleCollapse(group);\n        }\n\n        group.isCollapsed = !group.isCollapsed;\n\n        _this._updateIsSomeGroupExpanded();\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._onToggleSelectGroup = function (group) {\n      var _a = _this.props,\n          selection = _a.selection,\n          selectionMode = _a.selectionMode;\n\n      if (group && selection && selectionMode === SelectionMode.multiple) {\n        selection.toggleRangeSelected(group.startIndex, group.count);\n      }\n    };\n\n    _this._isInnerZoneKeystroke = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n    };\n\n    _this._onToggleSummarize = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n      if (onToggleSummarize) {\n        onToggleSummarize(group);\n      } else {\n        if (group) {\n          group.isShowingAll = !group.isShowingAll;\n        }\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._getPageSpecification = function (itemIndex) {\n      var groups = _this.state.groups;\n      var pageGroup = groups && groups[itemIndex];\n      return {\n        key: pageGroup && pageGroup.key\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n\n    var _a = props.listProps,\n        _b = _a === void 0 ? {} : _a,\n        _c = _b.version,\n        version = _c === void 0 ? {} : _c;\n\n    _this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version: version\n    };\n    return _this;\n  }\n\n  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    var groups = nextProps.groups,\n        selectionMode = nextProps.selectionMode,\n        compact = nextProps.compact,\n        items = nextProps.items,\n        listProps = nextProps.listProps;\n    var listVersion = listProps && listProps.version;\n\n    var nextState = __assign(__assign({}, previousState), {\n      selectionMode: selectionMode,\n      compact: compact,\n      groups: groups,\n      listProps: listProps\n    });\n\n    var shouldForceUpdates = false;\n    var previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = __assign(__assign({}, nextState), {\n        groups: groups\n      });\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = __assign(__assign({}, nextState), {\n        version: {}\n      });\n    }\n\n    return nextState;\n  };\n\n  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  };\n\n  GroupedListBase.prototype.getStartItemIndexInView = function () {\n    return this._list.current.getStartItemIndexInView() || 0;\n  };\n\n  GroupedListBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        groupProps = _a.groupProps,\n        _b = _a.groups,\n        groups = _b === void 0 ? [] : _b;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  };\n\n  GroupedListBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        usePageCache = _a.usePageCache,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        theme = _a.theme,\n        _b = _a.role,\n        role = _b === void 0 ? 'treegrid' : _b,\n        styles = _a.styles,\n        compact = _a.compact,\n        _c = _a.focusZoneProps,\n        focusZoneProps = _c === void 0 ? {} : _c,\n        _d = _a.rootListProps,\n        rootListProps = _d === void 0 ? {} : _d;\n    var _e = this.state,\n        groups = _e.groups,\n        version = _e.version;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      compact: compact\n    });\n    var _f = focusZoneProps.shouldEnterInnerZone,\n        shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      \"data-automationid\": \"GroupedList\",\n      \"data-is-scrollable\": \"false\",\n      role: \"presentation\"\n    }, focusZoneProps, {\n      shouldEnterInnerZone: shouldEnterInnerZone,\n      className: css(this._classNames.root, focusZoneProps.className)\n    }), !groups ? this._renderGroup(undefined, 0) : React.createElement(List, __assign({\n      ref: this._list,\n      role: role,\n      items: groups,\n      onRenderCell: this._renderGroup,\n      getItemCountForPage: this._returnOne,\n      getPageHeight: this._getPageHeight,\n      getPageSpecification: this._getPageSpecification,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version\n    }, rootListProps)));\n  };\n\n  GroupedListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n    var _a = this.state.groups,\n        groups = _a === void 0 ? [] : _a;\n    var groupProps = this.props.groupProps;\n    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  };\n\n  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  };\n\n  GroupedListBase.prototype._returnOne = function () {\n    return 1;\n  };\n\n  GroupedListBase.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  };\n\n  GroupedListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.state.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  GroupedListBase.prototype._forceListUpdates = function (groups) {\n    this.setState({\n      version: {}\n    });\n  };\n\n  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n    var _this = this;\n\n    return !!(groups && groups.some(function (group) {\n      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;\n    }));\n  };\n\n  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n    var groups = this.state.groups;\n    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n\n    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  };\n\n  GroupedListBase.defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n  return GroupedListBase;\n}(React.Component);\n\nexport { GroupedListBase };","map":{"version":3,"sources":["components/GroupedList/GroupedList.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,sBAAT,EAAiC,kBAAjC,EAAqD,QAArD,EAA+D,iBAA/D,EAAkF,GAAlF,QAA6F,iBAA7F;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,IAAT,QAAmC,YAAnC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,mBAAT,QAAoC,kCAApC;AACA,SAAS,SAAT,EAAoB,kBAApB,QAA8C,iBAA9C;AAcA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;AACQ,IAAW,UAAU,GAA2C,mBAAmB,CAA9D,SAArB;AAAA,IAAyC,kBAAkB,GAAK,mBAAmB,CAAxB,gBAA3D;;AAWR,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAqC,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;EAmEnC,SAAA,eAAA,CAAY,KAAZ,EAAoC;IAApC,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;IAzDQ,KAAA,CAAA,KAAA,GAAQ,KAAK,CAAC,SAAN,EAAR;;IA8KA,KAAA,CAAA,YAAA,GAAe,UAAC,KAAD,EAA4B,UAA5B,EAA8C;MAC7D,IAAA,EAAA,GAcF,KAAI,CAAC,KAdH;MAAA,IACJ,cAAc,GAAA,EAAA,CAAA,cADV;MAAA,IAEJ,cAAc,GAAA,EAAA,CAAA,cAFV;MAAA,IAGJ,gBAAgB,GAAA,EAAA,CAAA,gBAHZ;MAAA,IAIJ,UAAU,GAAA,EAAA,CAAA,UAJN;MAAA,IAKJ,KAAK,GAAA,EAAA,CAAA,KALD;MAAA,IAMJ,SAAS,GAAA,EAAA,CAAA,SANL;MAAA,IAOJ,YAAY,GAAA,EAAA,CAAA,YAPR;MAAA,IAQJ,aAAa,GAAA,EAAA,CAAA,aART;MAAA,IASJ,SAAS,GAAA,EAAA,CAAA,SATL;MAAA,IAUJ,QAAQ,GAAA,EAAA,CAAA,QAVJ;MAAA,IAWJ,kBAAkB,GAAA,EAAA,CAAA,kBAXd;MAAA,IAYJ,MAAM,GAAA,EAAA,CAAA,MAZF;MAAA,IAaJ,OAAO,GAAA,EAAA,CAAA,OAbH,CAD6D,CAiBnE;;MACA,IAAM,YAAY,GAAG;QACnB,mBAAmB,EAAE,KAAI,CAAC,oBADP;QAEnB,gBAAgB,EAAE,KAAI,CAAC,iBAFJ;QAGnB,iBAAiB,EAAE,KAAI,CAAC;MAHL,CAArB;;MAMA,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAA2B,UAAW,CAAC,WAAvC,CAAA,EAAuD,YAAvD,CAAjB;;MACA,IAAM,YAAY,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAA4B,UAAW,CAAC,YAAxC,CAAA,EAAyD,YAAzD,CAAlB;;MACA,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAA2B,UAAW,CAAC,WAAvC,CAAA,EAAuD,YAAvD,CAAjB;;MACA,IAAM,iBAAiB,GAAG,KAAI,CAAC,qBAAL,EAA1B;;MAEA,IAAI,CAAC,UAAW,CAAC,eAAb,IAAgC,KAAhC,IAAyC,KAAK,CAAC,KAAN,KAAgB,CAA7D,EAAgE;QAC9D,OAAO,IAAP;MACD;;MAED,IAAM,cAAc,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACd,SAAS,IAAI,EADC,CAAA,EACE;QACpB,OAAO,EAAE,KAAI,CAAC,KAAL,CAAW;MADA,CADF,CAApB;;MAKA,OACE,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB;QACjB,GAAG,EAAE,KAAI,CAAC,YAAL,CAAkB,KAAlB,EAAyB,UAAzB,CADY;QAEjB,cAAc,EAAE,cAFC;QAGjB,cAAc,EAAE,cAHC;QAIjB,gBAAgB,EAAE,gBAJD;QAKjB,WAAW,EAAE,WALI;QAMjB,iBAAiB,EAAE,UAAU,IAAI,UAAU,CAAC,iBAN3B;QAOjB,KAAK,EAAE,KAPU;QAQjB,UAAU,EAAE,UARK;QASjB,iBAAiB,EAAE,iBATF;QAUjB,UAAU,EAAE,UAVK;QAWjB,WAAW,EAAE,WAXI;QAYjB,SAAS,EAAE,cAZM;QAajB,KAAK,EAAE,KAbU;QAcjB,YAAY,EAAE,YAdG;QAejB,mBAAmB,EAAE,UAAW,CAAC,cAfhB;QAgBjB,oBAAoB,EAAE,UAAW,CAAC,eAhBjB;QAiBjB,mBAAmB,EAAE,UAAW,CAAC,cAjBhB;QAkBjB,aAAa,EAAE,aAlBE;QAmBjB,SAAS,EAAE,SAnBM;QAoBjB,YAAY,EAAE,YApBG;QAqBjB,QAAQ,EAAE,QArBO;QAsBjB,kBAAkB,EAAE,kBAtBH;QAuBjB,qBAAqB,EAAE,KAAI,CAAC,WAvBX;QAwBjB,MAAM,EAAE,MAxBS;QAyBjB,OAAO,EAAE;MAzBQ,CAAnB,CADF;IA6BD,CAnEO;;IAyEA,KAAA,CAAA,yBAAA,GAA4B,UAAC,KAAD,EAAc;MAChD,OAAO,KAAK,CAAC,QAAN,IAAkB,KAAK,CAAC,QAAN,CAAe,MAAf,GAAwB,CAA1C,GAA8C,KAAK,CAAC,QAAN,CAAe,MAA7D,GAAsE,KAAK,CAAC,KAAnF;IACD,CAFO;;IAIA,KAAA,CAAA,kBAAA,GAAqB,UAAC,KAAD,EAAc;MACjC,IAAA,UAAU,GAAK,KAAI,CAAC,KAAL,CAAL,UAAV;MACR,IAAM,iBAAiB,GACrB,UAAU,IAAI,UAAU,CAAC,iBAAzB,GAA6C,UAAU,CAAC,iBAAxD,GAA4E,KAAI,CAAC,yBADnF;MAGA,OAAO,iBAAiB,CAAC,KAAD,CAAxB;IACD,CANO;;IAQA,KAAA,CAAA,eAAA,GAAkB,UAAC,KAAD,EAAc;MACtC,IAAM,SAAS,GAAG,KAAI,CAAC,KAAL,CAAW,OAAX,GAAqB,kBAArB,GAA0C,UAA5D;MAEA,OAAO,SAAS,IAAI,KAAK,CAAC,WAAN,GAAoB,CAApB,GAAwB,SAAS,GAAG,KAAI,CAAC,kBAAL,CAAwB,KAAxB,CAAxC,CAAhB;IACD,CAJO;;IAMA,KAAA,CAAA,cAAA,GAA8C,UAAC,SAAD,EAAkB;MAC9D,IAAA,MAAM,GAAK,KAAI,CAAC,KAAL,CAAL,MAAN;MACA,IAAA,EAAA,GAA0C,KAAI,CAAC,KAAL,CAAL,cAArC;MAAA,IAAA,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAI,CAAC,eAAR,GAAuB,EAArC;MACR,IAAM,SAAS,GAAG,MAAM,IAAI,MAAM,CAAC,SAAD,CAAlC;;MAEA,IAAI,SAAJ,EAAe;QACb,OAAO,cAAc,CAAC,SAAD,EAAY,SAAZ,CAArB;MACD,CAFD,MAEO;QACL,OAAO,CAAP;MACD;IACF,CAVO;;IA6BA,KAAA,CAAA,iBAAA,GAAoB,UAAC,KAAD,EAAc;MAChC,IAAA,UAAU,GAAK,KAAI,CAAC,KAAL,CAAL,UAAV;MACR,IAAM,gBAAgB,GAAG,UAAU,IAAI,UAAU,CAAC,WAAzB,IAAwC,UAAU,CAAC,WAAX,CAAuB,gBAAxF;;MAEA,IAAI,KAAJ,EAAW;QACT,IAAI,gBAAJ,EAAsB;UACpB,gBAAgB,CAAC,KAAD,CAAhB;QACD;;QAED,KAAK,CAAC,WAAN,GAAoB,CAAC,KAAK,CAAC,WAA3B;;QACA,KAAI,CAAC,0BAAL;;QACA,KAAI,CAAC,WAAL;MACD;IACF,CAbO;;IAeA,KAAA,CAAA,oBAAA,GAAuB,UAAC,KAAD,EAAc;MACrC,IAAA,EAAA,GAA+B,KAAI,CAAC,KAApC;MAAA,IAAE,SAAS,GAAA,EAAA,CAAA,SAAX;MAAA,IAAa,aAAa,GAAA,EAAA,CAAA,aAA1B;;MAEN,IAAI,KAAK,IAAI,SAAT,IAAsB,aAAa,KAAK,aAAa,CAAC,QAA1D,EAAoE;QAClE,SAAS,CAAC,mBAAV,CAA8B,KAAK,CAAC,UAApC,EAAgD,KAAK,CAAC,KAAtD;MACD;IACF,CANO;;IAQA,KAAA,CAAA,qBAAA,GAAwB,UAAC,EAAD,EAAqC;MACnE;MACA,OAAO,EAAE,CAAC,KAAH,KAAa,iBAAiB,CAAC,QAAQ,CAAC,KAAV,CAArC;IACD,CAHO;;IAWA,KAAA,CAAA,kBAAA,GAAqB,UAAC,KAAD,EAAc;MACjC,IAAA,UAAU,GAAK,KAAI,CAAC,KAAL,CAAL,UAAV;MACR,IAAM,iBAAiB,GAAG,UAAU,IAAI,UAAU,CAAC,YAAzB,IAAyC,UAAU,CAAC,YAAX,CAAwB,iBAA3F;;MAEA,IAAI,iBAAJ,EAAuB;QACrB,iBAAiB,CAAC,KAAD,CAAjB;MACD,CAFD,MAEO;QACL,IAAI,KAAJ,EAAW;UACT,KAAK,CAAC,YAAN,GAAqB,CAAC,KAAK,CAAC,YAA5B;QACD;;QAED,KAAI,CAAC,WAAL;MACD;IACF,CAbO;;IAeA,KAAA,CAAA,qBAAA,GAAwB,UAC9B,SAD8B,EACb;MAIjB,IAAM,MAAM,GAAG,KAAI,CAAC,KAAL,CAAW,MAA1B;MACA,IAAM,SAAS,GAAG,MAAM,IAAI,MAAM,CAAC,SAAD,CAAlC;MACA,OAAO;QACL,GAAG,EAAE,SAAS,IAAI,SAAS,CAAC;MADvB,CAAP;IAGD,CAVO;;IA3RN,sBAAsB,CAAC,KAAD,CAAtB;IAEA,KAAI,CAAC,oBAAL,GAA4B,KAAI,CAAC,2BAAL,CAAiC,KAAK,CAAC,MAAvC,CAA5B;;IAEQ,IAAA,EAAA,GAAqC,KAAK,CAAV,SAAhC;IAAA,IAAA,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAA8B,EAA9B,GAAgC,EAAhC;IAAA,IAAa,EAAA,GAAA,EAAA,CAAA,OAAb;IAAA,IAAa,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAAzB;;IAER,KAAI,CAAC,KAAL,GAAa;MACX,MAAM,EAAE,KAAK,CAAC,MADH;MAEX,KAAK,EAAE,KAAK,CAAC,KAFF;MAGX,SAAS,EAAE,KAAK,CAAC,SAHN;MAIX,OAAO,EAAA;IAJI,CAAb;;EAMD;;EApEa,eAAA,CAAA,wBAAA,GAAd,UACE,SADF,EAEE,aAFF,EAEkC;IAExB,IAAA,MAAM,GAA+C,SAAS,CAAxD,MAAN;IAAA,IAAQ,aAAa,GAAgC,SAAS,CAAzC,aAArB;IAAA,IAAuB,OAAO,GAAuB,SAAS,CAAhC,OAA9B;IAAA,IAAgC,KAAK,GAAgB,SAAS,CAAzB,KAArC;IAAA,IAAuC,SAAS,GAAK,SAAS,CAAd,SAAhD;IACR,IAAM,WAAW,GAAG,SAAS,IAAI,SAAS,CAAC,OAA3C;;IAEA,IAAI,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,aADQ,CAAA,EACK;MAChB,aAAa,EAAA,aADG;MAEhB,OAAO,EAAA,OAFS;MAGhB,MAAM,EAAA,MAHU;MAIhB,SAAS,EAAA;IAJO,CADL,CAAb;;IAQA,IAAI,kBAAkB,GAAG,KAAzB;IAEA,IAAM,mBAAmB,GAAG,aAAa,CAAC,SAAd,IAA2B,aAAa,CAAC,SAAd,CAAwB,OAA/E;;IAEA,IACE,WAAW,KAAK,mBAAhB,IACA,KAAK,KAAK,aAAa,CAAC,KADxB,IAEA,MAAM,KAAK,aAAa,CAAC,MAFzB,IAGA,aAAa,KAAK,aAAa,CAAC,aAHhC,IAIA,OAAO,KAAK,aAAa,CAAC,OAL5B,EAME;MACA;MACA;MACA;MACA,kBAAkB,GAAG,IAArB;IACD;;IAED,IAAI,MAAM,KAAK,aAAa,CAAC,MAA7B,EAAqC;MACnC,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACJ,SADI,CAAA,EACK;QACZ,MAAM,EAAA;MADM,CADL,CAAT;IAID;;IAED,IAAI,aAAa,KAAK,aAAa,CAAC,aAAhC,IAAiD,OAAO,KAAK,aAAa,CAAC,OAA/E,EAAwF;MACtF,kBAAkB,GAAG,IAArB;IACD;;IAED,IAAI,kBAAJ,EAAwB;MACtB,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACJ,SADI,CAAA,EACK;QACZ,OAAO,EAAE;MADG,CADL,CAAT;IAID;;IAED,OAAO,SAAP;EACD,CAnDa;;EAsEP,eAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAAoC,WAApC,EAAiF,YAAjF,EAA4G;IAC1G,IAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;MACtB,KAAK,KAAL,CAAW,OAAX,CAAmB,aAAnB,CAAiC,KAAjC,EAAwC,WAAxC,EAAqD,YAArD;IACD;EACF,CAJM;;EAMA,eAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,YAAA;IACE,OAAO,KAAK,KAAL,CAAW,OAAX,CAAoB,uBAApB,MAAiD,CAAxD;EACD,CAFM;;EAIA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;IACQ,IAAA,EAAA,GAA8B,KAAK,KAAnC;IAAA,IAAE,UAAU,GAAA,EAAA,CAAA,UAAZ;IAAA,IAAc,EAAA,GAAA,EAAA,CAAA,MAAd;IAAA,IAAc,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAAzB;;IAEN,IAAI,UAAU,IAAI,UAAU,CAAC,oBAA7B,EAAmD;MACjD,KAAK,wBAAL,CAA8B,MAA9B,EAAsC,UAAU,CAAC,oBAAjD;IACD;EACF,CANM;;EAQA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACQ,IAAA,EAAA,GAUF,KAAK,KAVH;IAAA,IACJ,SAAS,GAAA,EAAA,CAAA,SADL;IAAA,IAEJ,YAAY,GAAA,EAAA,CAAA,YAFR;IAAA,IAGJ,kBAAkB,GAAA,EAAA,CAAA,kBAHd;IAAA,IAIJ,KAAK,GAAA,EAAA,CAAA,KAJD;IAAA,IAKJ,EAAA,GAAA,EAAA,CAAA,IALI;IAAA,IAKJ,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAH,GAAa,EALb;IAAA,IAMJ,MAAM,GAAA,EAAA,CAAA,MANF;IAAA,IAOJ,OAAO,GAAA,EAAA,CAAA,OAPH;IAAA,IAQJ,EAAA,GAAA,EAAA,CAAA,cARI;IAAA,IAQJ,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EARf;IAAA,IASJ,EAAA,GAAA,EAAA,CAAA,aATI;IAAA,IASJ,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EATd;IAWA,IAAA,EAAA,GAAsB,KAAK,KAA3B;IAAA,IAAE,MAAM,GAAA,EAAA,CAAA,MAAR;IAAA,IAAU,OAAO,GAAA,EAAA,CAAA,OAAjB;IAEN,KAAK,WAAL,GAAmB,aAAa,CAAC,MAAD,EAAS;MACvC,KAAK,EAAE,KADgC;MAEvC,SAAS,EAAA,SAF8B;MAGvC,OAAO,EAAE;IAH8B,CAAT,CAAhC;IAMQ,IAAA,EAAA,GAAsD,cAAc,CAAnB,oBAAjD;IAAA,IAAA,oBAAoB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,qBAAR,GAA6B,EAAjD;IAER,OACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,QAAA,CAAA;MACR,SAAS,EAAE,kBAAkB,CAAC,QADtB;MAC8B,qBACpB,aAFV;MAEuB,sBACZ,OAHX;MAIR,IAAI,EAAC;IAJG,CAAA,EAKJ,cALI,EAKU;MAClB,oBAAoB,EAAE,oBADJ;MAElB,SAAS,EAAE,GAAG,CAAC,KAAK,WAAL,CAAiB,IAAlB,EAAwB,cAAc,CAAC,SAAvC;IAFI,CALV,CAAV,EASG,CAAC,MAAD,GACC,KAAK,YAAL,CAAkB,SAAlB,EAA6B,CAA7B,CADD,GAGC,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,QAAA,CAAA;MACH,GAAG,EAAE,KAAK,KADP;MAEH,IAAI,EAAE,IAFH;MAGH,KAAK,EAAE,MAHJ;MAIH,YAAY,EAAE,KAAK,YAJhB;MAKH,mBAAmB,EAAE,KAAK,UALvB;MAMH,aAAa,EAAE,KAAK,cANjB;MAOH,oBAAoB,EAAE,KAAK,qBAPxB;MAQH,YAAY,EAAE,YARX;MASH,kBAAkB,EAAE,kBATjB;MAUH,OAAO,EAAE;IAVN,CAAA,EAWC,aAXD,CAAL,CAZJ,CADF;EA6BD,CAnDM;;EAqDA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;IACE,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;;IACA,KAAK,iBAAL;EACD,CAHM;;EAKA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,YAAzB,EAA8C;IACpC,IAAA,EAAA,GAAgB,KAAK,KAAL,CAAL,MAAX;IAAA,IAAA,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAAX;IACA,IAAA,UAAU,GAAK,KAAK,KAAL,CAAL,UAAV;IACR,IAAM,mBAAmB,GAAG,UAAU,IAAI,UAAU,CAAC,mBAArD;;IAEA,IAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;MACrB,IAAI,mBAAJ,EAAyB;QACvB,mBAAmB,CAAC,YAAD,CAAnB;MACD;;MAED,KAAK,wBAAL,CAA8B,MAA9B,EAAsC,YAAtC;;MAEA,KAAK,0BAAL;;MAEA,KAAK,WAAL;IACD;EACF,CAhBM;;EAkBC,eAAA,CAAA,SAAA,CAAA,wBAAA,GAAR,UAAiC,MAAjC,EAAmD,WAAnD,EAAuE;IACrE,KAAK,IAAI,UAAU,GAAG,CAAtB,EAAyB,UAAU,GAAG,MAAM,CAAC,MAA7C,EAAqD,UAAU,EAA/D,EAAmE;MACjE,MAAM,CAAC,UAAD,CAAN,CAAmB,WAAnB,GAAiC,WAAjC;IACD;EACF,CAJO;;EA2EA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAR,YAAA;IACE,OAAO,CAAP;EACD,CAFO;;EAkCA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,KAArB,EAAgD,KAAhD,EAA6D;IAC3D,OAAO,YAAY,KAAK,IAAI,KAAK,CAAC,GAAf,GAAqB,KAAK,CAAC,GAA3B,GAAiC,MAAM,CAAC,KAAD,CAAnD,CAAP;EACD,CAFO;;EAIA,eAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;IACU,IAAA,MAAM,GAAK,KAAK,KAAL,CAAL,MAAN;IACR,IAAI,KAAK,GAAG,CAAZ;IACA,IAAI,aAAa,GAAG,MAApB;;IAEA,OAAO,aAAa,IAAI,aAAa,CAAC,MAAd,GAAuB,CAA/C,EAAkD;MAChD,KAAK;MACL,aAAa,GAAG,aAAa,CAAC,CAAD,CAAb,CAAiB,QAAjC;IACD;;IAED,OAAO,KAAP;EACD,CAXO;;EAyCA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,MAA1B,EAA2C;IACzC,KAAK,QAAL,CAAc;MACZ,OAAO,EAAE;IADG,CAAd;EAGD,CAJO;;EAiCA,eAAA,CAAA,SAAA,CAAA,2BAAA,GAAR,UAAoC,MAApC,EAAgE;IAAhE,IAAA,KAAA,GAAA,IAAA;;IACE,OAAO,CAAC,EACN,MAAM,IACN,MAAM,CAAC,IAAP,CAAY,UAAA,KAAA,EAAK;MAAI,OAAC,KAAK,CAAC,QAAN,GAAiB,KAAI,CAAC,2BAAL,CAAiC,KAAK,CAAC,QAAvC,CAAjB,GAAoE,CAAC,KAAK,CAA3E,WAAA;IAAwF,CAA7G,CAFM,CAAR;EAID,CALO;;EAOA,eAAA,CAAA,SAAA,CAAA,0BAAA,GAAR,YAAA;IACU,IAAA,MAAM,GAAK,KAAK,KAAL,CAAL,MAAN;IACA,IAAA,yBAAyB,GAAK,KAAK,KAAL,CAAL,yBAAzB;;IAER,IAAM,sBAAsB,GAAG,KAAK,2BAAL,CAAiC,MAAjC,CAA/B;;IACA,IAAI,KAAK,oBAAL,KAA8B,sBAAlC,EAA0D;MACxD,IAAI,yBAAJ,EAA+B;QAC7B,yBAAyB,CAAC,sBAAD,CAAzB;MACD;;MACD,KAAK,oBAAL,GAA4B,sBAA5B;IACD;EACF,CAXO;;EAnXM,eAAA,CAAA,YAAA,GAAe;IAC3B,aAAa,EAAE,aAAa,CAAC,QADF;IAE3B,eAAe,EAAE,IAFU;IAG3B,UAAU,EAAE,EAHe;IAI3B,OAAO,EAAE;EAJkB,CAAf;EA+XhB,OAAA,eAAA;AAAC,CAhYD,CAAqC,KAAK,CAAC,SAA3C,CAAA;;SAAa,e","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = {\n        ...nextState,\n        groups,\n      };\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}