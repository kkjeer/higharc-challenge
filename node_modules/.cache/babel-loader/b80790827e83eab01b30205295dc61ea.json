{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n\n(function (ResponsiveMode) {\n  /** Width \\<= 479px */\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  /** Width \\> 479px and \\<= 639px */\n\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  /** Width \\> 639px and \\<= 1023px */\n\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  /** Width \\> 1023px and \\<= 1365px */\n\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  /** Width \\> 1365px and \\<= 1919px */\n\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  /** Width \\> 1919px */\n\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n  ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\n\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\n\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\n\n\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\n\n\nexport function setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\n\nexport function initializeResponsiveMode(element) {\n  var currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\nexport function getInitialResponsiveMode() {\n  var _a;\n\n  return (_a = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a !== void 0 ? _a : ResponsiveMode.large;\n}\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\n\nexport function withResponsiveMode(ComposedComponent) {\n  var _a; // eslint-disable-next-line deprecation/deprecation\n\n\n  var resultClass = (_a =\n  /** @class */\n  function (_super) {\n    __extends(WithResponsiveMode, _super);\n\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this._onResize = function () {\n        var responsiveMode = getResponsiveMode(_this.context.window);\n\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      };\n\n      _this._events = new EventGroup(_this);\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: getInitialResponsiveMode()\n      };\n      return _this;\n    }\n\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      this._events.on(this.context.window, 'resize', this._onResize);\n\n      this._onResize();\n    };\n\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return responsiveMode === ResponsiveMode.unknown ? null : React.createElement(ComposedComponent, __assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n\n    return WithResponsiveMode;\n  }(BaseDecorator), _a.contextType = WindowContext, _a);\n  return hoistStatics(ComposedComponent, resultClass);\n}\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\n\nexport function getResponsiveMode(currentWindow) {\n  var responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    } // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n\n\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n    }\n  }\n\n  return responsiveMode;\n}","map":{"version":3,"sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  /** Width \\<= 479px */\n  small = 0,\n  /** Width \\> 479px and \\<= 639px */\n  medium = 1,\n  /** Width \\> 639px and \\<= 1023px */\n  large = 2,\n  /** Width \\> 1023px and \\<= 1365px */\n  xLarge = 3,\n  /** Width \\> 1365px and \\<= 1919px */\n  xxLarge = 4,\n  /** Width \\> 1919px */\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  const currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode(): ResponsiveMode {\n  return _defaultMode ?? _lastMode ?? ResponsiveMode.large;\n}\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  // eslint-disable-next-line deprecation/deprecation\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}