{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, getPlaceholderStyles, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input'\n};\nexport function getStyles(props) {\n  var _a, _b, _c;\n\n  var className = props.className,\n      theme = props.theme,\n      isFocused = props.isFocused,\n      inputClassName = props.inputClassName,\n      disabled = props.disabled;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n      inputBorderHovered = semanticColors.inputBorderHovered,\n      inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // placeholder style constants\n\n  var placeholderStyles = [fonts.medium, {\n    color: semanticColors.inputPlaceholderText,\n    opacity: 1,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  }];\n  var disabledPlaceholderStyles = {\n    color: semanticColors.disabledText,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _b)\n  }; // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  return {\n    root: [classNames.root, className],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \" + inputBorder,\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_c = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _c[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _c)\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, getPlaceholderStyles(placeholderStyles), disabled && getPlaceholderStyles(disabledPlaceholderStyles), inputClassName],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"sources":["components/pickers/BasePicker.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getGlobalClassNames,\n  getInputFocusStyle,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  HighContrastSelector,\n} from '../../Styling';\nimport type { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  return {\n    root: [classNames.root, className],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      disabled && getPlaceholderStyles(disabledPlaceholderStyles),\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}