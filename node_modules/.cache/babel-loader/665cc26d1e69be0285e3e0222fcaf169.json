{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexport var ShimmerElementsGroupBase = function (props) {\n  var styles = props.styles,\n      _a = props.width,\n      width = _a === void 0 ? 'auto' : _a,\n      shimmerElements = props.shimmerElements,\n      _b = props.rowHeight,\n      rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b,\n      _c = props.flexWrap,\n      flexWrap = _c === void 0 ? false : _c,\n      theme = props.theme,\n      backgroundColor = props.backgroundColor;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    flexWrap: flexWrap\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: width\n    },\n    className: classNames.root\n  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));\n};\n\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n  var renderedElements = shimmerElements ? shimmerElements.map( // false positive\n  // eslint-disable-next-line array-callback-return\n  function (element, index) {\n    var type = element.type,\n        filteredElem = __rest(element, [\"type\"]);\n\n    var verticalAlign = filteredElem.verticalAlign,\n        height = filteredElem.height;\n    var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        return React.createElement(ShimmerCircle, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n\n      case ShimmerElementType.gap:\n        return React.createElement(ShimmerGap, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n\n      case ShimmerElementType.line:\n        return React.createElement(ShimmerLine, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n    }\n  }) : React.createElement(ShimmerLine, {\n    height: ShimmerElementsDefaultHeights.line\n  });\n  return renderedElements;\n}\n\nvar getElementStyles = memoizeFunction(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {\n  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n  var borderStyle;\n\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n      borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: dif + \"px\",\n      borderTopWidth: \"0px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: \"0px\",\n      borderTopWidth: dif + \"px\"\n    };\n  }\n\n  if (backgroundColor) {\n    switch (elementType) {\n      case ShimmerElementType.circle:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          svg: {\n            fill: backgroundColor\n          }\n        };\n\n      case ShimmerElementType.gap:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor,\n            backgroundColor: backgroundColor\n          })\n        };\n\n      case ShimmerElementType.line:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          topLeftCorner: {\n            fill: backgroundColor\n          },\n          topRightCorner: {\n            fill: backgroundColor\n          },\n          bottomLeftCorner: {\n            fill: backgroundColor\n          },\n          bottomRightCorner: {\n            fill: backgroundColor\n          }\n        };\n    }\n  }\n\n  return {\n    root: borderStyle\n  };\n});\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\n\nfunction findMaxElementHeight(shimmerElements) {\n  var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.circle;\n        }\n\n        break;\n\n      case ShimmerElementType.line:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.line;\n        }\n\n        break;\n\n      case ShimmerElementType.gap:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.gap;\n        }\n\n        break;\n    }\n\n    return element;\n  });\n  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n    return next.height ? next.height > acc ? next.height : acc : acc;\n  }, 0);\n  return rowHeight;\n}","map":{"version":3,"sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport type { IRawStyle } from '../../../Styling';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport type { IShimmerElement } from '../Shimmer.types';\nimport type { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport type { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport type { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}