{"ast":null,"code":"import * as React from 'react';\nimport { css, findIndex } from '@fluentui/utilities';\nimport { DAYS_IN_WEEK } from '@fluentui/date-time-utilities';\nexport var CalendarMonthHeaderRow = function (props) {\n  var showWeekNumbers = props.showWeekNumbers,\n      strings = props.strings,\n      firstDayOfWeek = props.firstDayOfWeek,\n      allFocusable = props.allFocusable,\n      weeksToShow = props.weeksToShow,\n      weeks = props.weeks,\n      classNames = props.classNames;\n  var dayLabels = strings.shortDays.slice();\n  var firstOfMonthIndex = findIndex(weeks[1], function (day) {\n    return day.originalDate.getDate() === 1;\n  });\n\n  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {\n    // if we only show one week, replace the header with short month name\n    var firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;\n    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks[1][firstOfMonthIndex].originalDate.getMonth()];\n  }\n\n  return React.createElement(\"tr\", null, showWeekNumbers && React.createElement(\"th\", {\n    className: classNames.dayCell\n  }), dayLabels.map(function (val, index) {\n    var i = (index + firstDayOfWeek) % DAYS_IN_WEEK;\n    var label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];\n    return React.createElement(\"th\", {\n      className: css(classNames.dayCell, classNames.weekDayLabelCell),\n      scope: \"col\",\n      key: dayLabels[i] + ' ' + index,\n      title: label,\n      \"aria-label\": label,\n      \"data-is-focusable\": allFocusable ? true : undefined\n    }, dayLabels[i]);\n  }));\n};","map":{"version":3,"sources":["components/CalendarDayGrid/CalendarMonthHeaderRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,EAAc,SAAd,QAA+B,qBAA/B;AACA,SAAS,YAAT,QAA6B,+BAA7B;AAUA,OAAO,IAAM,sBAAsB,GAA6D,UAAA,KAAA,EAAK;EAC3F,IAAA,eAAe,GAA4E,KAAK,CAAjF,eAAf;EAAA,IAAiB,OAAO,GAAmE,KAAK,CAAxE,OAAxB;EAAA,IAA0B,cAAc,GAAmD,KAAK,CAAxD,cAAxC;EAAA,IAA0C,YAAY,GAAqC,KAAK,CAA1C,YAAtD;EAAA,IAAwD,WAAW,GAAwB,KAAK,CAA7B,WAAnE;EAAA,IAAqE,KAAK,GAAiB,KAAK,CAAtB,KAA1E;EAAA,IAA4E,UAAU,GAAK,KAAK,CAAV,UAAtF;EACR,IAAM,SAAS,GAAG,OAAO,CAAC,SAAR,CAAkB,KAAlB,EAAlB;EACA,IAAM,iBAAiB,GAAG,SAAS,CAAC,KAAM,CAAC,CAAD,CAAP,EAAY,UAAC,GAAD,EAAc;IAAK,OAAA,GAAG,CAAC,YAAJ,CAAiB,OAAjB,OAAA,CAAA;EAAgC,CAA/D,CAAnC;;EACA,IAAI,WAAW,KAAK,CAAhB,IAAqB,iBAAiB,IAAI,CAA9C,EAAiD;IAC/C;IACA,IAAM,uBAAuB,GAAG,CAAC,iBAAiB,GAAG,cAArB,IAAuC,YAAvE;IACA,SAAS,CAAC,uBAAD,CAAT,GAAqC,OAAO,CAAC,WAAR,CAAoB,KAAM,CAAC,CAAD,CAAN,CAAU,iBAAV,EAA6B,YAA7B,CAA0C,QAA1C,EAApB,CAArC;EACD;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACG,eAAe,IAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAI,SAAS,EAAE,UAAU,CAAC;EAA1B,CAAA,CADtB,EAEG,SAAS,CAAC,GAAV,CAAc,UAAC,GAAD,EAAc,KAAd,EAA2B;IACxC,IAAM,CAAC,GAAG,CAAC,KAAK,GAAG,cAAT,IAA2B,YAArC;IACA,IAAM,KAAK,GAAG,KAAK,KAAK,iBAAV,GAA8B,OAAO,CAAC,IAAR,CAAa,CAAb,IAAkB,GAAlB,GAAwB,SAAS,CAAC,CAAD,CAA/D,GAAqE,OAAO,CAAC,IAAR,CAAa,CAAb,CAAnF;IACA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MACE,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,OAAZ,EAAqB,UAAU,CAAC,gBAAhC,CADhB;MAEE,KAAK,EAAC,KAFR;MAGE,GAAG,EAAE,SAAS,CAAC,CAAD,CAAT,GAAe,GAAf,GAAqB,KAH5B;MAIE,KAAK,EAAE,KAJT;MAIc,cACA,KALd;MAKmB,qBACE,YAAY,GAAG,IAAH,GAAU;IAN3C,CAAA,EAQG,SAAS,CAAC,CAAD,CARZ,CADF;EAYD,CAfA,CAFH,CADF;AAqBD,CA/BM","sourcesContent":["import * as React from 'react';\nimport { css, findIndex } from '@fluentui/utilities';\nimport { DAYS_IN_WEEK } from '@fluentui/date-time-utilities';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo } from './CalendarDayGrid.base';\n\nexport interface ICalendarDayMonthHeaderRowProps extends ICalendarDayGridProps {\n  weeks: IDayInfo[][];\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n}\n\nexport const CalendarMonthHeaderRow: React.FunctionComponent<ICalendarDayMonthHeaderRowProps> = props => {\n  const { showWeekNumbers, strings, firstDayOfWeek, allFocusable, weeksToShow, weeks, classNames } = props;\n  const dayLabels = strings.shortDays.slice();\n  const firstOfMonthIndex = findIndex(weeks![1], (day: IDayInfo) => day.originalDate.getDate() === 1);\n  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {\n    // if we only show one week, replace the header with short month name\n    const firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;\n    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks![1][firstOfMonthIndex].originalDate.getMonth()];\n  }\n\n  return (\n    <tr>\n      {showWeekNumbers && <th className={classNames.dayCell} />}\n      {dayLabels.map((val: string, index: number) => {\n        const i = (index + firstDayOfWeek) % DAYS_IN_WEEK;\n        const label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];\n        return (\n          <th\n            className={css(classNames.dayCell, classNames.weekDayLabelCell)}\n            scope=\"col\"\n            key={dayLabels[i] + ' ' + index}\n            title={label}\n            aria-label={label}\n            data-is-focusable={allFocusable ? true : undefined}\n          >\n            {dayLabels[i]}\n          </th>\n        );\n      })}\n    </tr>\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}