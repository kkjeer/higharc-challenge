{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\n\nexport function mergeSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nexport function mergeScopedSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings) {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings) {\n  return function (settings) {\n    return newSettings ? __assign(__assign({}, settings), newSettings) : settings;\n  };\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps) {\n  if (scopedSettingsFromProps === void 0) {\n    scopedSettingsFromProps = {};\n  }\n\n  return function (oldScopedSettings) {\n    var newScopedSettings = __assign({}, oldScopedSettings);\n\n    for (var scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);\n      }\n    }\n\n    return newScopedSettings;\n  };\n}","map":{"version":3,"sources":["customizations/mergeSettings.ts"],"names":[],"mappings":";AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,aAAV,CAAwB,WAAxB,EAAqD,WAArD,EAAgG;EAAxE,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,EAAA;EAA2B;;EACvD,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,WAAnC,GAAiD,kBAAkB,CAAC,WAAD,CAA7F;EAEA,OAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;AAED,OAAM,SAAU,mBAAV,CACJ,WADI,EAEJ,WAFI,EAEuC;EAD3C,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,EAAA;EAA2B;;EAG3B,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,WAAnC,GAAiD,wBAAwB,CAAC,WAAD,CAAnG;EAEA,OAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,SAAS,mBAAT,CAA6B,QAA7B,EAAqE;EACnE,OAAO,OAAO,QAAP,KAAoB,UAA3B;AACD;;AAED,SAAS,kBAAT,CAA4B,WAA5B,EAAgD;EAC9C,OAAO,UAAC,QAAD,EAAoB;IAAK,OAAC,WAAW,GAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,QAAN,CAAA,EAAmB,WAAnB,CAAF,GAAZ,QAAA;EAA0D,CAA1F;AACD;;AAED,SAAS,wBAAT,CAAkC,uBAAlC,EAAyE;EAAvC,IAAA,uBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,uBAAA,GAAA,EAAA;EAAuC;;EACvE,OAAO,UAAC,iBAAD,EAA6B;IAClC,IAAM,iBAAiB,GAAA,QAAA,CAAA,EAAA,EAAmB,iBAAnB,CAAvB;;IAEA,KAAK,IAAI,SAAT,IAAsB,uBAAtB,EAA+C;MAC7C,IAAI,uBAAuB,CAAC,cAAxB,CAAuC,SAAvC,CAAJ,EAAuD;QACrD,iBAAiB,CAAC,SAAD,CAAjB,GAA4B,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,iBAAiB,CAAC,SAAD,CAAzB,CAAA,EAAyC,uBAAuB,CAAC,SAAD,CAAhE,CAA5B;MACD;IACF;;IAED,OAAO,iBAAP;EACD,CAVD;AAWD","sourcesContent":["import type { ISettings, ISettingsFunction } from './Customizations';\n\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nexport function mergeScopedSettings(\n  oldSettings: ISettings = {},\n  newSettings?: ISettings | ISettingsFunction,\n): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings?: ISettings | ISettingsFunction): settings is ISettingsFunction {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings?: object): (settings: ISettings) => ISettings {\n  return (settings: ISettings) => (newSettings ? { ...settings, ...newSettings } : settings);\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps: ISettings = {}): (scopedSettings: ISettings) => ISettings {\n  return (oldScopedSettings: ISettings): ISettings => {\n    const newScopedSettings: ISettings = { ...oldScopedSettings };\n\n    for (let scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\n      }\n    }\n\n    return newScopedSettings;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}