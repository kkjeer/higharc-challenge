{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\n\nvar Async =\n/** @class */\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Async(parent, onError) {\n    this._timeoutIds = null;\n    this._immediateIds = null;\n    this._intervalIds = null;\n    this._animationFrameIds = null;\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n\n    this._noop = function () {\n      /* do nothing */\n    };\n  }\n  /**\n   * Dispose function, clears all async operations.\n   */\n\n\n  Async.prototype.dispose = function () {\n    var id;\n    this._isDisposed = true;\n    this._parent = null; // Clear timeouts.\n\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n\n      this._timeoutIds = null;\n    } // Clear immediates.\n\n\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n\n      this._immediateIds = null;\n    } // Clear intervals.\n\n\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n\n      this._intervalIds = null;\n    } // Clear animation frames.\n\n\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n\n      this._animationFrameIds = null;\n    }\n  };\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setTimeout = function (callback, duration) {\n    var _this = this;\n\n    var timeoutId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n\n      timeoutId = setTimeout(function () {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._timeoutIds) {\n            delete _this._timeoutIds[timeoutId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      }, duration);\n      this._timeoutIds[timeoutId] = true;\n    }\n\n    return timeoutId;\n  };\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n\n\n  Async.prototype.clearTimeout = function (id) {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  };\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setImmediate = function (callback, targetElement) {\n    var _this = this;\n\n    var immediateId = 0;\n    var win = getWindow(targetElement);\n\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n\n      var setImmediateCallback = function () {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._immediateIds) {\n            delete _this._immediateIds[immediateId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n      this._immediateIds[immediateId] = true;\n    }\n\n    return immediateId;\n  };\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n\n\n  Async.prototype.clearImmediate = function (id, targetElement) {\n    var win = getWindow(targetElement);\n\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  };\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n\n\n  Async.prototype.setInterval = function (callback, duration) {\n    var _this = this;\n\n    var intervalId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n\n      intervalId = setInterval(function () {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      }, duration);\n      this._intervalIds[intervalId] = true;\n    }\n\n    return intervalId;\n  };\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n\n\n  Async.prototype.clearInterval = function (id) {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  };\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype.throttle = function (func, wait, options) {\n    var _this = this;\n\n    if (this._isDisposed) {\n      return this._noop;\n    }\n\n    var waitMS = wait || 0;\n    var leading = true;\n    var trailing = true;\n    var lastExecuteTime = 0;\n    var lastResult; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var lastArgs;\n    var timeoutId = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    var callback = function (userCall) {\n      var now = Date.now();\n      var delta = now - lastExecuteTime;\n      var waitLength = leading ? waitMS - delta : waitMS;\n\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n\n        if (timeoutId) {\n          _this.clearTimeout(timeoutId);\n\n          timeoutId = null;\n        }\n\n        lastResult = func.apply(_this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var resultFunction = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      lastArgs = args;\n      return callback(true);\n    };\n\n    return resultFunction;\n  };\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype.debounce = function (func, wait, options) {\n    var _this = this;\n\n    if (this._isDisposed) {\n      var noOpFunction = function () {\n        /** Do nothing */\n      };\n\n      noOpFunction.cancel = function () {\n        return;\n      };\n\n      noOpFunction.flush = function () {\n        return null;\n      };\n\n      noOpFunction.pending = function () {\n        return false;\n      };\n\n      return noOpFunction;\n    }\n\n    var waitMS = wait || 0;\n    var leading = false;\n    var trailing = true;\n    var maxWait = null;\n    var lastCallTime = 0;\n    var lastExecuteTime = Date.now();\n    var lastResult; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var lastArgs;\n    var timeoutId = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n\n    var markExecuted = function (time) {\n      if (timeoutId) {\n        _this.clearTimeout(timeoutId);\n\n        timeoutId = null;\n      }\n\n      lastExecuteTime = time;\n    };\n\n    var invokeFunction = function (time) {\n      markExecuted(time);\n      lastResult = func.apply(_this._parent, lastArgs);\n    };\n\n    var callback = function (userCall) {\n      var now = Date.now();\n      var executeImmediately = false;\n\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n\n        lastCallTime = now;\n      }\n\n      var delta = now - lastCallTime;\n      var waitLength = waitMS - delta;\n      var maxWaitDelta = now - lastExecuteTime;\n      var maxWaitExpired = false;\n\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    var pending = function () {\n      return !!timeoutId;\n    };\n\n    var cancel = function () {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n\n    var flush = function () {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n\n      return lastResult;\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var resultFunction = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      lastArgs = args;\n      return callback(true);\n    };\n\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n    return resultFunction;\n  };\n\n  Async.prototype.requestAnimationFrame = function (callback, targetElement) {\n    var _this = this;\n\n    var animationFrameId = 0;\n    var win = getWindow(targetElement);\n\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n\n      var animationFrameCallback = function () {\n        try {\n          // Now delete the record and call the callback.\n          if (_this._animationFrameIds) {\n            delete _this._animationFrameIds[animationFrameId];\n          }\n\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n\n      animationFrameId = win.requestAnimationFrame ? win.requestAnimationFrame(animationFrameCallback) : win.setTimeout(animationFrameCallback, 0);\n      this._animationFrameIds[animationFrameId] = true;\n    }\n\n    return animationFrameId;\n  };\n\n  Async.prototype.cancelAnimationFrame = function (id, targetElement) {\n    var win = getWindow(targetElement);\n\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Async.prototype._logError = function (e) {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  };\n\n  return Async;\n}();\n\nexport { Async };","map":{"version":3,"sources":["Async.ts"],"names":[],"mappings":"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","sourcesContent":["import { getWindow } from './dom/getWindow';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\ndeclare function setInterval(cb: Function, delay: number): number;\n\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\nexport class Async {\n  private _timeoutIds: { [id: number]: boolean } | null = null;\n  private _immediateIds: { [id: number]: boolean } | null = null;\n  private _intervalIds: { [id: number]: boolean } | null = null;\n  private _animationFrameIds: { [id: number]: boolean } | null = null;\n  private _isDisposed: boolean;\n  private _parent: object | null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _onErrorHandler: ((e: any) => void) | undefined;\n  private _noop: () => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(parent?: object, onError?: (e: any) => void) {\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n    this._noop = () => {\n      /* do nothing */\n    };\n  }\n\n  /**\n   * Dispose function, clears all async operations.\n   */\n  public dispose(): void {\n    let id;\n\n    this._isDisposed = true;\n    this._parent = null;\n\n    // Clear timeouts.\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n\n      this._timeoutIds = null;\n    }\n\n    // Clear immediates.\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n\n      this._immediateIds = null;\n    }\n\n    // Clear intervals.\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n      this._intervalIds = null;\n    }\n\n    // Clear animation frames.\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n\n      this._animationFrameIds = null;\n    }\n  }\n\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  public setTimeout(callback: () => void, duration: number): number {\n    let timeoutId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n\n      timeoutId = setTimeout(() => {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n\n        try {\n          // Now delete the record and call the callback.\n          if (this._timeoutIds) {\n            delete this._timeoutIds[timeoutId];\n          }\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      }, duration);\n\n      this._timeoutIds[timeoutId] = true;\n    }\n\n    return timeoutId;\n  }\n\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n  public clearTimeout(id: number): void {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  }\n\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n  public setImmediate(callback: () => void, targetElement?: Element | null): number {\n    let immediateId = 0;\n    const win = getWindow(targetElement)!;\n\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n\n      let setImmediateCallback = () => {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n\n        try {\n          // Now delete the record and call the callback.\n          if (this._immediateIds) {\n            delete this._immediateIds[immediateId];\n          }\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      };\n\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n\n      this._immediateIds[immediateId] = true;\n    }\n\n    return immediateId;\n  }\n\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n  public clearImmediate(id: number, targetElement?: Element | null): void {\n    const win = getWindow(targetElement)!;\n\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  }\n\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  public setInterval(callback: () => void, duration: number): number {\n    let intervalId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n\n      intervalId = setInterval(() => {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      }, duration);\n\n      this._intervalIds[intervalId] = true;\n    }\n\n    return intervalId;\n  }\n\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n  public clearInterval(id: number): void {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public throttle<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n    options?: {\n      leading?: boolean;\n      trailing?: boolean;\n    },\n  ): T {\n    if (this._isDisposed) {\n      return this._noop as T;\n    }\n\n    let waitMS = wait || 0;\n    let leading = true;\n    let trailing = true;\n    let lastExecuteTime = 0;\n    let lastResult: T;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lastArgs: any[];\n    let timeoutId: number | null = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    let callback = (userCall?: boolean) => {\n      let now = Date.now();\n      let delta = now - lastExecuteTime;\n      let waitLength = leading ? waitMS - delta : waitMS;\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n        if (timeoutId) {\n          this.clearTimeout(timeoutId);\n          timeoutId = null;\n        }\n        lastResult = func.apply(this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let resultFunction = ((...args: any[]): any => {\n      lastArgs = args;\n      return callback(true);\n    }) as T;\n\n    return resultFunction;\n  }\n\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n    options?: {\n      leading?: boolean;\n      maxWait?: number;\n      trailing?: boolean;\n    },\n  ): ICancelable<T> & T {\n    if (this._isDisposed) {\n      let noOpFunction = (() => {\n        /** Do nothing */\n      }) as ICancelable<T> & T;\n\n      noOpFunction.cancel = () => {\n        return;\n      };\n      noOpFunction.flush = ((() => null) as unknown) as () => ReturnType<T>;\n      noOpFunction.pending = () => false;\n\n      return noOpFunction;\n    }\n\n    let waitMS = wait || 0;\n    let leading = false;\n    let trailing = true;\n    let maxWait: number | null = null;\n    let lastCallTime = 0;\n    let lastExecuteTime = Date.now();\n    let lastResult: ReturnType<T>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lastArgs: any[];\n    let timeoutId: number | null = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n\n    let markExecuted = (time: number) => {\n      if (timeoutId) {\n        this.clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n      lastExecuteTime = time;\n    };\n\n    let invokeFunction = (time: number) => {\n      markExecuted(time);\n      lastResult = func.apply(this._parent, lastArgs);\n    };\n\n    let callback = (userCall?: boolean) => {\n      let now = Date.now();\n      let executeImmediately = false;\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n        lastCallTime = now;\n      }\n      let delta = now - lastCallTime;\n      let waitLength = waitMS - delta;\n      let maxWaitDelta = now - lastExecuteTime;\n      let maxWaitExpired = false;\n\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    let pending = (): boolean => {\n      return !!timeoutId;\n    };\n\n    let cancel = (): void => {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n\n    let flush = () => {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n\n      return lastResult;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let resultFunction = ((...args: any[]) => {\n      lastArgs = args;\n      return callback(true);\n    }) as ICancelable<T> & T;\n\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n\n    return resultFunction;\n  }\n\n  public requestAnimationFrame(callback: () => void, targetElement?: Element | null): number {\n    let animationFrameId = 0;\n    const win = getWindow(targetElement)!;\n\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n\n      let animationFrameCallback = () => {\n        try {\n          // Now delete the record and call the callback.\n          if (this._animationFrameIds) {\n            delete this._animationFrameIds[animationFrameId];\n          }\n\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      };\n\n      animationFrameId = win.requestAnimationFrame\n        ? win.requestAnimationFrame(animationFrameCallback)\n        : win.setTimeout(animationFrameCallback, 0);\n\n      this._animationFrameIds[animationFrameId] = true;\n    }\n\n    return animationFrameId;\n  }\n\n  public cancelAnimationFrame(id: number, targetElement?: Element | null): void {\n    const win = getWindow(targetElement)!;\n\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _logError(e: any): void {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ICancelable<T extends (...args: any[]) => any> = {\n  flush: () => ReturnType<T>;\n  cancel: () => void;\n  pending: () => boolean;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}