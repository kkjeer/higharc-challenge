{"ast":null,"code":"import { Stylesheet } from '@fluentui/merge-styles';\nvar _initializedStylesheetResets = false;\nvar _resetCounter = 0;\nvar _emptyObject = {\n  empty: true\n};\nvar _dictionary = {};\n\nvar _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\n\n\nexport function setMemoizeWeakMap(weakMap) {\n  _weakMap = weakMap;\n}\n/**\n * Reset memoizations.\n */\n\nexport function resetMemoizations() {\n  _resetCounter++;\n}\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\n\nexport function memoize(_target, _key, descriptor) {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  var fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n  return {\n    configurable: true,\n    get: function () {\n      return fn;\n    }\n  };\n}\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\n\nexport function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {\n  if (maxCacheSize === void 0) {\n    maxCacheSize = 100;\n  }\n\n  if (ignoreNullOrUndefinedResult === void 0) {\n    ignoreNullOrUndefinedResult = false;\n  } // Avoid breaking scenarios which don't have weak map.\n\n\n  if (!_weakMap) {\n    return cb;\n  }\n\n  if (!_initializedStylesheetResets) {\n    var stylesheet = Stylesheet.getInstance();\n\n    if (stylesheet && stylesheet.onReset) {\n      Stylesheet.getInstance().onReset(resetMemoizations);\n    }\n\n    _initializedStylesheetResets = true;\n  }\n\n  var rootNode;\n  var cacheSize = 0;\n  var localResetCounter = _resetCounter;\n  return function memoizedFunction() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var currentNode = rootNode;\n\n    if (rootNode === undefined || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode; // Traverse the tree until we find the match.\n\n    for (var i = 0; i < args.length; i++) {\n      var arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb.apply(void 0, args);\n      cacheSize++;\n    }\n\n    if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n      currentNode.value = cb.apply(void 0, args);\n    }\n\n    return currentNode.value;\n  };\n}\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\n\nexport function createMemoizer(getValue) {\n  if (!_weakMap) {\n    // Without a `WeakMap` implementation, memoization is not possible.\n    return getValue;\n  }\n\n  var cache = new _weakMap();\n\n  function memoizedGetValue(input) {\n    if (!input || typeof input !== 'function' && typeof input !== 'object') {\n      // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n      // All other inputs cannot be memoized against in this manner.\n      return getValue(input);\n    }\n\n    if (cache.has(input)) {\n      return cache.get(input);\n    }\n\n    var value = getValue(input);\n    cache.set(input, value);\n    return value;\n  }\n\n  return memoizedGetValue;\n}\n\nfunction _normalizeArg(val) {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = {\n      val: val\n    };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode() {\n  return {\n    map: _weakMap ? new _weakMap() : null\n  };\n}","map":{"version":3,"sources":["memoize.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stylesheet } from '@fluentui/merge-styles';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\ndeclare class WeakMap {\n  public get(key: any): any;\n  public set(key: any, value: any): void;\n  public has(key: any): boolean;\n}\n\nlet _initializedStylesheetResets = false;\nlet _resetCounter = 0;\nconst _emptyObject = { empty: true };\nconst _dictionary: any = {};\nlet _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n\ninterface IMemoizeNode {\n  map: WeakMap | null;\n  value?: any;\n}\n\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\nexport function setMemoizeWeakMap(weakMap: any): void {\n  _weakMap = weakMap;\n}\n\n/**\n * Reset memoizations.\n */\nexport function resetMemoizations(): void {\n  _resetCounter++;\n}\n\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\nexport function memoize<T extends Function>(\n  _target: any,\n  _key: string,\n  descriptor: TypedPropertyDescriptor<T>,\n): {\n  configurable: boolean;\n  get(): T;\n} {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  let fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n\n  return {\n    configurable: true,\n    get(): T {\n      return fn;\n    },\n  };\n}\n\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\nexport function memoizeFunction<T extends (...args: any[]) => RetType, RetType>(\n  cb: T,\n  maxCacheSize: number = 100,\n  ignoreNullOrUndefinedResult: boolean = false,\n): T {\n  // Avoid breaking scenarios which don't have weak map.\n  if (!_weakMap) {\n    return cb;\n  }\n\n  if (!_initializedStylesheetResets) {\n    const stylesheet = Stylesheet.getInstance();\n\n    if (stylesheet && (stylesheet as { onReset?: unknown }).onReset) {\n      Stylesheet.getInstance().onReset(resetMemoizations);\n    }\n    _initializedStylesheetResets = true;\n  }\n\n  let rootNode: any;\n  let cacheSize = 0;\n  let localResetCounter = _resetCounter;\n\n  return function memoizedFunction(...args: any[]): RetType {\n    let currentNode: any = rootNode;\n\n    if (\n      rootNode === undefined ||\n      localResetCounter !== _resetCounter ||\n      (maxCacheSize > 0 && cacheSize > maxCacheSize)\n    ) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode;\n\n    // Traverse the tree until we find the match.\n    for (let i = 0; i < args.length; i++) {\n      let arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb(...args);\n      cacheSize++;\n    }\n\n    if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n      currentNode.value = cb(...args);\n    }\n\n    return currentNode.value;\n  } as any;\n}\n\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\nexport function createMemoizer<F extends (input: any) => any>(getValue: F): F {\n  if (!_weakMap) {\n    // Without a `WeakMap` implementation, memoization is not possible.\n    return getValue;\n  }\n\n  const cache = new _weakMap();\n\n  function memoizedGetValue(input: any): any {\n    if (!input || (typeof input !== 'function' && typeof input !== 'object')) {\n      // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n      // All other inputs cannot be memoized against in this manner.\n      return getValue(input);\n    }\n\n    if (cache.has(input)) {\n      return cache.get(input)!;\n    }\n\n    const value = getValue(input);\n\n    cache.set(input, value);\n\n    return value;\n  }\n\n  return memoizedGetValue as F;\n}\n\nfunction _normalizeArg(val: null | undefined): { empty: boolean } | any;\nfunction _normalizeArg(val: object): any;\nfunction _normalizeArg(val: any): any {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = { val };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode(): IMemoizeNode {\n  return {\n    map: _weakMap ? new _weakMap() : null,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}