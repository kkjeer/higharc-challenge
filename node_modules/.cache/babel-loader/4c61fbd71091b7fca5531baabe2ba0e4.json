{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getFirstVisibleElementFromSelector } from '../../Utilities';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\n\nvar Keytip =\n/** @class */\nfunction (_super) {\n  __extends(Keytip, _super);\n\n  function Keytip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Keytip.prototype.render = function () {\n    var _a = this.props,\n        keySequences = _a.keySequences,\n        offset = _a.offset,\n        overflowSetSequence = _a.overflowSetSequence;\n    var calloutProps = this.props.calloutProps;\n    var keytipTarget; // Take into consideration the overflow sequence\n\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    var element = getFirstVisibleElementFromSelector(keytipTarget);\n\n    if (!element) {\n      return React.createElement(React.Fragment, null);\n    }\n\n    keytipTarget = element;\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = __assign(__assign({}, calloutProps), {\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge\n      });\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = __assign(__assign({}, calloutProps), {\n        directionalHint: DirectionalHint.bottomCenter\n      });\n    }\n\n    return React.createElement(Callout, __assign({}, calloutProps, {\n      isBeakVisible: false,\n      doNotLayer: true,\n      minPagePadding: 0,\n      styles: offset ? getCalloutOffsetStyles(offset) : getCalloutStyles,\n      preventDismissOnScroll: true,\n      target: keytipTarget\n    }), React.createElement(KeytipContent, __assign({}, this.props)));\n  };\n\n  return Keytip;\n}(React.Component);\n\nexport { Keytip };","map":{"version":3,"sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kCAAT,QAAmD,iBAAnD;AACA,SAAS,cAAT,EAAyB,sBAAzB,QAAuD,qCAAvD;AACA,SAAS,OAAT,QAAwB,eAAxB;AACA,SAAS,eAAT,QAAgC,sBAAhC;AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,gBAAT,EAA2B,sBAA3B,QAAyD,iBAAzD;AAIA;;AAEG;;AACH,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAA4B,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;EAA5B,SAAA,MAAA,GAAA;;EAqDC;;EApDQ,MAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACQ,IAAA,EAAA,GAAgD,KAAK,KAArD;IAAA,IAAE,YAAY,GAAA,EAAA,CAAA,YAAd;IAAA,IAAgB,MAAM,GAAA,EAAA,CAAA,MAAtB;IAAA,IAAwB,mBAAmB,GAAA,EAAA,CAAA,mBAA3C;IACA,IAAA,YAAY,GAAK,KAAK,KAAL,CAAL,YAAZ;IAEN,IAAI,YAAJ,CAJF,CAKE;;IACA,IAAI,mBAAJ,EAAyB;MACvB,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,YAAD,EAAe,mBAAf,CAAf,CAArC;IACD,CAFD,MAEO;MACL,YAAY,GAAG,sBAAsB,CAAC,YAAD,CAArC;IACD;;IAED,IAAM,OAAO,GAAG,kCAAkC,CAAC,YAAD,CAAlD;;IAEA,IAAI,CAAC,OAAL,EAAc;MACZ,OAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAAP;IACD;;IAED,YAAY,GAAG,OAAf;;IAEA,IAAI,MAAJ,EAAY;MACV;MACA;MACA,YAAY,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACP,YADO,CAAA,EACK;QACf,WAAW,EAAE,IADE;QAEf,eAAe,EAAE,eAAe,CAAC;MAFlB,CADL,CAAZ;IAKD;;IAED,IAAI,CAAC,YAAD,IAAiB,YAAY,CAAC,eAAb,KAAiC,SAAtD,EAAiE;MAC/D;MACA,YAAY,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACP,YADO,CAAA,EACK;QACf,eAAe,EAAE,eAAe,CAAC;MADlB,CADL,CAAZ;IAID;;IAED,OACE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,QAAA,CAAA,EAAA,EACF,YADE,EACU;MAChB,aAAa,EAAE,KADC;MAEhB,UAAU,EAAE,IAFI;MAGhB,cAAc,EAAE,CAHA;MAIhB,MAAM,EAAE,MAAM,GAAG,sBAAsB,CAAC,MAAD,CAAzB,GAAoC,gBAJlC;MAKhB,sBAAsB,EAAE,IALR;MAMhB,MAAM,EAAE;IANQ,CADV,CAAR,EASE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,QAAA,CAAA,EAAA,EAAK,KAAK,KAAV,CAAd,CATF,CADF;EAaD,CAnDM;;EAoDT,OAAA,MAAA;AAAC,CArDD,CAA4B,KAAK,CAAC,SAAlC,CAAA","sourcesContent":["import * as React from 'react';\nimport { getFirstVisibleElementFromSelector } from '../../Utilities';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\nimport type { IKeytipProps } from './Keytip.types';\nimport type { Target } from '@fluentui/react-hooks';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nexport class Keytip extends React.Component<IKeytipProps, {}> {\n  public render(): JSX.Element {\n    const { keySequences, offset, overflowSetSequence } = this.props;\n    let { calloutProps } = this.props;\n\n    let keytipTarget: Target;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    const element = getFirstVisibleElementFromSelector(keytipTarget);\n\n    if (!element) {\n      return <></>;\n    }\n\n    keytipTarget = element;\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge,\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter,\n      };\n    }\n\n    return (\n      <Callout\n        {...calloutProps}\n        isBeakVisible={false}\n        doNotLayer={true}\n        minPagePadding={0}\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\n        preventDismissOnScroll={true}\n        target={keytipTarget}\n      >\n        <KeytipContent {...this.props} />\n      </Callout>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}