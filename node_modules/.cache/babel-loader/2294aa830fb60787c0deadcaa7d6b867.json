{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nvar styles = stylesImport;\n\nvar BaseExtendedPicker =\n/** @class */\nfunction (_super) {\n  __extends(BaseExtendedPicker, _super);\n\n  function BaseExtendedPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.floatingPicker = React.createRef();\n    _this.selectedItemsList = React.createRef();\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n\n    _this.onSelectionChange = function () {\n      _this.forceUpdate();\n    };\n\n    _this.onInputChange = function (value, composing) {\n      // We don't want to update the picker's suggestions when the input is still being composed\n      if (!composing) {\n        _this.setState({\n          queryString: value\n        });\n\n        if (_this.floatingPicker.current) {\n          _this.floatingPicker.current.onQueryStringChanged(value);\n        }\n      }\n    };\n\n    _this.onInputFocus = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n\n      if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n        _this.props.inputProps.onFocus(ev);\n      }\n    };\n\n    _this.onInputClick = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n\n      if (_this.floatingPicker.current && _this.inputElement) {\n        // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n        var shoudUpdateValue = _this.inputElement.value === '' || _this.inputElement.value !== _this.floatingPicker.current.inputText;\n\n        _this.floatingPicker.current.showPicker(shoudUpdateValue);\n      }\n    }; // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n    // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n\n\n    _this.onBackspace = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which !== KeyCodes.backspace) {\n        return;\n      }\n\n      if (_this.selectedItemsList.current && _this.items.length) {\n        if (_this.input.current && !_this.input.current.isValueSelected && _this.input.current.inputElement === ev.currentTarget.ownerDocument.activeElement && _this.input.current.cursorLocation === 0) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n\n          ev.preventDefault();\n\n          _this.selectedItemsList.current.removeItemAt(_this.items.length - 1);\n\n          _this._onSelectedItemsChanged();\n        } else if (_this.selectedItemsList.current.hasSelectedItems()) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n\n          ev.preventDefault();\n\n          _this.selectedItemsList.current.removeSelectedItems();\n\n          _this._onSelectedItemsChanged();\n        }\n      }\n    };\n\n    _this.onCopy = function (ev) {\n      if (_this.selectedItemsList.current) {\n        // Pass it down into the selected items list\n        _this.selectedItemsList.current.onCopy(ev);\n      }\n    };\n\n    _this.onPaste = function (ev) {\n      if (_this.props.onPaste) {\n        var inputText = ev.clipboardData.getData('Text');\n        ev.preventDefault();\n\n        _this.props.onPaste(inputText);\n      }\n    };\n\n    _this._onSuggestionSelected = function (item) {\n      var currentRenderedQueryString = _this.props.currentRenderedQueryString;\n      var queryString = _this.state.queryString;\n\n      if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n        var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n\n        if (processedItem === null) {\n          return;\n        }\n\n        var processedItemObject = processedItem;\n        var processedItemPromiseLike = processedItem;\n        var newItem_1;\n\n        if (processedItemPromiseLike && processedItemPromiseLike.then) {\n          processedItemPromiseLike.then(function (resolvedProcessedItem) {\n            newItem_1 = resolvedProcessedItem;\n\n            _this._addProcessedItem(newItem_1);\n          });\n        } else {\n          newItem_1 = processedItemObject;\n\n          _this._addProcessedItem(newItem_1);\n        }\n      }\n    };\n\n    _this._onSelectedItemsChanged = function () {\n      _this.focus();\n    };\n    /**\n     * The floating picker is the source of truth for if the menu has been opened or not.\n     *\n     * Because this isn't tracked inside the state of this component, we need to\n     * force an update here to keep the rendered output that depends on the picker being open\n     * in sync with the state\n     *\n     * Called when the suggestions is shown or closed\n     */\n\n\n    _this._onSuggestionsShownOrHidden = function () {\n      _this.forceUpdate();\n    };\n\n    initializeComponentRef(_this);\n    _this.selection = new Selection({\n      onSelectionChanged: function () {\n        return _this.onSelectionChange();\n      }\n    });\n    _this.state = {\n      queryString: ''\n    };\n    return _this;\n  }\n\n  Object.defineProperty(BaseExtendedPicker.prototype, \"items\", {\n    get: function () {\n      var _a, _b, _c, _d;\n\n      return (_d = (_c = (_a = this.props.selectedItems) !== null && _a !== void 0 ? _a : (_b = this.selectedItemsList.current) === null || _b === void 0 ? void 0 : _b.items) !== null && _c !== void 0 ? _c : this.props.defaultSelectedItems) !== null && _d !== void 0 ? _d : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.componentDidMount = function () {\n    this.forceUpdate();\n  };\n\n  BaseExtendedPicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n\n  BaseExtendedPicker.prototype.clearInput = function () {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  };\n\n  Object.defineProperty(BaseExtendedPicker.prototype, \"inputElement\", {\n    get: function () {\n      return this.input.current && this.input.current.inputElement;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BaseExtendedPicker.prototype, \"highlightedItems\", {\n    get: function () {\n      return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        inputProps = _a.inputProps,\n        disabled = _a.disabled,\n        focusZoneProps = _a.focusZoneProps;\n    var activeDescendant = this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1 ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex : undefined;\n    var isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseExtendedPicker', className ? className : ''),\n      onKeyDown: this.onBackspace,\n      onCopy: this.onCopy\n    }, React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.bidirectional\n    }, focusZoneProps), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: css('ms-BasePicker-text', styles.pickerText),\n      role: 'list'\n    }, this.props.headerComponent, this.renderSelectedItemsList(), this.canAddItems() && React.createElement(Autofill, __assign({}, inputProps, {\n      className: css('ms-BasePicker-input', styles.pickerInput),\n      ref: this.input,\n      onFocus: this.onInputFocus,\n      onClick: this.onInputClick,\n      onInputValueChange: this.onInputChange,\n      \"aria-activedescendant\": activeDescendant,\n      \"aria-owns\": isExpanded ? 'suggestion-list' : undefined,\n      \"aria-expanded\": isExpanded,\n      \"aria-haspopup\": \"true\",\n      role: \"combobox\",\n      disabled: disabled,\n      onPaste: this.onPaste\n    }))))), this.renderFloatingPicker());\n  };\n\n  Object.defineProperty(BaseExtendedPicker.prototype, \"floatingPickerProps\", {\n    get: function () {\n      return this.props.floatingPickerProps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BaseExtendedPicker.prototype, \"selectedItemsListProps\", {\n    get: function () {\n      return this.props.selectedItemsListProps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BaseExtendedPicker.prototype.canAddItems = function () {\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  };\n\n  BaseExtendedPicker.prototype.renderFloatingPicker = function () {\n    var FloatingPicker = this.props.onRenderFloatingPicker;\n    return React.createElement(FloatingPicker, __assign({\n      componentRef: this.floatingPicker,\n      onChange: this._onSuggestionSelected,\n      onSuggestionsHidden: this._onSuggestionsShownOrHidden,\n      onSuggestionsShown: this._onSuggestionsShownOrHidden,\n      inputElement: this.input.current ? this.input.current.inputElement : undefined,\n      selectedItems: this.items,\n      suggestionItems: this.props.suggestionItems ? this.props.suggestionItems : undefined\n    }, this.floatingPickerProps));\n  };\n\n  BaseExtendedPicker.prototype.renderSelectedItemsList = function () {\n    var SelectedItems = this.props.onRenderSelectedItems;\n    return React.createElement(SelectedItems, __assign({\n      componentRef: this.selectedItemsList,\n      selection: this.selection,\n      selectedItems: this.props.selectedItems ? this.props.selectedItems : undefined,\n      onItemsDeleted: this.props.selectedItems ? this.props.onItemsRemoved : undefined\n    }, this.selectedItemsListProps));\n  };\n\n  BaseExtendedPicker.prototype._addProcessedItem = function (newItem) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  };\n\n  return BaseExtendedPicker;\n}(React.Component);\n\nexport { BaseExtendedPicker };","map":{"version":3,"sources":["components/ExtendedPicker/BaseExtendedPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { BaseFloatingPicker } from '../../FloatingPicker';\nimport { BaseSelectedItemsList } from '../../SelectedItemsList';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport type { IInputProps } from '../../Pickers';\nimport type { IBaseExtendedPickerProps, IBaseExtendedPicker } from './BaseExtendedPicker.types';\nimport type { IBaseFloatingPickerProps } from '../../FloatingPicker';\nimport type { IBaseSelectedItemsListProps } from '../../SelectedItemsList';\n\nconst styles: any = stylesImport;\n\nexport interface IBaseExtendedPickerState<T> {\n  queryString: string | null;\n}\n\nexport class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>>\n  extends React.Component<P, IBaseExtendedPickerState<T>>\n  implements IBaseExtendedPicker<T> {\n  public floatingPicker = React.createRef<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>();\n  public selectedItemsList = React.createRef<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>();\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<Autofill>();\n  protected selection: Selection;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n\n    this.state = {\n      queryString: '',\n    };\n  }\n\n  public get items(): any {\n    return this.props.selectedItems ?? this.selectedItemsList.current?.items ?? this.props.defaultSelectedItems ?? null;\n  }\n\n  public componentDidMount(): void {\n    this.forceUpdate();\n  }\n\n  public focus(): void {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public clearInput(): void {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.input.current && this.input.current.inputElement;\n  }\n\n  public get highlightedItems(): T[] {\n    return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n  }\n\n  public render(): JSX.Element {\n    const { className, inputProps, disabled, focusZoneProps } = this.props;\n    const activeDescendant =\n      this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1\n        ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex\n        : undefined;\n    const isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n\n    return (\n      <div\n        ref={this.root}\n        className={css('ms-BasePicker ms-BaseExtendedPicker', className ? className : '')}\n        onKeyDown={this.onBackspace}\n        onCopy={this.onCopy}\n      >\n        <FocusZone direction={FocusZoneDirection.bidirectional} {...focusZoneProps}>\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={css('ms-BasePicker-text', styles.pickerText)} role={'list'}>\n              {this.props.headerComponent}\n              {this.renderSelectedItemsList()}\n              {this.canAddItems() && (\n                <Autofill\n                  {...(inputProps as IInputProps)}\n                  className={css('ms-BasePicker-input', styles.pickerInput)}\n                  ref={this.input}\n                  onFocus={this.onInputFocus}\n                  onClick={this.onInputClick}\n                  onInputValueChange={this.onInputChange}\n                  aria-activedescendant={activeDescendant}\n                  aria-owns={isExpanded ? 'suggestion-list' : undefined}\n                  aria-expanded={isExpanded}\n                  aria-haspopup=\"true\"\n                  role=\"combobox\"\n                  disabled={disabled}\n                  onPaste={this.onPaste}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderFloatingPicker()}\n      </div>\n    );\n  }\n  protected get floatingPickerProps(): IBaseFloatingPickerProps<T> {\n    return this.props.floatingPickerProps;\n  }\n\n  protected get selectedItemsListProps(): IBaseSelectedItemsListProps<T> {\n    return this.props.selectedItemsListProps;\n  }\n\n  protected onSelectionChange = (): void => {\n    this.forceUpdate();\n  };\n\n  protected canAddItems(): boolean {\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  }\n\n  protected renderFloatingPicker(): JSX.Element {\n    const FloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>> = this.props.onRenderFloatingPicker;\n    return (\n      <FloatingPicker\n        componentRef={this.floatingPicker}\n        onChange={this._onSuggestionSelected}\n        onSuggestionsHidden={this._onSuggestionsShownOrHidden}\n        onSuggestionsShown={this._onSuggestionsShownOrHidden}\n        inputElement={this.input.current ? this.input.current.inputElement : undefined}\n        selectedItems={this.items}\n        suggestionItems={this.props.suggestionItems ? this.props.suggestionItems : undefined}\n        {...this.floatingPickerProps}\n      />\n    );\n  }\n\n  protected renderSelectedItemsList(): JSX.Element {\n    const SelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>> = this.props.onRenderSelectedItems;\n    return (\n      <SelectedItems\n        componentRef={this.selectedItemsList}\n        selection={this.selection}\n        selectedItems={this.props.selectedItems ? this.props.selectedItems : undefined}\n        onItemsDeleted={this.props.selectedItems ? this.props.onItemsRemoved : undefined}\n        {...this.selectedItemsListProps}\n      />\n    );\n  }\n\n  protected onInputChange = (value: string, composing?: boolean): void => {\n    // We don't want to update the picker's suggestions when the input is still being composed\n    if (!composing) {\n      this.setState({ queryString: value });\n      if (this.floatingPicker.current) {\n        this.floatingPicker.current.onQueryStringChanged(value);\n      }\n    }\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.props.inputProps && this.props.inputProps.onFocus) {\n      this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onInputClick = (ev: React.MouseEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.floatingPicker.current && this.inputElement) {\n      // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n      const shoudUpdateValue =\n        this.inputElement.value === '' || this.inputElement.value !== this.floatingPicker.current.inputText;\n      this.floatingPicker.current.showPicker(shoudUpdateValue);\n    }\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which !== KeyCodes.backspace) {\n      return;\n    }\n\n    if (this.selectedItemsList.current && this.items.length) {\n      if (\n        this.input.current &&\n        !this.input.current.isValueSelected &&\n        this.input.current.inputElement === ev.currentTarget.ownerDocument.activeElement &&\n        (this.input.current as Autofill).cursorLocation === 0\n      ) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeItemAt(this.items.length - 1);\n        this._onSelectedItemsChanged();\n      } else if (this.selectedItemsList.current.hasSelectedItems()) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeSelectedItems();\n        this._onSelectedItemsChanged();\n      }\n    }\n  };\n\n  protected onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.selectedItemsList.current) {\n      // Pass it down into the selected items list\n      this.selectedItemsList.current.onCopy(ev);\n    }\n  };\n\n  protected onPaste = (ev: React.ClipboardEvent<Autofill | HTMLInputElement>): void => {\n    if (this.props.onPaste) {\n      const inputText = ev.clipboardData.getData('Text');\n      ev.preventDefault();\n      this.props.onPaste(inputText);\n    }\n  };\n\n  protected _onSuggestionSelected = (item: T): void => {\n    const currentRenderedQueryString = this.props.currentRenderedQueryString;\n    const queryString = this.state.queryString;\n    if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n      const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n        ? (this.props.onItemSelected as any)(item)\n        : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      const processedItemObject: T = processedItem as T;\n      const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n      let newItem: T;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n          newItem = resolvedProcessedItem;\n          this._addProcessedItem(newItem);\n        });\n      } else {\n        newItem = processedItemObject;\n        this._addProcessedItem(newItem);\n      }\n    }\n  };\n\n  protected _onSelectedItemsChanged = (): void => {\n    this.focus();\n  };\n\n  /**\n   * The floating picker is the source of truth for if the menu has been opened or not.\n   *\n   * Because this isn't tracked inside the state of this component, we need to\n   * force an update here to keep the rendered output that depends on the picker being open\n   * in sync with the state\n   *\n   * Called when the suggestions is shown or closed\n   */\n  private _onSuggestionsShownOrHidden = () => {\n    this.forceUpdate();\n  };\n\n  private _addProcessedItem(newItem: T) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}