{"ast":null,"code":"import { createMemoizer } from '../memoize';\n\nfunction createComposedRenderFunction(outer) {\n  var outerMemoizer = createMemoizer(function (inner) {\n    var innerMemoizer = createMemoizer(function (defaultRender) {\n      return function (innerProps) {\n        return inner(innerProps, defaultRender);\n      };\n    });\n    return function (outerProps, defaultRender) {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n  return outerMemoizer;\n}\n\nvar memoizer = createMemoizer(createComposedRenderFunction);\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\n\nexport function composeRenderFunction(outer, inner) {\n  return memoizer(outer)(inner);\n}","map":{"version":3,"sources":["renderFunction/composeRenderFunction.tsx"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAA+B,YAA/B;;AAOA,SAAS,4BAAT,CACE,KADF,EACgC;EAE9B,IAAM,aAAa,GAAG,cAAc,CAAC,UAAC,KAAD,EAA+B;IAClE,IAAM,aAAa,GAAG,cAAc,CAAC,UAAC,aAAD,EAAuC;MAC1E,OAAO,UAAC,UAAD,EAAoB;QACzB,OAAO,KAAK,CAAC,UAAD,EAAa,aAAb,CAAZ;MACD,CAFD;IAGD,CAJmC,CAApC;IAMA,OAAO,UAAC,UAAD,EAAsB,aAAtB,EAA6D;MAClE,OAAO,KAAK,CAAC,UAAD,EAAa,aAAa,GAAG,aAAa,CAAC,aAAD,CAAhB,GAAkC,KAA5D,CAAZ;IACD,CAFD;EAGD,CAVmC,CAApC;EAYA,OAAO,aAAP;AACD;;AAED,IAAM,QAAQ,GAAG,cAAc,CAA0B,4BAA1B,CAA/B;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,qBAAV,CACJ,KADI,EAEJ,KAFI,EAE0B;EAE9B,OAAO,QAAQ,CAAC,KAAD,CAAR,CAAgB,KAAhB,CAAP;AACD","sourcesContent":["import { createMemoizer } from '../memoize';\nimport type { IRenderFunction } from '../IRenderFunction';\n\ninterface IRenderFunctionComposer {\n  <TProps>(outer: IRenderFunction<TProps>): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps>;\n}\n\nfunction createComposedRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps> {\n  const outerMemoizer = createMemoizer((inner: IRenderFunction<TProps>) => {\n    const innerMemoizer = createMemoizer((defaultRender: IRenderFunction<TProps>) => {\n      return (innerProps?: TProps) => {\n        return inner(innerProps, defaultRender);\n      };\n    });\n\n    return (outerProps?: TProps, defaultRender?: IRenderFunction<TProps>) => {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n\n  return outerMemoizer;\n}\n\nconst memoizer = createMemoizer<IRenderFunctionComposer>(createComposedRenderFunction);\n\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nexport function composeRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n  inner: IRenderFunction<TProps>,\n): IRenderFunction<TProps> {\n  return memoizer(outer)(inner);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}