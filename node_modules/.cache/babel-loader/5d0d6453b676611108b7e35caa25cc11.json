{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nvar getClassNames = classNamesFunction();\n\nvar SpinnerBase =\n/** @class */\nfunction (_super) {\n  __extends(SpinnerBase, _super);\n\n  function SpinnerBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SpinnerBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        type = _a.type,\n        size = _a.size,\n        ariaLabel = _a.ariaLabel,\n        ariaLive = _a.ariaLive,\n        styles = _a.styles,\n        label = _a.label,\n        theme = _a.theme,\n        className = _a.className,\n        labelPosition = _a.labelPosition;\n    var statusMessage = ariaLabel;\n    var nativeProps = getNativeProps(this.props, divProperties, ['size']); // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n\n    var styleSize = size;\n\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      size: styleSize,\n      className: className,\n      labelPosition: labelPosition\n    });\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      className: classNames.circle\n    }), label && React.createElement(\"div\", {\n      className: classNames.label\n    }, label), statusMessage && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": ariaLive\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: classNames.screenReaderText\n    }, statusMessage))));\n  };\n\n  SpinnerBase.defaultProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom'\n  };\n  return SpinnerBase;\n}(React.Component);\n\nexport { SpinnerBase };","map":{"version":3,"sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,WAAT,EAAsB,WAAtB,QAAyC,iBAAzC;AACA,SAAS,kBAAT,EAA6B,aAA7B,EAA4C,cAA5C,EAA4D,aAA5D,QAAiF,iBAAjF;AAGA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;;AAEA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAiC,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;EAAjC,SAAA,WAAA,GAAA;;EA2CC;;EApCQ,WAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACE;IACM,IAAA,EAAA,GAAsF,KAAK,KAA3F;IAAA,IAAE,IAAI,GAAA,EAAA,CAAA,IAAN;IAAA,IAAQ,IAAI,GAAA,EAAA,CAAA,IAAZ;IAAA,IAAc,SAAS,GAAA,EAAA,CAAA,SAAvB;IAAA,IAAyB,QAAQ,GAAA,EAAA,CAAA,QAAjC;IAAA,IAAmC,MAAM,GAAA,EAAA,CAAA,MAAzC;IAAA,IAA2C,KAAK,GAAA,EAAA,CAAA,KAAhD;IAAA,IAAkD,KAAK,GAAA,EAAA,CAAA,KAAvD;IAAA,IAAyD,SAAS,GAAA,EAAA,CAAA,SAAlE;IAAA,IAAoE,aAAa,GAAA,EAAA,CAAA,aAAjF;IACN,IAAM,aAAa,GAAG,SAAtB;IACA,IAAM,WAAW,GAAG,cAAc,CAAuC,KAAK,KAA5C,EAAmD,aAAnD,EAAkE,CAAC,MAAD,CAAlE,CAAlC,CAJF,CAME;IACA;IACA;;IACA,IAAI,SAAS,GAAG,IAAhB;;IACA,IAAI,SAAS,KAAK,SAAd,IAA2B,IAAI,KAAK,SAAxC,EAAmD;MACjD;MACA,SAAS,GAAG,IAAI,KAAK,WAAW,CAAC,KAArB,GAA6B,WAAW,CAAC,KAAzC,GAAiD,WAAW,CAAC,MAAzE;IACD;;IAED,IAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAU;MACxC,KAAK,EAAE,KADiC;MAExC,IAAI,EAAE,SAFkC;MAGxC,SAAS,EAAA,SAH+B;MAIxC,aAAa,EAAA;IAJ2B,CAAV,CAAhC;IAOA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAS,WAAT,EAAoB;MAAE,SAAS,EAAE,UAAU,CAAC;IAAxB,CAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAA3B,CAAA,CADF,EAEG,KAAK,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAA3B,CAAA,EAAmC,KAAnC,CAFZ,EAGG,aAAa,IACZ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,IAAI,EAAC,QAAV;MAAkB,aAAY;IAA9B,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAA3B,CAAA,EAA8C,aAA9C,CADF,CADF,CAJJ,CADF;EAaD,CAnCM;;EANO,WAAA,CAAA,YAAA,GAA8B;IAC1C,IAAI,EAAE,WAAW,CAAC,MADwB;IAE1C,QAAQ,EAAE,QAFgC;IAG1C,aAAa,EAAE;EAH2B,CAA9B;EA0ChB,OAAA,WAAA;AAAC,CA3CD,CAAiC,KAAK,CAAC,SAAvC,CAAA;;SAAa,W","sourcesContent":["import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}