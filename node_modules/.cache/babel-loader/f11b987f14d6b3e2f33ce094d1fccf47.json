{"ast":null,"code":"import * as React from 'react';\n/**\n * Context for providing the window.\n */\n\nexport var WindowContext = React.createContext({\n  window: typeof window === 'object' ? window : undefined\n});\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\n\nexport var useWindow = function () {\n  return React.useContext(WindowContext).window;\n};\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\n\nexport var useDocument = function () {\n  var _a;\n\n  return (_a = React.useContext(WindowContext).window) === null || _a === void 0 ? void 0 : _a.document;\n};\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\n\nexport var WindowProvider = function (props) {\n  return React.createElement(WindowContext.Provider, {\n    value: props\n  }, props.children);\n};","map":{"version":3,"sources":["WindowProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAYA;;AAEG;;AACH,OAAO,IAAM,aAAa,GAAG,KAAK,CAAC,aAAN,CAAyC;EACpE,MAAM,EAAE,OAAO,MAAP,KAAkB,QAAlB,GAA6B,MAA7B,GAAsC;AADsB,CAAzC,CAAtB;AAIP;;AAEG;;AACH,OAAO,IAAM,SAAS,GAAG,YAAA;EAA0B,OAAA,KAAK,CAAC,UAAN,CAAiB,aAAjB,EAAA,MAAA;AAAsC,CAAlF;AAEP;;AAEG;;AACH,OAAO,IAAM,WAAW,GAAG,YAAA;EAAA,IAAA,EAAA;;EAA4B,OAAA,CAAA,EAAA,GAAA,KAAK,CAAC,UAAN,CAAiB,aAAjB,EAAgC,MAAhC,MAAsC,IAAtC,IAAsC,EAAA,KAAA,KAAA,CAAtC,GAAsC,KAAA,CAAtC,GAAsC,EAAA,CAAE,QAAxC;AAAgD,CAAhG;AAEP;;;;AAIG;;AACH,OAAO,IAAM,cAAc,GAAiD,UAAA,KAAA,EAAK;EAC/E,OAAO,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAf,EAAuB;IAAC,KAAK,EAAE;EAAR,CAAvB,EAAuC,KAAK,CAAC,QAA7C,CAAP;AACD,CAFM","sourcesContent":["import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n};\n\n/**\n * Context for providing the window.\n */\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}