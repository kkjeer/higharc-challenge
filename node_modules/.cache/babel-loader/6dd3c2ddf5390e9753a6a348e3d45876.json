{"ast":null,"code":"import { extendComponent } from './extendComponent';\n/**\n * Generates a function to be attached to a React component, which can be called\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\n * is unmounting before the async code is executed, preventing bugs where code\n * accesses things within the component after being unmounted.\n */\n\nexport var safeSetTimeout = function (component) {\n  var activeTimeouts;\n  return function (cb, duration) {\n    if (!activeTimeouts) {\n      activeTimeouts = new Set();\n      extendComponent(component, {\n        componentWillUnmount: function () {\n          activeTimeouts.forEach(function (id) {\n            return clearTimeout(id);\n          });\n        }\n      });\n    }\n\n    var timeoutId = setTimeout(function () {\n      activeTimeouts.delete(timeoutId);\n      cb();\n    }, duration);\n    activeTimeouts.add(timeoutId);\n  };\n};","map":{"version":3,"sources":["safeSetTimeout.ts"],"names":[],"mappings":"AACA,SAAS,eAAT,QAAgC,mBAAhC;AAEA;;;;;AAKG;;AACH,OAAO,IAAM,cAAc,GAAG,UAAC,SAAD,EAA2B;EACvD,IAAI,cAAJ;EAEA,OAAO,UAAC,EAAD,EAAe,QAAf,EAA+B;IACpC,IAAI,CAAC,cAAL,EAAqB;MACnB,cAAc,GAAG,IAAI,GAAJ,EAAjB;MAEA,eAAe,CAAC,SAAD,EAAY;QACzB,oBAAoB,EAAE,YAAA;UACpB,cAAc,CAAC,OAAf,CAAuB,UAAC,EAAD,EAAiB;YAAK,OAAA,YAAY,CAAZ,EAAY,CAAZ;UAAgB,CAA7D;QACD;MAHwB,CAAZ,CAAf;IAKD;;IAED,IAAM,SAAS,GAAG,UAAU,CAAC,YAAA;MAC3B,cAAc,CAAC,MAAf,CAAsB,SAAtB;MACA,EAAE;IACH,CAH2B,EAGzB,QAHyB,CAA5B;IAIA,cAAc,CAAC,GAAf,CAAmB,SAAnB;EACD,CAhBD;AAiBD,CApBM","sourcesContent":["import * as React from 'react';\nimport { extendComponent } from './extendComponent';\n\n/**\n * Generates a function to be attached to a React component, which can be called\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\n * is unmounting before the async code is executed, preventing bugs where code\n * accesses things within the component after being unmounted.\n */\nexport const safeSetTimeout = (component: React.Component) => {\n  let activeTimeouts: Set<NodeJS.Timer>;\n\n  return (cb: Function, duration: number) => {\n    if (!activeTimeouts) {\n      activeTimeouts = new Set<NodeJS.Timer>();\n\n      extendComponent(component, {\n        componentWillUnmount: () => {\n          activeTimeouts.forEach((id: NodeJS.Timer) => clearTimeout(id));\n        },\n      });\n    }\n\n    const timeoutId = setTimeout(() => {\n      activeTimeouts.delete(timeoutId);\n      cb();\n    }, duration);\n    activeTimeouts.add(timeoutId);\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}