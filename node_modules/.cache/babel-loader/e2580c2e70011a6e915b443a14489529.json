{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { concatStyleSets, FontWeights, HighContrastSelector, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nimport { primaryStyles, standardStyles } from '../ButtonThemes';\nexport var getStyles = memoizeFunction(function (theme, customStyles, primary) {\n  var _a, _b, _c, _d, _e;\n\n  var fonts = theme.fonts,\n      palette = theme.palette;\n  var baseButtonStyles = getBaseButtonStyles(theme);\n  var splitButtonStyles = getSplitButtonStyles(theme);\n  var compoundButtonStyles = {\n    root: {\n      maxWidth: '280px',\n      minHeight: '72px',\n      height: 'auto',\n      padding: '16px 12px'\n    },\n    flexContainer: {\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      minWidth: '100%',\n      margin: ''\n    },\n    textContainer: {\n      textAlign: 'left'\n    },\n    icon: {\n      fontSize: '2em',\n      lineHeight: '1em',\n      height: '1em',\n      margin: '0px 8px 0px 0px',\n      flexBasis: '1em',\n      flexShrink: '0'\n    },\n    label: {\n      margin: '0 0 5px',\n      lineHeight: '100%',\n      fontWeight: FontWeights.semibold\n    },\n    description: [fonts.small, {\n      lineHeight: '100%'\n    }]\n  };\n  var standardCompoundTheme = {\n    description: {\n      color: palette.neutralSecondary\n    },\n    descriptionHovered: {\n      color: palette.neutralDark\n    },\n    descriptionPressed: {\n      color: 'inherit'\n    },\n    descriptionChecked: {\n      color: 'inherit'\n    },\n    descriptionDisabled: {\n      color: 'inherit'\n    }\n  };\n  var primaryCompoundTheme = {\n    description: {\n      color: palette.white,\n      selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n        backgroundColor: 'WindowText',\n        color: 'Window'\n      }, getHighContrastNoAdjustStyle()), _a)\n    },\n    descriptionHovered: {\n      color: palette.white,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'Window'\n      }, _b)\n    },\n    descriptionPressed: {\n      color: 'inherit',\n      selectors: (_c = {}, _c[HighContrastSelector] = __assign({\n        color: 'Window',\n        backgroundColor: 'WindowText'\n      }, getHighContrastNoAdjustStyle()), _c)\n    },\n    descriptionChecked: {\n      color: 'inherit',\n      selectors: (_d = {}, _d[HighContrastSelector] = __assign({\n        color: 'Window',\n        backgroundColor: 'WindowText'\n      }, getHighContrastNoAdjustStyle()), _d)\n    },\n    descriptionDisabled: {\n      color: 'inherit',\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        color: 'inherit'\n      }, _e)\n    }\n  };\n  return concatStyleSets(baseButtonStyles, compoundButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), primary ? primaryCompoundTheme : standardCompoundTheme, splitButtonStyles, customStyles);\n});","map":{"version":3,"sources":["components/Button/CompoundButton/CompoundButton.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { concatStyleSets, FontWeights, HighContrastSelector, getHighContrastNoAdjustStyle } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nimport { primaryStyles, standardStyles } from '../ButtonThemes';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: IButtonStyles, primary?: boolean): IButtonStyles => {\n    const { fonts, palette } = theme;\n\n    const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n    const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n    const compoundButtonStyles: IButtonStyles = {\n      root: {\n        maxWidth: '280px',\n        minHeight: '72px',\n        height: 'auto',\n        padding: '16px 12px',\n      },\n\n      flexContainer: {\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n        minWidth: '100%',\n        margin: '',\n      },\n\n      textContainer: {\n        textAlign: 'left',\n      },\n\n      icon: {\n        fontSize: '2em',\n        lineHeight: '1em',\n        height: '1em',\n        margin: '0px 8px 0px 0px',\n        flexBasis: '1em',\n        flexShrink: '0',\n      },\n\n      label: {\n        margin: '0 0 5px',\n        lineHeight: '100%',\n        fontWeight: FontWeights.semibold,\n      },\n      description: [\n        fonts.small,\n        {\n          lineHeight: '100%',\n        },\n      ],\n    };\n\n    const standardCompoundTheme: IButtonStyles = {\n      description: {\n        color: palette.neutralSecondary,\n      },\n\n      descriptionHovered: {\n        color: palette.neutralDark,\n      },\n\n      descriptionPressed: {\n        color: 'inherit',\n      },\n\n      descriptionChecked: {\n        color: 'inherit',\n      },\n\n      descriptionDisabled: {\n        color: 'inherit',\n      },\n    };\n\n    const primaryCompoundTheme: IButtonStyles = {\n      description: {\n        color: palette.white,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'WindowText',\n            color: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      descriptionHovered: {\n        color: palette.white,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'Window',\n          },\n        },\n      },\n\n      descriptionPressed: {\n        color: 'inherit',\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'Window',\n            backgroundColor: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      descriptionChecked: {\n        color: 'inherit',\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'Window',\n            backgroundColor: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      descriptionDisabled: {\n        color: 'inherit',\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'inherit',\n          },\n        },\n      },\n    };\n\n    return concatStyleSets(\n      baseButtonStyles,\n      compoundButtonStyles,\n      primary ? primaryStyles(theme) : standardStyles(theme),\n      primary ? primaryCompoundTheme : standardCompoundTheme,\n      splitButtonStyles,\n      customStyles,\n    )!;\n  },\n);\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}