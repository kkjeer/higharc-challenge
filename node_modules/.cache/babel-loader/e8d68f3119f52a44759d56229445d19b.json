{"ast":null,"code":"import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage'; // Default to undefined so that we initialize on first read.\n\nvar _language;\n\nvar STORAGE_KEY = 'language';\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\n\nexport function getLanguage(persistenceType) {\n  if (persistenceType === void 0) {\n    persistenceType = 'sessionStorage';\n  }\n\n  if (_language === undefined) {\n    var doc = getDocument();\n    var savedLanguage = persistenceType === 'localStorage' ? localStorage.getItem(STORAGE_KEY) : persistenceType === 'sessionStorage' ? sessionStorage.getItem(STORAGE_KEY) : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\nexport function setLanguage(language, persistenceParam) {\n  var doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  var persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'sessionStorage' : persistenceParam;\n\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}","map":{"version":3,"sources":["language.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,mBAA5B;AACA,OAAO,KAAK,YAAZ,MAA8B,gBAA9B;AACA,OAAO,KAAK,cAAZ,MAAgC,kBAAhC,C,CAEA;;AACA,IAAI,SAAJ;;AAEA,IAAM,WAAW,GAAG,UAApB;AAEA;;;AAGG;;AACH,OAAM,SAAU,WAAV,CACJ,eADI,EAC0E;EAA9E,IAAA,eAAA,KAAA,KAAA,CAAA,EAAA;IAAA,eAAA,GAAA,gBAAA;EAA8E;;EAE9E,IAAI,SAAS,KAAK,SAAlB,EAA6B;IAC3B,IAAI,GAAG,GAAG,WAAW,EAArB;IACA,IAAM,aAAa,GACjB,eAAe,KAAK,cAApB,GACI,YAAY,CAAC,OAAb,CAAqB,WAArB,CADJ,GAEI,eAAe,KAAK,gBAApB,GACA,cAAc,CAAC,OAAf,CAAuB,WAAvB,CADA,GAEA,SALN;;IAOA,IAAI,aAAJ,EAAmB;MACjB,SAAS,GAAG,aAAZ;IACD;;IAED,IAAI,SAAS,KAAK,SAAd,IAA2B,GAA/B,EAAoC;MAClC,SAAS,GAAG,GAAG,CAAC,eAAJ,CAAoB,YAApB,CAAiC,MAAjC,CAAZ;IACD;;IAED,IAAI,SAAS,KAAK,SAAlB,EAA6B;MAC3B,SAAS,GAAG,IAAZ;IACD;EACF;;EAED,OAAO,SAAP;AACD;AAeD,OAAM,SAAU,WAAV,CACJ,QADI,EAEJ,gBAFI,EAEmE;EAEvE,IAAI,GAAG,GAAG,WAAW,EAArB;;EAEA,IAAI,GAAJ,EAAS;IACP,GAAG,CAAC,eAAJ,CAAoB,YAApB,CAAiC,MAAjC,EAAyC,QAAzC;EACD;;EAED,IAAM,eAAe,GAAG,gBAAgB,KAAK,IAArB,GAA4B,MAA5B,GAAqC,CAAC,gBAAD,GAAoB,gBAApB,GAAuC,gBAApG;;EACA,IAAI,eAAe,KAAK,cAAxB,EAAwC;IACtC,YAAY,CAAC,OAAb,CAAqB,WAArB,EAAkC,QAAlC;EACD,CAFD,MAEO,IAAI,eAAe,KAAK,gBAAxB,EAA0C;IAC/C,cAAc,CAAC,OAAf,CAAuB,WAAvB,EAAoC,QAApC;EACD;;EAED,SAAS,GAAG,QAAZ;AACD","sourcesContent":["import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n\n// Default to undefined so that we initialize on first read.\nlet _language: string | null;\n\nconst STORAGE_KEY = 'language';\n\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function getLanguage(\n  persistenceType: 'localStorage' | 'sessionStorage' | 'none' = 'sessionStorage',\n): string | null {\n  if (_language === undefined) {\n    let doc = getDocument();\n    const savedLanguage =\n      persistenceType === 'localStorage'\n        ? localStorage.getItem(STORAGE_KEY)\n        : persistenceType === 'sessionStorage'\n        ? sessionStorage.getItem(STORAGE_KEY)\n        : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\n\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @param language - Language to set.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function setLanguage(language: string, persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): void;\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @deprecated Use string parameter version.\n * @param language - Language to set.\n * @param avoidPersisting - If true, don't store the value.\n */\nexport function setLanguage(language: string, avoidPersisting?: boolean): void;\nexport function setLanguage(\n  language: string,\n  persistenceParam?: 'localStorage' | 'sessionStorage' | 'none' | boolean,\n): void {\n  let doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  const persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'sessionStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}