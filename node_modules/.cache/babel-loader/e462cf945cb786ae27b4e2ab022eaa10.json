{"ast":null,"code":"var _a, _b;\n\nimport { __assign } from \"tslib\";\nimport { FontWeights, concatStyleSets, getFocusStyle, HighContrastSelector, getPlaceholderStyles, hiddenContentStyle, getInputFocusStyle, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ComboBoxHeight = 32;\nvar ComboBoxLineHeight = 30;\nvar ComboBoxCaretDownWidth = 32;\nvar ComboBoxOptionHeight = 36;\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  return {\n    backgroundColor: semanticColors.disabledBackground,\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: (_a = {\n      ':after': {\n        borderColor: semanticColors.disabledBackground\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText',\n      selectors: {\n        ':after': {\n          borderColor: 'GrayText'\n        }\n      }\n    }, _a)\n  };\n});\nvar listOptionHighContrastStyles = {\n  selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n    backgroundColor: 'Highlight',\n    borderColor: 'Highlight',\n    color: 'HighlightText'\n  }, getHighContrastNoAdjustStyle()), _a)\n};\nvar inputHighContrastStyles = {\n  selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n    color: 'WindowText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), _b)\n};\nexport var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending, isHidden, isSelected) {\n  var _a;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors;\n  var option = {\n    textHoveredColor: semanticColors.menuItemTextHovered,\n    textSelectedColor: palette.neutralDark,\n    textDisabledColor: semanticColors.disabledText,\n    backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n    backgroundPressedColor: semanticColors.menuItemBackgroundPressed\n  };\n  var optionStyles = {\n    root: [theme.fonts.medium, {\n      backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      display: isHidden ? 'none' : 'block',\n      width: '100%',\n      height: 'auto',\n      minHeight: ComboBoxOptionHeight,\n      lineHeight: '20px',\n      padding: '0 8px',\n      position: 'relative',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      borderRadius: 0,\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      textAlign: 'left',\n      selectors: __assign(__assign((_a = {}, _a[HighContrastSelector] = {\n        border: 'none',\n        borderColor: 'Background'\n      }, _a), !isHidden && {\n        '&.ms-Checkbox': {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }), {\n        '&.ms-Button--command:hover:active': {\n          backgroundColor: option.backgroundPressedColor\n        },\n        '.ms-Checkbox-label': {\n          width: '100%'\n        }\n      })\n    }, isSelected ? [{\n      backgroundColor: 'transparent',\n      color: option.textSelectedColor,\n      selectors: {\n        ':hover': [{\n          backgroundColor: option.backgroundHoveredColor\n        }, listOptionHighContrastStyles]\n      }\n    }, getFocusStyle(theme, {\n      inset: -1,\n      isFocusedOnly: false\n    }), listOptionHighContrastStyles] : []],\n    rootHovered: {\n      backgroundColor: option.backgroundHoveredColor,\n      color: option.textHoveredColor\n    },\n    rootFocused: {\n      backgroundColor: option.backgroundHoveredColor\n    },\n    rootDisabled: {\n      color: option.textDisabledColor,\n      cursor: 'default'\n    },\n    optionText: {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: '0px',\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      display: 'inline-block'\n    },\n    optionTextWrapper: {\n      maxWidth: '100%',\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n  return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n});\nexport var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var caret = {\n    buttonTextColor: semanticColors.bodySubtext,\n    buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n    buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n    buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n    buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered\n  };\n  var buttonHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText'\n    }, getHighContrastNoAdjustStyle()), _a)\n  };\n  var styles = {\n    root: {\n      color: caret.buttonTextColor,\n      fontSize: fonts.small.fontSize,\n      position: 'absolute',\n      top: 0,\n      height: '100%',\n      lineHeight: ComboBoxLineHeight,\n      width: ComboBoxCaretDownWidth,\n      textAlign: 'center',\n      cursor: 'default',\n      selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n        backgroundColor: 'ButtonFace',\n        borderColor: 'ButtonText',\n        color: 'ButtonText'\n      }, getHighContrastNoAdjustStyle()), _b)\n    },\n    icon: {\n      fontSize: fonts.small.fontSize\n    },\n    rootHovered: [{\n      backgroundColor: caret.buttonBackgroundHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor,\n      cursor: 'pointer'\n    }, buttonHighContrastStyles],\n    rootPressed: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootChecked: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootCheckedHovered: [{\n      backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootDisabled: [getDisabledStyles(theme), {\n      position: 'absolute'\n    }]\n  };\n  return concatStyleSets(styles, customStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts,\n      effects = theme.effects;\n  var root = {\n    textColor: semanticColors.inputText,\n    borderColor: semanticColors.inputBorder,\n    borderHoveredColor: semanticColors.inputBorderHovered,\n    borderPressedColor: semanticColors.inputFocusBorderAlt,\n    borderFocusedColor: semanticColors.inputFocusBorderAlt,\n    backgroundColor: semanticColors.inputBackground,\n    erroredColor: semanticColors.errorText\n  };\n  var option = {\n    headerTextColor: semanticColors.menuHeader,\n    dividerBorderColor: semanticColors.bodyDivider\n  }; // placeholder style variables\n\n  var placeholderHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n  var placeholderStyles = [{\n    color: semanticColors.inputPlaceholderText\n  }, placeholderHighContrastStyles];\n  var placeholderStylesHovered = [{\n    color: semanticColors.inputTextHovered\n  }, placeholderHighContrastStyles];\n  var disabledPlaceholderStyles = [{\n    color: semanticColors.disabledText\n  }, placeholderHighContrastStyles];\n\n  var ComboBoxRootHighContrastFocused = __assign(__assign({\n    color: 'HighlightText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), {\n    selectors: {\n      ':after': {\n        borderColor: 'Highlight'\n      }\n    }\n  });\n\n  var focusBorderStyles = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n  var styles = {\n    container: {},\n    label: {},\n    labelDisabled: {},\n    root: [theme.fonts.medium, {\n      boxShadow: 'none',\n      marginLeft: '0',\n      paddingRight: ComboBoxCaretDownWidth,\n      paddingLeft: 9,\n      color: root.textColor,\n      position: 'relative',\n      outline: '0',\n      userSelect: 'none',\n      backgroundColor: root.backgroundColor,\n      cursor: 'text',\n      display: 'block',\n      height: ComboBoxHeight,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      boxSizing: 'border-box',\n      selectors: {\n        '.ms-Label': {\n          display: 'inline-block',\n          marginBottom: '8px'\n        },\n        '&.is-open': {\n          selectors: (_b = {}, _b[HighContrastSelector] = ComboBoxRootHighContrastFocused, _b)\n        },\n        // setting border using pseudo-element here in order to\n        // prevent chevron button to overlap ComboBox border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: root.borderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    }],\n    rootHovered: {\n      selectors: (_c = {\n        ':after': {\n          borderColor: root.borderHoveredColor\n        },\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, getPlaceholderStyles(placeholderStylesHovered), inputHighContrastStyles]\n      }, _c[HighContrastSelector] = __assign(__assign({\n        color: 'HighlightText',\n        backgroundColor: 'Window'\n      }, getHighContrastNoAdjustStyle()), {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }), _c)\n    },\n    rootPressed: [{\n      position: 'relative',\n      selectors: (_d = {}, _d[HighContrastSelector] = ComboBoxRootHighContrastFocused, _d)\n    }],\n    rootFocused: [{\n      selectors: (_e = {\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, inputHighContrastStyles]\n      }, _e[HighContrastSelector] = ComboBoxRootHighContrastFocused, _e)\n    }, focusBorderStyles],\n    rootDisabled: getDisabledStyles(theme),\n    rootError: {\n      selectors: {\n        ':after': {\n          borderColor: root.erroredColor\n        },\n        ':hover:after': {\n          borderColor: semanticColors.inputBorderHovered\n        }\n      }\n    },\n    rootDisallowFreeForm: {},\n    input: [getPlaceholderStyles(placeholderStyles), {\n      backgroundColor: root.backgroundColor,\n      color: root.textColor,\n      boxSizing: 'border-box',\n      width: '100%',\n      height: '100%',\n      borderStyle: 'none',\n      outline: 'none',\n      font: 'inherit',\n      textOverflow: 'ellipsis',\n      padding: '0',\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputHighContrastStyles],\n    inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n    errorMessage: [theme.fonts.small, {\n      color: root.erroredColor,\n      marginTop: '5px'\n    }],\n    callout: {\n      boxShadow: effects.elevation8\n    },\n    optionsContainerWrapper: {\n      width: comboBoxOptionWidth\n    },\n    optionsContainer: {\n      display: 'block'\n    },\n    screenReaderText: hiddenContentStyle,\n    header: [fonts.medium, {\n      fontWeight: FontWeights.semibold,\n      color: option.headerTextColor,\n      backgroundColor: 'none',\n      borderStyle: 'none',\n      height: ComboBoxOptionHeight,\n      lineHeight: ComboBoxOptionHeight,\n      cursor: 'default',\n      padding: '0 8px',\n      userSelect: 'none',\n      textAlign: 'left',\n      selectors: (_f = {}, _f[HighContrastSelector] = __assign({\n        color: 'GrayText'\n      }, getHighContrastNoAdjustStyle()), _f)\n    }],\n    divider: {\n      height: 1,\n      backgroundColor: option.dividerBorderColor\n    }\n  };\n  return concatStyleSets(styles, customStyles);\n});","map":{"version":3,"sources":["components/ComboBox/ComboBox.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FontWeights,\n  concatStyleSets,\n  getFocusStyle,\n  HighContrastSelector,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  getInputFocusStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { IRawStyle, ITheme, IStyle } from '../../Styling';\nimport type { IComboBoxOptionStyles, IComboBoxStyles } from './ComboBox.types';\nimport type { IButtonStyles } from '../../Button';\n\nconst ComboBoxHeight = 32;\nconst ComboBoxLineHeight = 30;\nconst ComboBoxCaretDownWidth = 32;\nconst ComboBoxOptionHeight = 36;\n\nconst getDisabledStyles = memoizeFunction(\n  (theme: ITheme): IRawStyle => {\n    const { semanticColors } = theme;\n\n    return {\n      backgroundColor: semanticColors.disabledBackground,\n      color: semanticColors.disabledText,\n      cursor: 'default',\n      selectors: {\n        ':after': {\n          borderColor: semanticColors.disabledBackground,\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          selectors: {\n            ':after': {\n              borderColor: 'GrayText',\n            },\n          },\n        },\n      },\n    };\n  },\n);\n\nconst listOptionHighContrastStyles: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText',\n      ...getHighContrastNoAdjustStyle(),\n    },\n  },\n};\n\nconst inputHighContrastStyles: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      color: 'WindowText',\n      backgroundColor: 'Window',\n      ...getHighContrastNoAdjustStyle(),\n    },\n  },\n};\n\nexport const getOptionStyles = memoizeFunction(\n  (\n    theme: ITheme,\n    customStylesForAllOptions?: Partial<IComboBoxOptionStyles>,\n    customOptionStylesForCurrentOption?: Partial<IComboBoxOptionStyles>,\n    isPending?: boolean,\n    isHidden?: boolean,\n    isSelected?: boolean,\n  ): Partial<IComboBoxOptionStyles> => {\n    const { palette, semanticColors } = theme;\n\n    const option = {\n      textHoveredColor: semanticColors.menuItemTextHovered,\n      textSelectedColor: palette.neutralDark,\n      textDisabledColor: semanticColors.disabledText,\n      backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n      backgroundPressedColor: semanticColors.menuItemBackgroundPressed,\n    };\n\n    const optionStyles: IComboBoxOptionStyles = {\n      root: [\n        theme.fonts.medium,\n        {\n          backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n          boxSizing: 'border-box',\n          cursor: 'pointer',\n          display: isHidden ? 'none' : 'block',\n          width: '100%',\n          height: 'auto',\n          minHeight: ComboBoxOptionHeight,\n          lineHeight: '20px',\n          padding: '0 8px',\n          position: 'relative',\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'transparent',\n          borderRadius: 0,\n          wordWrap: 'break-word',\n          overflowWrap: 'break-word',\n          textAlign: 'left',\n          selectors: {\n            [HighContrastSelector]: {\n              border: 'none',\n              borderColor: 'Background',\n            },\n            ...(!isHidden && {\n              '&.ms-Checkbox': {\n                display: 'flex',\n                alignItems: 'center',\n              },\n            }),\n            '&.ms-Button--command:hover:active': {\n              backgroundColor: option.backgroundPressedColor,\n            },\n            '.ms-Checkbox-label': {\n              width: '100%',\n            },\n          },\n        },\n        isSelected\n          ? [\n              {\n                backgroundColor: 'transparent',\n                color: option.textSelectedColor,\n                selectors: {\n                  ':hover': [\n                    {\n                      backgroundColor: option.backgroundHoveredColor,\n                    },\n                    listOptionHighContrastStyles,\n                  ],\n                },\n              },\n              getFocusStyle(theme, { inset: -1, isFocusedOnly: false }),\n              listOptionHighContrastStyles,\n            ]\n          : [],\n      ],\n      rootHovered: {\n        backgroundColor: option.backgroundHoveredColor,\n        color: option.textHoveredColor,\n      },\n      rootFocused: {\n        backgroundColor: option.backgroundHoveredColor,\n      },\n      rootDisabled: {\n        color: option.textDisabledColor,\n        cursor: 'default',\n      },\n      optionText: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        minWidth: '0px',\n        maxWidth: '100%',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        display: 'inline-block',\n      },\n      optionTextWrapper: {\n        maxWidth: '100%',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    };\n\n    return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n  },\n);\n\nexport const getCaretDownButtonStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { semanticColors, fonts } = theme;\n\n    const caret = {\n      buttonTextColor: semanticColors.bodySubtext,\n      buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n      buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n      buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n      buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered,\n    };\n\n    const buttonHighContrastStyles: IStyle = {\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    };\n\n    const styles: IButtonStyles = {\n      root: {\n        color: caret.buttonTextColor,\n        fontSize: fonts.small.fontSize,\n        position: 'absolute',\n        top: 0,\n        height: '100%',\n        lineHeight: ComboBoxLineHeight,\n        width: ComboBoxCaretDownWidth,\n        textAlign: 'center',\n        cursor: 'default',\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'ButtonFace',\n            borderColor: 'ButtonText',\n            color: 'ButtonText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      icon: {\n        fontSize: fonts.small.fontSize,\n      },\n      rootHovered: [\n        {\n          backgroundColor: caret.buttonBackgroundHoveredColor,\n          color: caret.buttonTextHoveredCheckedColor,\n          cursor: 'pointer',\n        },\n        buttonHighContrastStyles,\n      ],\n      rootPressed: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootChecked: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootCheckedHovered: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootDisabled: [\n        getDisabledStyles(theme),\n        {\n          position: 'absolute',\n        },\n      ],\n    };\n    return concatStyleSets(styles, customStyles);\n  },\n);\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: Partial<IComboBoxStyles>, comboBoxOptionWidth?: string): Partial<IComboBoxStyles> => {\n    const { semanticColors, fonts, effects } = theme;\n\n    const root = {\n      textColor: semanticColors.inputText,\n      borderColor: semanticColors.inputBorder,\n      borderHoveredColor: semanticColors.inputBorderHovered,\n      borderPressedColor: semanticColors.inputFocusBorderAlt,\n      borderFocusedColor: semanticColors.inputFocusBorderAlt,\n      backgroundColor: semanticColors.inputBackground,\n      erroredColor: semanticColors.errorText,\n    };\n\n    const option = {\n      headerTextColor: semanticColors.menuHeader,\n      dividerBorderColor: semanticColors.bodyDivider,\n    };\n\n    // placeholder style variables\n    const placeholderHighContrastStyles: IRawStyle = {\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n    const placeholderStyles: IStyle = [\n      {\n        color: semanticColors.inputPlaceholderText,\n      },\n      placeholderHighContrastStyles,\n    ];\n    const placeholderStylesHovered: IStyle = [\n      {\n        color: semanticColors.inputTextHovered,\n      },\n      placeholderHighContrastStyles,\n    ];\n    const disabledPlaceholderStyles: IStyle = [\n      {\n        color: semanticColors.disabledText,\n      },\n      placeholderHighContrastStyles,\n    ];\n\n    const ComboBoxRootHighContrastFocused = {\n      color: 'HighlightText',\n      backgroundColor: 'Window',\n      ...getHighContrastNoAdjustStyle(),\n      selectors: {\n        ':after': {\n          borderColor: 'Highlight',\n        },\n      },\n    };\n\n    const focusBorderStyles: IStyle = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n\n    const styles: IComboBoxStyles = {\n      container: {},\n      label: {},\n      labelDisabled: {},\n      root: [\n        theme.fonts.medium,\n        {\n          boxShadow: 'none',\n          marginLeft: '0',\n          paddingRight: ComboBoxCaretDownWidth,\n          paddingLeft: 9,\n          color: root.textColor,\n          position: 'relative',\n          outline: '0',\n          userSelect: 'none',\n          backgroundColor: root.backgroundColor,\n          cursor: 'text',\n          display: 'block',\n          height: ComboBoxHeight,\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis',\n          boxSizing: 'border-box', // Border-box matches Dropdown and TextField\n          selectors: {\n            '.ms-Label': {\n              display: 'inline-block',\n              marginBottom: '8px',\n            },\n            '&.is-open': {\n              selectors: {\n                [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n              },\n            },\n            // setting border using pseudo-element here in order to\n            // prevent chevron button to overlap ComboBox border under certain resolutions\n            ':after': {\n              pointerEvents: 'none',\n              content: \"''\",\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              right: 0,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: root.borderColor,\n              borderRadius: effects.roundedCorner2,\n            },\n          },\n        },\n      ],\n\n      rootHovered: {\n        selectors: {\n          ':after': {\n            borderColor: root.borderHoveredColor,\n          },\n          '.ms-ComboBox-Input': [\n            {\n              color: semanticColors.inputTextHovered,\n            },\n            getPlaceholderStyles(placeholderStylesHovered),\n            inputHighContrastStyles,\n          ],\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n            backgroundColor: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n            selectors: {\n              ':after': {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n\n      rootPressed: [\n        {\n          position: 'relative',\n          selectors: {\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n          },\n        },\n      ],\n\n      rootFocused: [\n        {\n          selectors: {\n            '.ms-ComboBox-Input': [\n              {\n                color: semanticColors.inputTextHovered,\n              },\n              inputHighContrastStyles,\n            ],\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n          },\n        },\n        focusBorderStyles,\n      ],\n\n      rootDisabled: getDisabledStyles(theme),\n\n      rootError: {\n        selectors: {\n          ':after': {\n            borderColor: root.erroredColor,\n          },\n          ':hover:after': {\n            borderColor: semanticColors.inputBorderHovered,\n          },\n        },\n      },\n\n      rootDisallowFreeForm: {},\n\n      input: [\n        getPlaceholderStyles(placeholderStyles),\n        {\n          backgroundColor: root.backgroundColor,\n          color: root.textColor,\n          boxSizing: 'border-box',\n          width: '100%',\n          height: '100%',\n          borderStyle: 'none',\n          outline: 'none',\n          font: 'inherit',\n          textOverflow: 'ellipsis',\n          padding: '0',\n          selectors: {\n            '::-ms-clear': {\n              display: 'none',\n            },\n          },\n        },\n        inputHighContrastStyles,\n      ],\n\n      inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n      errorMessage: [\n        theme.fonts.small,\n        {\n          color: root.erroredColor,\n          marginTop: '5px',\n        },\n      ],\n\n      callout: {\n        boxShadow: effects.elevation8,\n      },\n\n      optionsContainerWrapper: {\n        width: comboBoxOptionWidth,\n      },\n\n      optionsContainer: {\n        display: 'block',\n      },\n      screenReaderText: hiddenContentStyle,\n\n      header: [\n        fonts.medium,\n        {\n          fontWeight: FontWeights.semibold,\n          color: option.headerTextColor,\n          backgroundColor: 'none',\n          borderStyle: 'none',\n          height: ComboBoxOptionHeight,\n          lineHeight: ComboBoxOptionHeight,\n          cursor: 'default',\n          padding: '0 8px',\n          userSelect: 'none',\n          textAlign: 'left',\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n      ],\n\n      divider: {\n        height: 1,\n        backgroundColor: option.dividerBorderColor,\n      },\n    };\n\n    return concatStyleSets(styles, customStyles);\n  },\n);\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}