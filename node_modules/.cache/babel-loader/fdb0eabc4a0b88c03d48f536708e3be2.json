{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\n\nvar GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nvar CALLBACK_STATE_PROP_NAME = '__callbacks__';\nvar _counter = 0;\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\n\nvar GlobalSettings =\n/** @class */\nfunction () {\n  function GlobalSettings() {}\n\n  GlobalSettings.getValue = function (key, defaultValue) {\n    var globalSettings = _getGlobalSettings();\n\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n\n    return globalSettings[key];\n  };\n\n  GlobalSettings.setValue = function (key, value) {\n    var globalSettings = _getGlobalSettings();\n\n    var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    var oldValue = globalSettings[key];\n\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n      var changeDescription = {\n        oldValue: oldValue,\n        value: value,\n        key: key\n      };\n\n      for (var id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  };\n\n  GlobalSettings.addChangeListener = function (cb) {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    var id = cb.__id__;\n\n    var callbacks = _getCallbacks();\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    callbacks[id] = cb;\n  };\n\n  GlobalSettings.removeChangeListener = function (cb) {\n    var callbacks = _getCallbacks();\n\n    delete callbacks[cb.__id__];\n  };\n\n  return GlobalSettings;\n}();\n\nexport { GlobalSettings }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction _getGlobalSettings() {\n  var _a;\n\n  var win = getWindow(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var globalObj = win || {};\n\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {}, _a[CALLBACK_STATE_PROP_NAME] = {}, _a);\n  }\n\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\n\nfunction _getCallbacks() {\n  var globalSettings = _getGlobalSettings();\n\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}","map":{"version":3,"sources":["GlobalSettings.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,iBAA1B;AAEA;;;;;;;AAOG;;AAEH,IAAM,yBAAyB,GAAG,oBAAlC;AACA,IAAM,wBAAwB,GAAG,eAAjC;AAEA,IAAI,QAAQ,GAAG,CAAf;AA2BA;;;;;;;AAOG;;AACH,IAAA,cAAA;AAAA;AAAA,YAAA;EAAA,SAAA,cAAA,GAAA,CAoDC;;EAnDe,cAAA,CAAA,QAAA,GAAd,UAA0B,GAA1B,EAAuC,YAAvC,EAAmE;IACjE,IAAM,cAAc,GAAG,kBAAkB,EAAzC;;IAEA,IAAI,cAAc,CAAC,GAAD,CAAd,KAAwB,SAA5B,EAAuC;MACrC,cAAc,CAAC,GAAD,CAAd,GAAsB,OAAO,YAAP,KAAwB,UAAxB,GAAsC,YAAyB,EAA/D,GAAoE,YAA1F;IACD;;IAED,OAAO,cAAc,CAAC,GAAD,CAArB;EACD,CARa;;EAUA,cAAA,CAAA,QAAA,GAAd,UAA0B,GAA1B,EAAuC,KAAvC,EAA+C;IAC7C,IAAM,cAAc,GAAG,kBAAkB,EAAzC;;IACA,IAAM,SAAS,GAAG,cAAc,CAAC,wBAAD,CAAhC;IACA,IAAI,QAAQ,GAAG,cAAc,CAAC,GAAD,CAA7B;;IAEA,IAAI,KAAK,KAAK,QAAd,EAAwB;MACtB,cAAc,CAAC,GAAD,CAAd,GAAsB,KAAtB;MAEA,IAAI,iBAAiB,GAAG;QACtB,QAAQ,EAAA,QADc;QAEtB,KAAK,EAAA,KAFiB;QAGtB,GAAG,EAAA;MAHmB,CAAxB;;MAMA,KAAK,IAAI,EAAT,IAAe,SAAf,EAA0B;QACxB,IAAI,SAAS,CAAC,cAAV,CAAyB,EAAzB,CAAJ,EAAkC;UAChC,SAAS,CAAC,EAAD,CAAT,CAAc,iBAAd;QACD;MACF;IACF;;IAED,OAAO,KAAP;EACD,CAtBa;;EAwBA,cAAA,CAAA,iBAAA,GAAd,UAAgC,EAAhC,EAAwD;IACtD;IACA;IACA,IAAI,EAAE,GAAG,EAAE,CAAC,MAAZ;;IACA,IAAM,SAAS,GAAG,aAAa,EAA/B;;IAEA,IAAI,CAAC,EAAL,EAAS;MACP,EAAE,GAAG,EAAE,CAAC,MAAH,GAAY,MAAM,CAAC,QAAQ,EAAT,CAAvB;IACD;;IAED,SAAS,CAAC,EAAD,CAAT,GAAgB,EAAhB;EACD,CAXa;;EAaA,cAAA,CAAA,oBAAA,GAAd,UAAmC,EAAnC,EAA2D;IACzD,IAAM,SAAS,GAAG,aAAa,EAA/B;;IACA,OAAO,SAAS,CAAC,EAAE,CAAC,MAAJ,CAAhB;EACD,CAHa;;EAIhB,OAAA,cAAA;AAAC,CApDD,EAAA;;2BAsDA;;AACA,SAAS,kBAAT,GAA2B;;;EACzB,IAAM,GAAG,GAAG,SAAS,EAArB,CADyB,CAEzB;;EACA,IAAM,SAAS,GAA2B,GAAG,IAAI,EAAjD;;EAEA,IAAI,CAAC,SAAS,CAAC,yBAAD,CAAd,EAA2C;IACzC,SAAS,CAAC,yBAAD,CAAT,IAAoC,EAAA,GAAA,EAAA,EAClC,EAAA,CAAC,wBAAD,CAAA,GAA4B,EADM,EAEnC,EAFD;EAGD;;EAED,OAAO,SAAS,CAAC,yBAAD,CAAhB;AACD;;AAED,SAAS,aAAT,GAAsB;EACpB,IAAM,cAAc,GAAG,kBAAkB,EAAzC;;EACA,OAAO,cAAc,CAAC,wBAAD,CAArB;AACD","sourcesContent":["import { getWindow } from './dom/getWindow';\n\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\n\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\n\nlet _counter = 0;\n\n/**\n * Change description used for change callbacks in GlobalSettings.\n *\n * @public\n * {@docCategory IChangeDescription}\n */\nexport interface IChangeDescription {\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  oldValue: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n}\n\n/**\n * Change event callback.\n *\n * @public\n * {@docCategory IChangeEventCallback}\n */\nexport interface IChangeEventCallback {\n  __id__?: string;\n  (changeDescription?: IChangeDescription): void;\n}\n\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nexport class GlobalSettings {\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\n    const globalSettings = _getGlobalSettings();\n\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? (defaultValue as Function)() : defaultValue;\n    }\n\n    return globalSettings[key];\n  }\n\n  public static setValue<T>(key: string, value: T): T {\n    const globalSettings = _getGlobalSettings();\n    const callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    let oldValue = globalSettings[key];\n\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n\n      let changeDescription = {\n        oldValue,\n        value,\n        key,\n      };\n\n      for (let id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  }\n\n  public static addChangeListener(cb: IChangeEventCallback): void {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    let id = cb.__id__;\n    const callbacks = _getCallbacks();\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    callbacks[id] = cb;\n  }\n\n  public static removeChangeListener(cb: IChangeEventCallback): void {\n    const callbacks = _getCallbacks();\n    delete callbacks[cb.__id__ as string];\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings(): { [key: string]: any } {\n  const win = getWindow();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObj: { [key: string]: any } = win || {};\n\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = {\n      [CALLBACK_STATE_PROP_NAME]: {},\n    };\n  }\n\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\n\nfunction _getCallbacks(): { [key: string]: () => void } {\n  const globalSettings = _getGlobalSettings();\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}