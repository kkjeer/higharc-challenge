{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\n\nvar DetailsListInner = function (props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n      className = props.className,\n      checkboxVisibility = props.checkboxVisibility,\n      compact = props.compact,\n      constrainMode = props.constrainMode,\n      dragDropEvents = props.dragDropEvents,\n      groups = props.groups,\n      groupProps = props.groupProps,\n      indentWidth = props.indentWidth,\n      items = props.items,\n      isPlaceholderData = props.isPlaceholderData,\n      isHeaderVisible = props.isHeaderVisible,\n      layoutMode = props.layoutMode,\n      onItemInvoked = props.onItemInvoked,\n      onItemContextMenu = props.onItemContextMenu,\n      onColumnHeaderClick = props.onColumnHeaderClick,\n      onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n      _a = props.selectionMode,\n      selectionMode = _a === void 0 ? selection.mode : _a,\n      selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n      selectionZoneProps = props.selectionZoneProps,\n      // eslint-disable-next-line deprecation/deprecation\n  ariaLabel = props.ariaLabel,\n      ariaLabelForGrid = props.ariaLabelForGrid,\n      rowElementEventMap = props.rowElementEventMap,\n      // eslint-disable-next-line deprecation/deprecation\n  _b = props.shouldApplyApplicationRole,\n      // eslint-disable-next-line deprecation/deprecation\n  shouldApplyApplicationRole = _b === void 0 ? false : _b,\n      getKey = props.getKey,\n      listProps = props.listProps,\n      usePageCache = props.usePageCache,\n      onShouldVirtualize = props.onShouldVirtualize,\n      viewport = props.viewport,\n      minimumPixelsForDrag = props.minimumPixelsForDrag,\n      getGroupHeight = props.getGroupHeight,\n      styles = props.styles,\n      theme = props.theme,\n      _c = props.cellStyleProps,\n      cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n      onRenderCheckbox = props.onRenderCheckbox,\n      useFastIcons = props.useFastIcons,\n      dragDropHelper = props.dragDropHelper,\n      adjustedColumns = props.adjustedColumns,\n      isCollapsed = props.isCollapsed,\n      isSizing = props.isSizing,\n      isSomeGroupExpanded = props.isSomeGroupExpanded,\n      version = props.version,\n      rootRef = props.rootRef,\n      listRef = props.listRef,\n      focusZoneRef = props.focusZoneRef,\n      columnReorderOptions = props.columnReorderOptions,\n      groupedListRef = props.groupedListRef,\n      headerRef = props.headerRef,\n      onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n      onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n      onRowDidMount = props.onRowDidMount,\n      onRowWillUnmount = props.onRowWillUnmount,\n      disableSelectionZone = props.disableSelectionZone,\n      onColumnResized = props.onColumnResized,\n      onColumnAutoResized = props.onColumnAutoResized,\n      onToggleCollapse = props.onToggleCollapse,\n      onActiveRowChanged = props.onActiveRowChanged,\n      onBlur = props.onBlur,\n      eventsToRegister = props.rowElementEventMap,\n      onRenderMissingItem = props.onRenderMissingItem,\n      onRenderItemColumn = props.onRenderItemColumn,\n      onRenderField = props.onRenderField,\n      getCellValueKey = props.getCellValueKey,\n      getRowAriaLabel = props.getRowAriaLabel,\n      getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n      checkButtonAriaLabel = props.checkButtonAriaLabel,\n      checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel,\n      checkboxCellClassName = props.checkboxCellClassName,\n      useReducedRowRenderer = props.useReducedRowRenderer,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n      onRenderDefaultRow = props.onRenderDefaultRow,\n      selectionZoneRef = props.selectionZoneRef,\n      focusZoneProps = props.focusZoneProps;\n  var defaultRole = 'grid';\n  var role = props.role ? props.role : defaultRole;\n  var rowId = getId('row');\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps, groupedDetailsListIndexMap]);\n  var finalGroupProps = React.useMemo(function () {\n    var _a;\n\n    return __assign(__assign({}, groupProps), {\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: __assign(__assign({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), {\n        selectAllButtonProps: __assign({\n          'aria-label': checkButtonGroupAriaLabel\n        }, (_a = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a === void 0 ? void 0 : _a.selectAllButtonProps)\n      })\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index, group) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var groupKey = group ? group.key : undefined;\n    var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem : 0;\n    var rowRole = role === defaultRole ? undefined : 'presentation';\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      id: rowId + \"-\" + index,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      onRenderField: onRenderField,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons,\n      role: rowRole\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, rowId, onRowDidMount, onRowWillUnmount, onRenderItemColumn, onRenderField, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, isHeaderVisible, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth, role, groupedDetailsListIndexMap]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n\n  var focusZoneInnerProps = __assign(__assign({}, focusZoneProps), {\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged ? focusZoneProps.onActiveElementChanged : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur\n  });\n\n  var list = groups ? React.createElement(GroupedList, {\n    focusZoneProps: focusZoneInnerProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneInnerProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return React.createElement(\"div\", __assign({\n    ref: rootRef,\n    className: classNames.root,\n    \"data-automationid\": \"DetailsList\",\n    \"data-is-scrollable\": \"false\"\n  }, shouldApplyApplicationRole ? {\n    role: 'application'\n  } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n    role: role,\n    \"aria-label\": ariaLabelForGrid || ariaLabel,\n    \"aria-rowcount\": isPlaceholderData ? -1 : rowCount,\n    \"aria-colcount\": colCount,\n    \"aria-readonly\": \"true\",\n    \"aria-busy\": isPlaceholderData\n  }, React.createElement(\"div\", {\n    onKeyDown: onHeaderKeyDown,\n    role: \"presentation\",\n    className: classNames.headerWrapper\n  }, isHeaderVisible && onRenderDetailsHeader({\n    componentRef: headerRef,\n    selectionMode: selectionMode,\n    layoutMode: layoutMode,\n    selection: selection,\n    columns: adjustedColumns,\n    onColumnClick: onColumnHeaderClick,\n    onColumnContextMenu: onColumnHeaderContextMenu,\n    onColumnResized: onColumnResized,\n    onColumnIsSizingChanged: onColumnIsSizingChanged,\n    onColumnAutoResized: onColumnAutoResized,\n    groupNestingDepth: groupNestingDepth,\n    isAllCollapsed: isCollapsed,\n    onToggleCollapseAll: onToggleCollapse,\n    ariaLabel: ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n    selectAllVisibility: selectAllVisibility,\n    collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n    viewport: viewport,\n    columnReorderProps: columnReorderProps,\n    minimumPixelsForDrag: minimumPixelsForDrag,\n    cellStyleProps: cellStyleProps,\n    checkboxVisibility: checkboxVisibility,\n    indentWidth: indentWidth,\n    onRenderDetailsCheckbox: onRenderCheckbox,\n    rowWidth: sumColumnWidths(adjustedColumns),\n    useFastIcons: useFastIcons\n  }, onRenderDetailsHeader)), React.createElement(\"div\", {\n    onKeyDown: onContentKeyDown,\n    role: \"presentation\",\n    className: classNames.contentWrapper\n  }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n    ref: selectionZoneRef,\n    selection: selection,\n    selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n    selectionMode: selectionMode,\n    onItemInvoked: onItemInvoked,\n    onItemContextMenu: onItemContextMenu,\n    enterModalOnTouch: enterModalSelectionOnTouch\n  }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))));\n};\n\nvar DetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsListBase, _super);\n\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n          checkboxVisibility = _a.checkboxVisibility,\n          items = _a.items,\n          setKey = _a.setKey,\n          _b = _a.selectionMode,\n          selectionMode = _b === void 0 ? _this._selection.mode : _b,\n          columns = _a.columns,\n          viewport = _a.viewport,\n          compact = _a.compact,\n          dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n          isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n\n      var nextState = previousState;\n\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex; // reset focusedItemIndex when setKey changes\n\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n\n      return nextState;\n    };\n\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n\n      _this._setFocusToRowIfPending(row);\n\n      var onRowDidMount = _this.props.onRowDidMount;\n\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      delete _this._activeRows[itemKey];\n\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n\n\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n\n\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n          items = _a.items,\n          onActiveItemChanged = _a.onActiveItemChanged;\n\n      if (!el) {\n        return;\n      } // Check and assign index only if the event was raised from any DetailsRow element\n\n\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var item = this.props.items[index];\n\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      var itemKey = this._getItemKey(item, index);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n\n    return 0;\n  };\n\n  DetailsListBase.prototype.updateColumn = function (column, options) {\n    var _a, _b;\n\n    var NO_COLUMNS = [];\n    var _c = this.props,\n        _d = _c.columns,\n        columns = _d === void 0 ? NO_COLUMNS : _d,\n        selectionMode = _c.selectionMode,\n        checkboxVisibility = _c.checkboxVisibility,\n        columnReorderOptions = _c.columnReorderOptions;\n    var width = options.width,\n        newColumnIndex = options.newColumnIndex;\n    var index = columns.findIndex(function (col) {\n      return col.key === column.key;\n    });\n\n    if (width) {\n      this._onColumnResized(column, width, index);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      var isCheckboxColumnHidden = selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n      var showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      var columnIndex = (showCheckbox ? 2 : 1) + index;\n      var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n      var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;\n      var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;\n      var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          var dragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n\n    this._async.dispose();\n  };\n\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n\n        var row = this._activeRows[itemKey];\n\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n\n      delete this._initialFocusedIndex;\n    }\n  };\n\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n\n\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n\n    var newItems = newProps.items,\n        layoutMode = newProps.layoutMode,\n        selectionMode = newProps.selectionMode,\n        viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps); // Preserve adjusted column calculated widths.\n\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n\n\n  DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? this._selection.mode : _b,\n        checkboxVisibility = _a.checkboxVisibility,\n        flexMargin = _a.flexMargin,\n        skipViewportMeasures = _a.skipViewportMeasures;\n    var remainingWidth = viewportWidth - (flexMargin || 0);\n    var sumProportionalWidth = 0;\n    newColumns.forEach(function (col) {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n    var widthFraction = remainingWidth / sumProportionalWidth; // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n\n    if (!skipViewportMeasures) {\n      newColumns.forEach(function (column) {\n        var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          var shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= shrinkWidth / (fullWidth - newColumn.minWidth) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]); // Delay computation until viewport width is available.\n\n\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n\n\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n\n    var _a = props.selectionMode,\n        selectionMode = _a === void 0 ? this._selection.mode : _a,\n        checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n\n    var minimumWidth = 0;\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var baseColumn = __assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      });\n\n      var newColumn = __assign(__assign({}, baseColumn), _this._columnOverrides[column.key]); // eslint-disable-next-line deprecation/deprecation\n\n\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    var lastIndex = adjustedColumns.length - 1; // Shrink or remove collapsable columns.\n\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth; // eslint-disable-next-line deprecation/deprecation\n\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n\n      lastIndex--;\n    } // Then expand columns starting at the beginning, until we've filled the width.\n\n\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  };\n\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  };\n\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\n\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {\n  var columns = [];\n\n  if (items && items.length) {\n    var firstItem = items[0];\n\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column, props, paddingOnly) {\n  var _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return (paddingOnly ? 0 : column.calculatedWidth) + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\n\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\nfunction useGroupedDetailsListIndexMap(groups) {\n  return React.useMemo(function () {\n    var indexMap = {};\n\n    if (groups) {\n      var rowCount = 1;\n      var numGroupHeaders = 1;\n\n      for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n        var group = groups_1[_i];\n        var key = group.key;\n        indexMap[key] = {\n          numOfGroupHeadersBeforeItem: numGroupHeaders,\n          totalRowCount: rowCount\n        };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n\n    return indexMap;\n  }, [groups]);\n}","map":{"version":3,"sources":["components/DetailsList/DetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    onRenderField,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        // ariaLabel is a legacy prop that used to be applied on the root node, which has poor AT support\n        // it is now treated as a fallback to ariaLabelForGrid for legacy support\n        aria-label={ariaLabelForGrid || ariaLabel}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}