{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useFocusRects, classNamesFunction } from '@fluentui/utilities';\nimport { Icon } from '../Icon/Icon';\nvar getClassNames = classNamesFunction();\nexport var CheckboxBase = React.forwardRef(function (props, forwardedRef) {\n  var disabled = props.disabled,\n      required = props.required,\n      inputProps = props.inputProps,\n      name = props.name,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy,\n      ariaDescribedBy = props.ariaDescribedBy,\n      ariaPositionInSet = props.ariaPositionInSet,\n      ariaSetSize = props.ariaSetSize,\n      title = props.title,\n      checkmarkIconProps = props.checkmarkIconProps,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      _a = props.boxSide,\n      boxSide = _a === void 0 ? 'start' : _a;\n  var id = useId('checkbox-', props.id);\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  var inputRef = React.useRef(null);\n\n  var _b = useControllableValue(props.checked, props.defaultChecked, props.onChange),\n      isChecked = _b[0],\n      setIsChecked = _b[1];\n\n  var _c = useControllableValue(props.indeterminate, props.defaultIndeterminate),\n      isIndeterminate = _c[0],\n      setIsIndeterminate = _c[1];\n\n  useFocusRects(rootRef);\n  useDebugWarning(props);\n  useComponentRef(props, isChecked, isIndeterminate, inputRef);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    reversed: boxSide !== 'start',\n    isUsingCustomLabelRender: !!props.onRenderLabel\n  });\n\n  var onChange = function (ev) {\n    if (isIndeterminate) {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      setIsChecked(!!isChecked, ev);\n      setIsIndeterminate(false);\n    } else {\n      setIsChecked(!isChecked, ev);\n    }\n  };\n\n  var defaultLabelRenderer = React.useCallback(function (checkboxProps) {\n    if (!checkboxProps) {\n      return null;\n    }\n\n    return checkboxProps.label ? React.createElement(\"span\", {\n      className: classNames.text,\n      title: checkboxProps.title\n    }, checkboxProps.label) : null;\n  }, [classNames.text]);\n  var onRenderLabel = props.onRenderLabel || defaultLabelRenderer;\n  var ariaChecked = isIndeterminate ? 'mixed' : undefined;\n\n  var mergedInputProps = __assign(__assign({\n    className: classNames.input,\n    type: 'checkbox'\n  }, inputProps), {\n    checked: !!isChecked,\n    disabled: disabled,\n    required: required,\n    name: name,\n    id: id,\n    title: title,\n    onChange: onChange,\n    'aria-disabled': disabled,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-posinset': ariaPositionInSet,\n    'aria-setsize': ariaSetSize,\n    'aria-checked': ariaChecked\n  });\n\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    title: title,\n    ref: mergedRootRefs\n  }, React.createElement(\"input\", __assign({}, mergedInputProps, {\n    ref: inputRef,\n    title: title,\n    \"data-ktp-execute-target\": true\n  })), React.createElement(\"label\", {\n    className: classNames.label,\n    htmlFor: id\n  }, React.createElement(\"div\", {\n    className: classNames.checkbox,\n    \"data-ktp-target\": true\n  }, React.createElement(Icon, __assign({\n    iconName: \"CheckMark\"\n  }, checkmarkIconProps, {\n    className: classNames.checkmark\n  }))), onRenderLabel(props, defaultLabelRenderer)));\n});\nCheckboxBase.displayName = 'CheckboxBase';\n\nfunction useDebugWarning(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Checkbox',\n      props: props,\n      mutuallyExclusive: {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      }\n    });\n  }\n}\n\nfunction useComponentRef(props, isChecked, isIndeterminate, checkBoxRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n\n      get indeterminate() {\n        return !!isIndeterminate;\n      },\n\n      focus: function () {\n        if (checkBoxRef.current) {\n          checkBoxRef.current.focus();\n        }\n      }\n    };\n  }, [checkBoxRef, isChecked, isIndeterminate]);\n}","map":{"version":3,"sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useFocusRects, classNamesFunction } from '@fluentui/utilities';\nimport { Icon } from '../Icon/Icon';\nimport type { ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport const CheckboxBase: React.FunctionComponent<ICheckboxProps> = React.forwardRef<HTMLDivElement, ICheckboxProps>(\n  (props, forwardedRef) => {\n    const {\n      disabled,\n      required,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      checkmarkIconProps,\n      styles,\n      theme,\n      className,\n      boxSide = 'start',\n    } = props;\n\n    const id = useId('checkbox-', props.id);\n\n    const rootRef = React.useRef<HTMLDivElement | null>(null);\n    const mergedRootRefs: React.Ref<HTMLDivElement> = useMergedRefs(rootRef, forwardedRef);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n\n    const [isChecked, setIsChecked] = useControllableValue(props.checked, props.defaultChecked, props.onChange);\n    const [isIndeterminate, setIsIndeterminate] = useControllableValue(props.indeterminate, props.defaultIndeterminate);\n\n    useFocusRects(rootRef);\n    useDebugWarning(props);\n    useComponentRef(props, isChecked, isIndeterminate, inputRef);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: !!props.onRenderLabel,\n    });\n\n    const onChange = (ev: React.ChangeEvent<HTMLElement>): void => {\n      if (isIndeterminate) {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        setIsChecked(!!isChecked, ev);\n        setIsIndeterminate(false);\n      } else {\n        setIsChecked(!isChecked, ev);\n      }\n    };\n\n    const defaultLabelRenderer = React.useCallback(\n      (checkboxProps?: ICheckboxProps): JSX.Element | null => {\n        if (!checkboxProps) {\n          return null;\n        }\n        return checkboxProps.label ? (\n          <span className={classNames.text} title={checkboxProps.title}>\n            {checkboxProps.label}\n          </span>\n        ) : null;\n      },\n      [classNames.text],\n    );\n\n    const onRenderLabel = props.onRenderLabel || defaultLabelRenderer;\n\n    const ariaChecked: React.InputHTMLAttributes<HTMLInputElement>['aria-checked'] = isIndeterminate\n      ? 'mixed'\n      : undefined;\n\n    const mergedInputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      className: classNames.input,\n      type: 'checkbox' as React.InputHTMLAttributes<HTMLInputElement>['type'],\n      ...inputProps,\n      checked: !!isChecked,\n      disabled,\n      required,\n      name,\n      id,\n      title,\n      onChange,\n      'aria-disabled': disabled,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-posinset': ariaPositionInSet,\n      'aria-setsize': ariaSetSize,\n      'aria-checked': ariaChecked,\n    };\n\n    return (\n      <div className={classNames.root} title={title} ref={mergedRootRefs}>\n        <input {...mergedInputProps} ref={inputRef} title={title} data-ktp-execute-target={true} />\n        <label className={classNames.label} htmlFor={id}>\n          <div className={classNames.checkbox} data-ktp-target={true}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={classNames.checkmark} />\n          </div>\n          {onRenderLabel(props, defaultLabelRenderer)}\n        </label>\n      </div>\n    );\n  },\n);\n\nCheckboxBase.displayName = 'CheckboxBase';\n\nfunction useDebugWarning(props: ICheckboxProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Checkbox',\n      props,\n      mutuallyExclusive: {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      },\n    });\n  }\n}\n\nfunction useComponentRef(\n  props: ICheckboxProps,\n  isChecked: boolean | undefined,\n  isIndeterminate: boolean | undefined,\n  checkBoxRef: React.RefObject<HTMLInputElement>,\n) {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      get indeterminate() {\n        return !!isIndeterminate;\n      },\n      focus() {\n        if (checkBoxRef.current) {\n          checkBoxRef.current.focus();\n        }\n      },\n    }),\n    [checkBoxRef, isChecked, isIndeterminate],\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}