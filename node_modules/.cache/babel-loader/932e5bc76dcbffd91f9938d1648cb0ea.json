{"ast":null,"code":"/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value) {\n  var parts = [];\n  var partStart = 0;\n  var parens = 0;\n\n  for (var i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n\n      case ')':\n        if (parens) {\n          parens--;\n        }\n\n        break;\n\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n\n          partStart = i + 1;\n        }\n\n        break;\n    }\n  } // Add the last part\n\n\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}","map":{"version":3,"sources":["tokenizeWithParentheses.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAYG;AACH,OAAM,SAAU,uBAAV,CAAkC,KAAlC,EAA+C;EACnD,IAAM,KAAK,GAAG,EAAd;EACA,IAAI,SAAS,GAAG,CAAhB;EACA,IAAI,MAAM,GAAG,CAAb;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;IACrC,QAAQ,KAAK,CAAC,CAAD,CAAb;MACE,KAAK,GAAL;QACE,MAAM;QACN;;MACF,KAAK,GAAL;QACE,IAAI,MAAJ,EAAY;UACV,MAAM;QACP;;QACD;;MACF,KAAK,IAAL;MACA,KAAK,GAAL;QACE,IAAI,CAAC,MAAL,EAAa;UACX;UACA,IAAI,CAAC,GAAG,SAAR,EAAmB;YACjB,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,SAAN,CAAgB,SAAhB,EAA2B,CAA3B,CAAX;UACD;;UACD,SAAS,GAAG,CAAC,GAAG,CAAhB;QACD;;QACD;IAlBJ;EAoBD,CA1BkD,CA4BnD;;;EACA,IAAI,SAAS,GAAG,KAAK,CAAC,MAAtB,EAA8B;IAC5B,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,SAAN,CAAgB,SAAhB,CAAX;EACD;;EAED,OAAO,KAAP;AACD","sourcesContent":["/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value: string): string[] {\n  const parts = [];\n  let partStart = 0;\n  let parens = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n      case ')':\n        if (parens) {\n          parens--;\n        }\n        break;\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n          partStart = i + 1;\n        }\n        break;\n    }\n  }\n\n  // Add the last part\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}