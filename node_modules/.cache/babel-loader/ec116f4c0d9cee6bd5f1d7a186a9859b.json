{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getThemedContext } from '@fluentui/style-utilities';\nimport { Customizer } from '@fluentui/utilities';\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n * @deprecated This is an old ThemeProvider implementation. New code should use the ThemeProvider exported from\n * `@fluentui/react` (or `@fluentui/react/lib/Theme`) instead.\n */\n\nexport var ThemeProvider = function (props) {\n  var scheme = props.scheme,\n      theme = props.theme,\n      rest = __rest(props, [\"scheme\", \"theme\"]); // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n\n\n  var contextTransform = function (context) {\n    return getThemedContext(context, scheme, theme);\n  }; // eslint-disable-next-line react/jsx-no-bind, deprecation/deprecation\n\n\n  return React.createElement(Customizer, __assign({}, rest, {\n    contextTransform: contextTransform\n  }));\n};","map":{"version":3,"sources":["ThemeProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,gBAAT,QAAuD,2BAAvD;AACA,SAAS,UAAT,QAA6C,qBAA7C;AAOA;;;;;;;AAOG;;AACH,OAAO,IAAM,aAAa,GAAiD,UAAC,KAAD,EAA2B;EAC5F,IAAA,MAAM,GAAqB,KAAK,CAA1B,MAAN;EAAA,IAAQ,KAAK,GAAc,KAAK,CAAnB,KAAb;EAAA,IAAkB,IAAI,GAAA,MAAA,CAAK,KAAL,EAAxB,CAAA,QAAA,EAAA,OAAA,CAAwB,CAAtB,CAD4F,CAGpG;EACA;EACA;;;EACA,IAAM,gBAAgB,GAAyC,UAAA,OAAA,EAAO;IACpE,OAAO,gBAAgB,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,CAAvB;EACD,CAFD,CANoG,CAUpG;;;EACA,OAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,QAAA,CAAA,EAAA,EAAK,IAAL,EAAS;IAAE,gBAAgB,EAAE;EAApB,CAAT,CAAX,CAAP;AACD,CAZM","sourcesContent":["import * as React from 'react';\nimport { getThemedContext, ISchemeNames, ITheme } from '@fluentui/style-utilities';\nimport { Customizer, ICustomizerProps } from '@fluentui/utilities';\n\nexport interface IThemeProviderProps {\n  scheme?: ISchemeNames;\n  theme?: ITheme;\n}\n\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n * @deprecated This is an old ThemeProvider implementation. New code should use the ThemeProvider exported from\n * `@fluentui/react` (or `@fluentui/react/lib/Theme`) instead.\n */\nexport const ThemeProvider: React.FunctionComponent<IThemeProviderProps> = (props: IThemeProviderProps) => {\n  const { scheme, theme, ...rest } = props;\n\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n  const contextTransform: ICustomizerProps['contextTransform'] = context => {\n    return getThemedContext(context, scheme, theme);\n  };\n\n  // eslint-disable-next-line react/jsx-no-bind, deprecation/deprecation\n  return <Customizer {...rest} contextTransform={contextTransform} />;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}