{"ast":null,"code":"import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nvar getCellText = function (item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\n\n\nexport var DetailsRowFields = function (props) {\n  var columns = props.columns,\n      rowClassNames = props.rowClassNames,\n      _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a,\n      item = props.item,\n      itemIndex = props.itemIndex,\n      isSelected = props.isSelected,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      propsOnRenderField = props.onRenderField,\n      cellsByColumn = props.cellsByColumn,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      rowHeaderId = props.rowHeaderId;\n  var cellValueKeysRef = React.useRef();\n  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n  var defaultOnRenderField = React.useCallback(function (fieldProps) {\n    var column = fieldProps.column,\n        cellValueKey = fieldProps.cellValueKey,\n        className = fieldProps.className,\n        onRender = fieldProps.onRender,\n        fieldItem = fieldProps.item,\n        fieldItemIndex = fieldProps.itemIndex;\n    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n    var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n    return React.createElement(\"div\", {\n      key: key,\n      id: column.isRowHeader ? rowHeaderId : undefined,\n      role: column.isRowHeader ? 'rowheader' : 'gridcell',\n      \"aria-readonly\": true,\n      className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, className),\n      style: {\n        width: width\n      },\n      \"data-automationid\": \"DetailsRowCell\",\n      \"data-automation-key\": column.key\n    }, onRender(fieldItem, fieldItemIndex, column));\n  }, [rowClassNames, cellStyleProps, rowHeaderId]);\n  return React.createElement(\"div\", {\n    className: rowClassNames.fields,\n    \"data-automationid\": \"DetailsRowFields\",\n    role: \"presentation\"\n  }, columns.map(function (column) {\n    var _a = column.getValueKey,\n        getValueKey = _a === void 0 ? getCellValueKey : _a;\n\n    var onRender = cellsByColumn && column.key in cellsByColumn && function () {\n      return cellsByColumn[column.key];\n    } || column.onRender || onRenderItemColumn || defaultOnRender;\n\n    var onRenderField = defaultOnRenderField;\n\n    if (column.onRenderField) {\n      onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n    }\n\n    if (propsOnRenderField) {\n      onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n    }\n\n    var previousValueKey = cellValueKeys[column.key];\n    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n    var showAnimation = false;\n\n    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n      showAnimation = true;\n    }\n\n    cellValueKeys[column.key] = cellValueKey;\n    return onRenderField({\n      item: item,\n      itemIndex: itemIndex,\n      isSelected: isSelected,\n      column: column,\n      cellValueKey: cellValueKey,\n      className: showAnimation ? rowClassNames.cellAnimation : undefined,\n      onRender: onRender\n    });\n  }));\n};\n\nfunction defaultOnRender(item, index, column) {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}","map":{"version":3,"sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IDetailsColumnFieldProps } from './DetailsColumn.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    isSelected,\n    onRenderItemColumn,\n    getCellValueKey,\n    onRenderField: propsOnRenderField,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  const defaultOnRenderField = React.useCallback(\n    (fieldProps: IDetailsColumnFieldProps): JSX.Element | null => {\n      const { column, cellValueKey, className, onRender, item: fieldItem, itemIndex: fieldItemIndex } = fieldProps;\n\n      const width: string | number =\n        typeof column.calculatedWidth === 'undefined'\n          ? 'auto'\n          : column.calculatedWidth +\n            cellStyleProps.cellLeftPadding +\n            cellStyleProps.cellRightPadding +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n\n      return (\n        <div\n          key={key}\n          id={column.isRowHeader ? rowHeaderId : undefined}\n          role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n          aria-readonly\n          className={css(\n            column.className,\n            column.isMultiline && rowClassNames.isMultiline,\n            column.isRowHeader && rowClassNames.isRowHeader,\n            rowClassNames.cell,\n            column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n            className,\n          )}\n          style={{ width }}\n          data-automationid=\"DetailsRowCell\"\n          data-automation-key={column.key}\n        >\n          {onRender(fieldItem, fieldItemIndex, column)}\n        </div>\n      );\n    },\n    [rowClassNames, cellStyleProps, rowHeaderId],\n  );\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map(column => {\n        const { getValueKey = getCellValueKey } = column;\n\n        const onRender =\n          (cellsByColumn && column.key in cellsByColumn && (() => cellsByColumn[column.key])) ||\n          column.onRender ||\n          onRenderItemColumn ||\n          defaultOnRender;\n\n        let onRenderField = defaultOnRenderField;\n\n        if (column.onRenderField) {\n          onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n        }\n\n        if (propsOnRenderField) {\n          onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n        }\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        return onRenderField({\n          item,\n          itemIndex,\n          isSelected,\n          column,\n          cellValueKey,\n          className: showAnimation ? rowClassNames.cellAnimation : undefined,\n          onRender,\n        });\n      })}\n    </div>\n  );\n};\n\nfunction defaultOnRender(item?: any, index?: number, column?: IColumn): React.ReactNode {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}