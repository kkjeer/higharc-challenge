{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\nimport { MAX_COLOR_ALPHA } from './consts';\n/**\n * Gets a color with the given transparency value and the same other components as `color`.\n * Does not modify the original color.\n */\n\nexport function updateT(color, t) {\n  var a = MAX_COLOR_ALPHA - t;\n  return __assign(__assign({}, color), {\n    t: t,\n    a: a,\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex)\n  });\n}","map":{"version":3,"sources":["utilities/color/updateT.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,eAAT,QAAgC,UAAhC;AAGA;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAAiC,CAAjC,EAA0C;EAC9C,IAAM,CAAC,GAAG,eAAe,GAAG,CAA5B;EACA,OAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;IACR,CAAC,EAAA,CADO;IAER,CAAC,EAAA,CAFO;IAGR,GAAG,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAP,EAAU,KAAK,CAAC,CAAhB,EAAmB,KAAK,CAAC,CAAzB,EAA4B,CAA5B,EAA+B,KAAK,CAAC,GAArC;EAHb,CADV,CAAA;AAMD","sourcesContent":["import { _rgbaOrHexString } from './_rgbaOrHexString';\nimport { MAX_COLOR_ALPHA } from './consts';\nimport type { IColor } from './interfaces';\n\n/**\n * Gets a color with the given transparency value and the same other components as `color`.\n * Does not modify the original color.\n */\nexport function updateT(color: IColor, t: number): IColor {\n  const a = MAX_COLOR_ALPHA - t;\n  return {\n    ...color,\n    t,\n    a,\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex),\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}