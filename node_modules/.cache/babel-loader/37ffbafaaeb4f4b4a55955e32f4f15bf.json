{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, KeyCodes, getRTL, initializeComponentRef } from '@fluentui/utilities';\nimport { AnimationDirection } from '../Calendar/Calendar.types';\nimport { CalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid';\nimport { compareDatePart, getStartDateOfWeek, addDays, addMonths, compareDates, FirstWeekOfYear, DateRangeType, DayOfWeek, DEFAULT_DATE_FORMATTING } from '@fluentui/date-time-utilities';\nimport { Icon } from '../../Icon';\nimport { defaultWeeklyDayPickerStrings, defaultWeeklyDayPickerNavigationIcons } from './defaults';\nvar getClassNames = classNamesFunction();\n\nvar WeeklyDayPickerBase =\n/** @class */\nfunction (_super) {\n  __extends(WeeklyDayPickerBase, _super);\n\n  function WeeklyDayPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dayGrid = React.createRef();\n\n    _this._onSelectDate = function (date) {\n      var onSelectDate = _this.props.onSelectDate; // don't set the navigated date on selection because selection never causes navigation\n\n      _this.setState({\n        selectedDate: date\n      });\n\n      _this._focusOnUpdate = true;\n\n      if (onSelectDate) {\n        onSelectDate(date);\n      }\n    };\n\n    _this._onNavigateDate = function (date, focusOnNavigatedDay) {\n      var onNavigateDate = _this.props.onNavigateDate;\n\n      _this.setState({\n        navigatedDate: date\n      });\n\n      _this._focusOnUpdate = focusOnNavigatedDay;\n\n      if (onNavigateDate) {\n        onNavigateDate(date);\n      }\n    };\n\n    _this._renderPreviousWeekNavigationButton = function (classNames) {\n      var _a;\n\n      var _b = _this.props,\n          minDate = _b.minDate,\n          firstDayOfWeek = _b.firstDayOfWeek,\n          navigationIcons = _b.navigationIcons;\n      var navigatedDate = _this.state.navigatedDate;\n      var leftNavigationIcon = getRTL() ? navigationIcons.rightNavigation : navigationIcons.leftNavigation; // determine if previous week in bounds\n\n      var prevWeekInBounds = minDate ? compareDatePart(minDate, getStartDateOfWeek(navigatedDate, firstDayOfWeek)) < 0 : true;\n      return React.createElement(\"button\", {\n        className: css(classNames.navigationIconButton, (_a = {}, _a[classNames.disabledStyle] = !prevWeekInBounds, _a)),\n        disabled: !prevWeekInBounds,\n        \"aria-disabled\": !prevWeekInBounds,\n        onClick: prevWeekInBounds ? _this._onSelectPrevDateRange : undefined,\n        onKeyDown: prevWeekInBounds ? _this._onButtonKeyDown(_this._onSelectPrevDateRange) : undefined,\n        title: _this._createPreviousWeekAriaLabel(),\n        type: \"button\"\n      }, React.createElement(Icon, {\n        iconName: leftNavigationIcon\n      }));\n    };\n\n    _this._renderNextWeekNavigationButton = function (classNames) {\n      var _a;\n\n      var _b = _this.props,\n          maxDate = _b.maxDate,\n          firstDayOfWeek = _b.firstDayOfWeek,\n          navigationIcons = _b.navigationIcons;\n      var navigatedDate = _this.state.navigatedDate;\n      var rightNavigationIcon = getRTL() ? navigationIcons.leftNavigation : navigationIcons.rightNavigation; // determine if next week in bounds\n\n      var nextWeekInBounds = maxDate ? compareDatePart(addDays(getStartDateOfWeek(navigatedDate, firstDayOfWeek), 7), maxDate) < 0 : true;\n      return React.createElement(\"button\", {\n        className: css(classNames.navigationIconButton, (_a = {}, _a[classNames.disabledStyle] = !nextWeekInBounds, _a)),\n        disabled: !nextWeekInBounds,\n        \"aria-disabled\": !nextWeekInBounds,\n        onClick: nextWeekInBounds ? _this._onSelectNextDateRange : undefined,\n        onKeyDown: nextWeekInBounds ? _this._onButtonKeyDown(_this._onSelectNextDateRange) : undefined,\n        title: _this._createNextWeekAriaLabel(),\n        type: \"button\"\n      }, React.createElement(Icon, {\n        iconName: rightNavigationIcon\n      }));\n    };\n\n    _this._onSelectPrevDateRange = function () {\n      if (_this.props.showFullMonth) {\n        _this._navigateDate(addMonths(_this.state.navigatedDate, -1));\n      } else {\n        _this._navigateDate(addDays(_this.state.navigatedDate, -7));\n      }\n    };\n\n    _this._onSelectNextDateRange = function () {\n      if (_this.props.showFullMonth) {\n        _this._navigateDate(addMonths(_this.state.navigatedDate, 1));\n      } else {\n        _this._navigateDate(addDays(_this.state.navigatedDate, 7));\n      }\n    };\n\n    _this._navigateDate = function (date) {\n      _this.setState({\n        navigatedDate: date\n      });\n\n      if (_this.props.onNavigateDate) {\n        _this.props.onNavigateDate(date);\n      }\n    };\n\n    _this._onWrapperKeyDown = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this._onButtonKeyDown = function (callback) {\n      return function (ev) {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.enter:\n            callback();\n            break;\n        }\n      };\n    };\n\n    _this._onTouchStart = function (ev) {\n      var touch = ev.touches[0];\n\n      if (touch) {\n        _this._initialTouchX = touch.clientX;\n      }\n    };\n\n    _this._onTouchMove = function (ev) {\n      var isRtl = getRTL();\n      var touch = ev.touches[0];\n\n      if (touch && _this._initialTouchX !== undefined && touch.clientX !== _this._initialTouchX) {\n        if ((touch.clientX - _this._initialTouchX) * (isRtl ? -1 : 1) < 0) {\n          // swipe right\n          _this._onSelectNextDateRange();\n        } else {\n          // swipe left\n          _this._onSelectPrevDateRange();\n        }\n\n        _this._initialTouchX = undefined;\n      }\n    };\n\n    _this._createPreviousWeekAriaLabel = function () {\n      var _a = _this.props,\n          strings = _a.strings,\n          showFullMonth = _a.showFullMonth,\n          firstDayOfWeek = _a.firstDayOfWeek;\n      var navigatedDate = _this.state.navigatedDate;\n      var ariaLabel = undefined;\n\n      if (showFullMonth && strings.prevMonthAriaLabel) {\n        ariaLabel = strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()];\n      } else if (!showFullMonth && strings.prevWeekAriaLabel) {\n        var firstDayOfPreviousWeek = getStartDateOfWeek(addDays(navigatedDate, -7), firstDayOfWeek);\n        var lastDayOfPreviousWeek = addDays(firstDayOfPreviousWeek, 6);\n        ariaLabel = strings.prevWeekAriaLabel + ' ' + _this._formatDateRange(firstDayOfPreviousWeek, lastDayOfPreviousWeek);\n      }\n\n      return ariaLabel;\n    };\n\n    _this._createNextWeekAriaLabel = function () {\n      var _a = _this.props,\n          strings = _a.strings,\n          showFullMonth = _a.showFullMonth,\n          firstDayOfWeek = _a.firstDayOfWeek;\n      var navigatedDate = _this.state.navigatedDate;\n      var ariaLabel = undefined;\n\n      if (showFullMonth && strings.nextMonthAriaLabel) {\n        ariaLabel = strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()];\n      } else if (!showFullMonth && strings.nextWeekAriaLabel) {\n        var firstDayOfNextWeek = getStartDateOfWeek(addDays(navigatedDate, 7), firstDayOfWeek);\n        var lastDayOfNextWeek = addDays(firstDayOfNextWeek, 6);\n        ariaLabel = strings.nextWeekAriaLabel + ' ' + _this._formatDateRange(firstDayOfNextWeek, lastDayOfNextWeek);\n      }\n\n      return ariaLabel;\n    };\n\n    _this._formatDateRange = function (startDate, endDate) {\n      var _a = _this.props,\n          dateTimeFormatter = _a.dateTimeFormatter,\n          strings = _a.strings;\n      return (dateTimeFormatter === null || dateTimeFormatter === void 0 ? void 0 : dateTimeFormatter.formatMonthDayYear(startDate, strings)) + \" - \" + (dateTimeFormatter === null || dateTimeFormatter === void 0 ? void 0 : dateTimeFormatter.formatMonthDayYear(endDate, strings));\n    };\n\n    initializeComponentRef(_this);\n    var currentDate = props.initialDate && !isNaN(props.initialDate.getTime()) ? props.initialDate : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDate: currentDate,\n      previousShowFullMonth: !!props.showFullMonth,\n      animationDirection: props.animationDirection\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n\n  WeeklyDayPickerBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var currentDate = nextProps.initialDate && !isNaN(nextProps.initialDate.getTime()) ? nextProps.initialDate : nextProps.today || new Date();\n    var showFullMonth = !!nextProps.showFullMonth;\n    var newAnimationDirection = showFullMonth !== prevState.previousShowFullMonth ? AnimationDirection.Vertical : AnimationDirection.Horizontal;\n\n    if (!compareDates(currentDate, prevState.selectedDate)) {\n      return {\n        selectedDate: currentDate,\n        navigatedDate: currentDate,\n        previousShowFullMonth: showFullMonth,\n        animationDirection: newAnimationDirection\n      };\n    }\n\n    return {\n      selectedDate: currentDate,\n      navigatedDate: prevState.navigatedDate,\n      previousShowFullMonth: showFullMonth,\n      animationDirection: newAnimationDirection\n    };\n  };\n\n  WeeklyDayPickerBase.prototype.focus = function () {\n    if (this._dayGrid && this._dayGrid.current) {\n      this._dayGrid.current.focus();\n    }\n  };\n\n  WeeklyDayPickerBase.prototype.render = function () {\n    var _a = this.props,\n        strings = _a.strings,\n        dateTimeFormatter = _a.dateTimeFormatter,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        restrictedDates = _a.restrictedDates,\n        today = _a.today,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className,\n        showFullMonth = _a.showFullMonth,\n        weeksToShow = _a.weeksToShow,\n        calendarDayGridProps = __rest(_a, [\"strings\", \"dateTimeFormatter\", \"firstDayOfWeek\", \"minDate\", \"maxDate\", \"restrictedDates\", \"today\", \"styles\", \"theme\", \"className\", \"showFullMonth\", \"weeksToShow\"]);\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      onKeyDown: this._onWrapperKeyDown,\n      onTouchStart: this._onTouchStart,\n      onTouchMove: this._onTouchMove,\n      \"aria-expanded\": showFullMonth\n    }, this._renderPreviousWeekNavigationButton(classNames), React.createElement(CalendarDayGrid, __assign({\n      styles: styles,\n      componentRef: this._dayGrid,\n      strings: strings,\n      selectedDate: this.state.selectedDate,\n      navigatedDate: this.state.navigatedDate,\n      firstDayOfWeek: firstDayOfWeek,\n      firstWeekOfYear: FirstWeekOfYear.FirstDay,\n      dateRangeType: DateRangeType.Day,\n      weeksToShow: showFullMonth ? weeksToShow : 1,\n      dateTimeFormatter: dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates,\n      onSelectDate: this._onSelectDate,\n      onNavigateDate: this._onNavigateDate,\n      today: today,\n      lightenDaysOutsideNavigatedMonth: showFullMonth,\n      animationDirection: this.state.animationDirection\n    }, calendarDayGridProps)), this._renderNextWeekNavigationButton(classNames));\n  };\n\n  WeeklyDayPickerBase.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n\n  WeeklyDayPickerBase.defaultProps = {\n    onSelectDate: undefined,\n    initialDate: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    strings: defaultWeeklyDayPickerStrings,\n    navigationIcons: defaultWeeklyDayPickerNavigationIcons,\n    dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n    animationDirection: AnimationDirection.Horizontal\n  };\n  return WeeklyDayPickerBase;\n}(React.Component);\n\nexport { WeeklyDayPickerBase };","map":{"version":3,"sources":["components/WeeklyDayPicker/WeeklyDayPicker.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,EAA6B,GAA7B,EAAkC,QAAlC,EAA4C,MAA5C,EAAoD,sBAApD,QAAkF,qBAAlF;AACA,SAAS,kBAAT,QAAmC,4BAAnC;AACA,SAAS,eAAT,QAAgC,oCAAhC;AACA,SACE,eADF,EAEE,kBAFF,EAGE,OAHF,EAIE,SAJF,EAKE,YALF,EAME,eANF,EAOE,aAPF,EAQE,SARF,EASE,uBATF,QAUO,+BAVP;AAWA,SAAS,IAAT,QAAqB,YAArB;AACA,SAAS,6BAAT,EAAwC,qCAAxC,QAAqF,YAArF;AASA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;;AAgBA,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAAyC,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;EA6CvC,SAAA,mBAAA,CAAmB,KAAnB,EAA+C;IAA/C,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;IAjCQ,KAAA,CAAA,QAAA,GAAW,KAAK,CAAC,SAAN,EAAX;;IAwHA,KAAA,CAAA,aAAA,GAAgB,UAAC,IAAD,EAAW;MACzB,IAAA,YAAY,GAAK,KAAI,CAAC,KAAL,CAAL,YAAZ,CADyB,CAGjC;;MACA,KAAI,CAAC,QAAL,CAAc;QACZ,YAAY,EAAE;MADF,CAAd;;MAGA,KAAI,CAAC,cAAL,GAAsB,IAAtB;;MAEA,IAAI,YAAJ,EAAkB;QAChB,YAAY,CAAC,IAAD,CAAZ;MACD;IACF,CAZO;;IAcA,KAAA,CAAA,eAAA,GAAkB,UAAC,IAAD,EAAa,mBAAb,EAAyC;MACzD,IAAA,cAAc,GAAK,KAAI,CAAC,KAAL,CAAL,cAAd;;MAER,KAAI,CAAC,QAAL,CAAc;QACZ,aAAa,EAAE;MADH,CAAd;;MAGA,KAAI,CAAC,cAAL,GAAsB,mBAAtB;;MAEA,IAAI,cAAJ,EAAoB;QAClB,cAAc,CAAC,IAAD,CAAd;MACD;IACF,CAXO;;IAaA,KAAA,CAAA,mCAAA,GAAsC,UAC5C,UAD4C,EACU;;;MAEhD,IAAA,EAAA,GAA+C,KAAI,CAAC,KAApD;MAAA,IAAE,OAAO,GAAA,EAAA,CAAA,OAAT;MAAA,IAAW,cAAc,GAAA,EAAA,CAAA,cAAzB;MAAA,IAA2B,eAAe,GAAA,EAAA,CAAA,eAA1C;MACE,IAAA,aAAa,GAAK,KAAI,CAAC,KAAL,CAAL,aAAb;MACR,IAAM,kBAAkB,GAAG,MAAM,KAAK,eAAgB,CAAC,eAAtB,GAAwC,eAAgB,CAAC,cAA1F,CAJsD,CAMtD;;MACA,IAAM,gBAAgB,GAAG,OAAO,GAC5B,eAAe,CAAC,OAAD,EAAU,kBAAkB,CAAC,aAAD,EAAgB,cAAhB,CAA5B,CAAf,GAA+E,CADnD,GAE5B,IAFJ;MAIA,OACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;QACE,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,oBAAZ,GAAgC,EAAA,GAAA,EAAA,EAC5C,EAAA,CAAC,UAAU,CAAC,aAAZ,CAAA,GAA4B,CAAC,gBADe,EAE5C,EAFY,EADhB;QAIE,QAAQ,EAAE,CAAC,gBAJb;QAI6B,iBACZ,CAAC,gBALlB;QAME,OAAO,EAAE,gBAAgB,GAAG,KAAI,CAAC,sBAAR,GAAiC,SAN5D;QAOE,SAAS,EAAE,gBAAgB,GAAG,KAAI,CAAC,gBAAL,CAAsB,KAAI,CAAC,sBAA3B,CAAH,GAAwD,SAPrF;QAQE,KAAK,EAAE,KAAI,CAAC,4BAAL,EART;QASE,IAAI,EAAC;MATP,CAAA,EAWE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;QAAC,QAAQ,EAAE;MAAX,CAAL,CAXF,CADF;IAeD,CA3BO;;IA6BA,KAAA,CAAA,+BAAA,GAAkC,UAAC,UAAD,EAAuD;;;MACzF,IAAA,EAAA,GAA+C,KAAI,CAAC,KAApD;MAAA,IAAE,OAAO,GAAA,EAAA,CAAA,OAAT;MAAA,IAAW,cAAc,GAAA,EAAA,CAAA,cAAzB;MAAA,IAA2B,eAAe,GAAA,EAAA,CAAA,eAA1C;MACE,IAAA,aAAa,GAAK,KAAI,CAAC,KAAL,CAAL,aAAb;MACR,IAAM,mBAAmB,GAAG,MAAM,KAAK,eAAgB,CAAC,cAAtB,GAAuC,eAAgB,CAAC,eAA1F,CAH+F,CAK/F;;MACA,IAAM,gBAAgB,GAAG,OAAO,GAC5B,eAAe,CAAC,OAAO,CAAC,kBAAkB,CAAC,aAAD,EAAgB,cAAhB,CAAnB,EAAqD,CAArD,CAAR,EAAiE,OAAjE,CAAf,GAA2F,CAD/D,GAE5B,IAFJ;MAIA,OACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;QACE,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,oBAAZ,GAAgC,EAAA,GAAA,EAAA,EAC5C,EAAA,CAAC,UAAU,CAAC,aAAZ,CAAA,GAA4B,CAAC,gBADe,EAE5C,EAFY,EADhB;QAIE,QAAQ,EAAE,CAAC,gBAJb;QAI6B,iBACZ,CAAC,gBALlB;QAME,OAAO,EAAE,gBAAgB,GAAG,KAAI,CAAC,sBAAR,GAAiC,SAN5D;QAOE,SAAS,EAAE,gBAAgB,GAAG,KAAI,CAAC,gBAAL,CAAsB,KAAI,CAAC,sBAA3B,CAAH,GAAwD,SAPrF;QAQE,KAAK,EAAE,KAAI,CAAC,wBAAL,EART;QASE,IAAI,EAAC;MATP,CAAA,EAWE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;QAAC,QAAQ,EAAE;MAAX,CAAL,CAXF,CADF;IAeD,CAzBO;;IA2BA,KAAA,CAAA,sBAAA,GAAyB,YAAA;MAC/B,IAAI,KAAI,CAAC,KAAL,CAAW,aAAf,EAA8B;QAC5B,KAAI,CAAC,aAAL,CAAmB,SAAS,CAAC,KAAI,CAAC,KAAL,CAAW,aAAZ,EAA2B,CAAC,CAA5B,CAA5B;MACD,CAFD,MAEO;QACL,KAAI,CAAC,aAAL,CAAmB,OAAO,CAAC,KAAI,CAAC,KAAL,CAAW,aAAZ,EAA2B,CAAC,CAA5B,CAA1B;MACD;IACF,CANO;;IAQA,KAAA,CAAA,sBAAA,GAAyB,YAAA;MAC/B,IAAI,KAAI,CAAC,KAAL,CAAW,aAAf,EAA8B;QAC5B,KAAI,CAAC,aAAL,CAAmB,SAAS,CAAC,KAAI,CAAC,KAAL,CAAW,aAAZ,EAA2B,CAA3B,CAA5B;MACD,CAFD,MAEO;QACL,KAAI,CAAC,aAAL,CAAmB,OAAO,CAAC,KAAI,CAAC,KAAL,CAAW,aAAZ,EAA2B,CAA3B,CAA1B;MACD;IACF,CANO;;IAQA,KAAA,CAAA,aAAA,GAAgB,UAAC,IAAD,EAAW;MACjC,KAAI,CAAC,QAAL,CAAc;QACZ,aAAa,EAAE;MADH,CAAd;;MAGA,IAAI,KAAI,CAAC,KAAL,CAAW,cAAf,EAA+B;QAC7B,KAAI,CAAC,KAAL,CAAW,cAAX,CAA0B,IAA1B;MACD;IACF,CAPO;;IASA,KAAA,CAAA,iBAAA,GAAoB,UAAC,EAAD,EAAqC;MAC/D;MACA,QAAQ,EAAE,CAAC,KAAX;QACE,KAAK,QAAQ,CAAC,KAAd;UACE,EAAE,CAAC,cAAH;UACA;;QAEF,KAAK,QAAQ,CAAC,SAAd;UACE,EAAE,CAAC,cAAH;UACA;;QAEF;UACE;MAVJ;IAYD,CAdO;;IAgBA,KAAA,CAAA,gBAAA,GAAmB,UAAC,QAAD,EAAqB;MAC9C,OAAO,UAAC,EAAD,EAA2C;QAChD;QACA,QAAQ,EAAE,CAAC,KAAX;UACE,KAAK,QAAQ,CAAC,KAAd;YACE,QAAQ;YACR;QAHJ;MAKD,CAPD;IAQD,CATO;;IAWA,KAAA,CAAA,aAAA,GAAgB,UAAC,EAAD,EAAqC;MAC3D,IAAM,KAAK,GAAG,EAAE,CAAC,OAAH,CAAW,CAAX,CAAd;;MACA,IAAI,KAAJ,EAAW;QACT,KAAI,CAAC,cAAL,GAAsB,KAAK,CAAC,OAA5B;MACD;IACF,CALO;;IAOA,KAAA,CAAA,YAAA,GAAe,UAAC,EAAD,EAAqC;MAC1D,IAAM,KAAK,GAAG,MAAM,EAApB;MACA,IAAM,KAAK,GAAG,EAAE,CAAC,OAAH,CAAW,CAAX,CAAd;;MACA,IAAI,KAAK,IAAI,KAAI,CAAC,cAAL,KAAwB,SAAjC,IAA8C,KAAK,CAAC,OAAN,KAAkB,KAAI,CAAC,cAAzE,EAAyF;QACvF,IAAI,CAAC,KAAK,CAAC,OAAN,GAAgB,KAAI,CAAC,cAAtB,KAAyC,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAAtD,IAA2D,CAA/D,EAAkE;UAChE;UACA,KAAI,CAAC,sBAAL;QACD,CAHD,MAGO;UACL;UACA,KAAI,CAAC,sBAAL;QACD;;QACD,KAAI,CAAC,cAAL,GAAsB,SAAtB;MACD;IACF,CAbO;;IAeA,KAAA,CAAA,4BAAA,GAA+B,YAAA;MAC/B,IAAA,EAAA,GAA6C,KAAI,CAAC,KAAlD;MAAA,IAAE,OAAO,GAAA,EAAA,CAAA,OAAT;MAAA,IAAW,aAAa,GAAA,EAAA,CAAA,aAAxB;MAAA,IAA0B,cAAc,GAAA,EAAA,CAAA,cAAxC;MACE,IAAA,aAAa,GAAK,KAAI,CAAC,KAAL,CAAL,aAAb;MAER,IAAI,SAAS,GAAG,SAAhB;;MACA,IAAI,aAAa,IAAI,OAAO,CAAC,kBAA7B,EAAiD;QAC/C,SAAS,GAAG,OAAO,CAAC,kBAAR,GAA6B,GAA7B,GAAmC,OAAO,CAAC,MAAR,CAAe,SAAS,CAAC,aAAD,EAAiB,CAAC,CAAlB,CAAT,CAA8B,QAA9B,EAAf,CAA/C;MACD,CAFD,MAEO,IAAI,CAAC,aAAD,IAAkB,OAAO,CAAC,iBAA9B,EAAiD;QACtD,IAAM,sBAAsB,GAAG,kBAAkB,CAAC,OAAO,CAAC,aAAD,EAAiB,CAAC,CAAlB,CAAR,EAA8B,cAA9B,CAAjD;QACA,IAAM,qBAAqB,GAAG,OAAO,CAAC,sBAAD,EAAyB,CAAzB,CAArC;QACA,SAAS,GACP,OAAO,CAAC,iBAAR,GAA4B,GAA5B,GAAkC,KAAI,CAAC,gBAAL,CAAsB,sBAAtB,EAA8C,qBAA9C,CADpC;MAED;;MACD,OAAO,SAAP;IACD,CAdO;;IAgBA,KAAA,CAAA,wBAAA,GAA2B,YAAA;MAC3B,IAAA,EAAA,GAA6C,KAAI,CAAC,KAAlD;MAAA,IAAE,OAAO,GAAA,EAAA,CAAA,OAAT;MAAA,IAAW,aAAa,GAAA,EAAA,CAAA,aAAxB;MAAA,IAA0B,cAAc,GAAA,EAAA,CAAA,cAAxC;MACE,IAAA,aAAa,GAAK,KAAI,CAAC,KAAL,CAAL,aAAb;MAER,IAAI,SAAS,GAAG,SAAhB;;MACA,IAAI,aAAa,IAAI,OAAO,CAAC,kBAA7B,EAAiD;QAC/C,SAAS,GAAG,OAAO,CAAC,kBAAR,GAA6B,GAA7B,GAAmC,OAAO,CAAC,MAAR,CAAe,SAAS,CAAC,aAAD,EAAiB,CAAjB,CAAT,CAA6B,QAA7B,EAAf,CAA/C;MACD,CAFD,MAEO,IAAI,CAAC,aAAD,IAAkB,OAAO,CAAC,iBAA9B,EAAiD;QACtD,IAAM,kBAAkB,GAAG,kBAAkB,CAAC,OAAO,CAAC,aAAD,EAAiB,CAAjB,CAAR,EAA6B,cAA7B,CAA7C;QACA,IAAM,iBAAiB,GAAG,OAAO,CAAC,kBAAD,EAAqB,CAArB,CAAjC;QACA,SAAS,GAAG,OAAO,CAAC,iBAAR,GAA4B,GAA5B,GAAkC,KAAI,CAAC,gBAAL,CAAsB,kBAAtB,EAA0C,iBAA1C,CAA9C;MACD;;MACD,OAAO,SAAP;IACD,CAbO;;IAeA,KAAA,CAAA,gBAAA,GAAmB,UAAC,SAAD,EAAkB,OAAlB,EAA+B;MAClD,IAAA,EAAA,GAAiC,KAAI,CAAC,KAAtC;MAAA,IAAE,iBAAiB,GAAA,EAAA,CAAA,iBAAnB;MAAA,IAAqB,OAAO,GAAA,EAAA,CAAA,OAA5B;MACN,OAAO,CAAG,iBAAiB,KAAA,IAAjB,IAAA,iBAAiB,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAA,iBAAiB,CAAE,kBAAnB,CAAsC,SAAtC,EAAiD,OAAjD,CAAH,IAA4D,KAA5D,IAAkE,iBAAiB,KAAA,IAAjB,IAAA,iBAAiB,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAA,iBAAiB,CAAE,kBAAnB,CACvE,OADuE,EAEvE,OAFuE,CAAlE,CAAP;IAID,CANO;;IAhRN,sBAAsB,CAAC,KAAD,CAAtB;IAEA,IAAM,WAAW,GACf,KAAK,CAAC,WAAN,IAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,WAAN,CAAkB,OAAlB,EAAD,CAA3B,GAA2D,KAAK,CAAC,WAAjE,GAA+E,KAAK,CAAC,KAAN,IAAe,IAAI,IAAJ,EADhG;IAGA,KAAI,CAAC,KAAL,GAAa;MACX,YAAY,EAAE,WADH;MAEX,aAAa,EAAE,WAFJ;MAGX,qBAAqB,EAAE,CAAC,CAAC,KAAK,CAAC,aAHpB;MAIX,kBAAkB,EAAE,KAAK,CAAC;IAJf,CAAb;IAMA,KAAI,CAAC,cAAL,GAAsB,KAAtB;;EACD;;EA5Ca,mBAAA,CAAA,wBAAA,GAAd,UACE,SADF,EAEE,SAFF,EAE4C;IAE1C,IAAM,WAAW,GACf,SAAS,CAAC,WAAV,IAAyB,CAAC,KAAK,CAAC,SAAS,CAAC,WAAV,CAAsB,OAAtB,EAAD,CAA/B,GACI,SAAS,CAAC,WADd,GAEI,SAAS,CAAC,KAAV,IAAmB,IAAI,IAAJ,EAHzB;IAIA,IAAM,aAAa,GAAG,CAAC,CAAC,SAAS,CAAC,aAAlC;IACA,IAAM,qBAAqB,GACzB,aAAa,KAAK,SAAS,CAAC,qBAA5B,GAAoD,kBAAkB,CAAC,QAAvE,GAAkF,kBAAkB,CAAC,UADvG;;IAGA,IAAI,CAAC,YAAY,CAAC,WAAD,EAAc,SAAS,CAAC,YAAxB,CAAjB,EAAwD;MACtD,OAAO;QACL,YAAY,EAAE,WADT;QAEL,aAAa,EAAE,WAFV;QAGL,qBAAqB,EAAE,aAHlB;QAIL,kBAAkB,EAAE;MAJf,CAAP;IAMD;;IAED,OAAO;MACL,YAAY,EAAE,WADT;MAEL,aAAa,EAAE,SAAS,CAAC,aAFpB;MAGL,qBAAqB,EAAE,aAHlB;MAIL,kBAAkB,EAAE;IAJf,CAAP;EAMD,CA3Ba;;EA8CP,mBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;IACE,IAAI,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,OAAnC,EAA4C;MAC1C,KAAK,QAAL,CAAc,OAAd,CAAsB,KAAtB;IACD;EACF,CAJM;;EAMA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;IACE,IAAM,EAAA,GAcF,KAAK,KAdT;IAAA,IACE,OAAO,GAAA,EAAA,CAAA,OADT;IAAA,IAEE,iBAAiB,GAAA,EAAA,CAAA,iBAFnB;IAAA,IAGE,cAAc,GAAA,EAAA,CAAA,cAHhB;IAAA,IAIE,OAAO,GAAA,EAAA,CAAA,OAJT;IAAA,IAKE,OAAO,GAAA,EAAA,CAAA,OALT;IAAA,IAME,eAAe,GAAA,EAAA,CAAA,eANjB;IAAA,IAOE,KAAK,GAAA,EAAA,CAAA,KAPP;IAAA,IAQE,MAAM,GAAA,EAAA,CAAA,MARR;IAAA,IASE,KAAK,GAAA,EAAA,CAAA,KATP;IAAA,IAUE,SAAS,GAAA,EAAA,CAAA,SAVX;IAAA,IAWE,aAAa,GAAA,EAAA,CAAA,aAXf;IAAA,IAYE,WAAW,GAAA,EAAA,CAAA,WAZb;IAAA,IAaK,oBAAoB,GAAA,MAAA,CAAA,EAAA,EAbnB,CAAA,SAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,WAAA,EAAA,eAAA,EAAA,aAAA,CAamB,CAbzB;;IAgBA,IAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAS;MACvC,KAAK,EAAE,KADgC;MAEvC,SAAS,EAAE;IAF4B,CAAT,CAAhC;IAKA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MACE,SAAS,EAAE,UAAU,CAAC,IADxB;MAEE,SAAS,EAAE,KAAK,iBAFlB;MAGE,YAAY,EAAE,KAAK,aAHrB;MAIE,WAAW,EAAE,KAAK,YAJpB;MAIgC,iBACf;IALjB,CAAA,EAOG,KAAK,mCAAL,CAAyC,UAAzC,CAPH,EAQE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,QAAA,CAAA;MACd,MAAM,EAAE,MADM;MAEd,YAAY,EAAE,KAAK,QAFL;MAGd,OAAO,EAAE,OAHK;MAId,YAAY,EAAE,KAAK,KAAL,CAAW,YAJX;MAKd,aAAa,EAAE,KAAK,KAAL,CAAW,aALZ;MAMd,cAAc,EAAE,cANF;MAOd,eAAe,EAAE,eAAe,CAAC,QAPnB;MAQd,aAAa,EAAE,aAAa,CAAC,GARf;MASd,WAAW,EAAE,aAAa,GAAG,WAAH,GAAiB,CAT7B;MAUd,iBAAiB,EAAE,iBAVL;MAWd,OAAO,EAAE,OAXK;MAYd,OAAO,EAAE,OAZK;MAad,eAAe,EAAE,eAbH;MAcd,YAAY,EAAE,KAAK,aAdL;MAed,cAAc,EAAE,KAAK,eAfP;MAgBd,KAAK,EAAE,KAhBO;MAiBd,gCAAgC,EAAE,aAjBpB;MAkBd,kBAAkB,EAAE,KAAK,KAAL,CAAW;IAlBjB,CAAA,EAmBV,oBAnBU,CAAhB,CARF,EA6BG,KAAK,+BAAL,CAAqC,UAArC,CA7BH,CADF;EAiCD,CAvDM;;EAyDA,mBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;IACE,IAAI,KAAK,cAAT,EAAyB;MACvB,KAAK,KAAL;MACA,KAAK,cAAL,GAAsB,KAAtB;IACD;EACF,CALM;;EA5HO,mBAAA,CAAA,YAAA,GAAsC;IAClD,YAAY,EAAE,SADoC;IAElD,WAAW,EAAE,SAFqC;IAGlD,KAAK,EAAE,IAAI,IAAJ,EAH2C;IAIlD,cAAc,EAAE,SAAS,CAAC,MAJwB;IAKlD,OAAO,EAAE,6BALyC;IAMlD,eAAe,EAAE,qCANiC;IAOlD,iBAAiB,EAAE,uBAP+B;IAQlD,kBAAkB,EAAE,kBAAkB,CAAC;EARW,CAAtC;EAsUhB,OAAA,mBAAA;AAAC,CAvUD,CAAyC,KAAK,CAAC,SAA/C,CAAA;;SAAa,mB","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, KeyCodes, getRTL, initializeComponentRef } from '@fluentui/utilities';\nimport { AnimationDirection } from '../Calendar/Calendar.types';\nimport { CalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid';\nimport {\n  compareDatePart,\n  getStartDateOfWeek,\n  addDays,\n  addMonths,\n  compareDates,\n  FirstWeekOfYear,\n  DateRangeType,\n  DayOfWeek,\n  DEFAULT_DATE_FORMATTING,\n} from '@fluentui/date-time-utilities';\nimport { Icon } from '../../Icon';\nimport { defaultWeeklyDayPickerStrings, defaultWeeklyDayPickerNavigationIcons } from './defaults';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type {\n  IWeeklyDayPickerProps,\n  IWeeklyDayPickerStyleProps,\n  IWeeklyDayPickerStyles,\n} from './WeeklyDayPicker.types';\nimport type { ICalendarDayGrid } from '../CalendarDayGrid/CalendarDayGrid.types';\n\nconst getClassNames = classNamesFunction<IWeeklyDayPickerStyleProps, IWeeklyDayPickerStyles>();\n\nexport interface IWeeklyDayPickerState {\n  /** The currently focused date in the week picker, but not necessarily selected */\n  navigatedDate: Date;\n\n  /** The currently selected date in the calendar */\n  selectedDate: Date;\n\n  /** Tracking whether we just toggled showFullMonth */\n  previousShowFullMonth: boolean;\n\n  /** Whether to animate veritcally or horizontally */\n  animationDirection: AnimationDirection;\n}\n\nexport class WeeklyDayPickerBase extends React.Component<IWeeklyDayPickerProps, IWeeklyDayPickerState> {\n  public static defaultProps: IWeeklyDayPickerProps = {\n    onSelectDate: undefined,\n    initialDate: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    strings: defaultWeeklyDayPickerStrings,\n    navigationIcons: defaultWeeklyDayPickerNavigationIcons,\n    dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n    animationDirection: AnimationDirection.Horizontal,\n  };\n\n  private _dayGrid = React.createRef<ICalendarDayGrid>();\n  private _focusOnUpdate: boolean;\n  private _initialTouchX: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IWeeklyDayPickerProps>,\n    prevState: Readonly<IWeeklyDayPickerState>,\n  ): Partial<IWeeklyDayPickerState> | null {\n    const currentDate =\n      nextProps.initialDate && !isNaN(nextProps.initialDate.getTime())\n        ? nextProps.initialDate\n        : nextProps.today || new Date();\n    const showFullMonth = !!nextProps.showFullMonth;\n    const newAnimationDirection =\n      showFullMonth !== prevState.previousShowFullMonth ? AnimationDirection.Vertical : AnimationDirection.Horizontal;\n\n    if (!compareDates(currentDate, prevState.selectedDate)) {\n      return {\n        selectedDate: currentDate,\n        navigatedDate: currentDate,\n        previousShowFullMonth: showFullMonth,\n        animationDirection: newAnimationDirection,\n      };\n    }\n\n    return {\n      selectedDate: currentDate,\n      navigatedDate: prevState.navigatedDate,\n      previousShowFullMonth: showFullMonth,\n      animationDirection: newAnimationDirection,\n    };\n  }\n\n  public constructor(props: IWeeklyDayPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const currentDate =\n      props.initialDate && !isNaN(props.initialDate.getTime()) ? props.initialDate : props.today || new Date();\n\n    this.state = {\n      selectedDate: currentDate,\n      navigatedDate: currentDate,\n      previousShowFullMonth: !!props.showFullMonth,\n      animationDirection: props.animationDirection!,\n    };\n    this._focusOnUpdate = false;\n  }\n\n  public focus(): void {\n    if (this._dayGrid && this._dayGrid.current) {\n      this._dayGrid.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      strings,\n      dateTimeFormatter,\n      firstDayOfWeek,\n      minDate,\n      maxDate,\n      restrictedDates,\n      today,\n      styles,\n      theme,\n      className,\n      showFullMonth,\n      weeksToShow,\n      ...calendarDayGridProps\n    } = this.props;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className: className,\n    });\n\n    return (\n      <div\n        className={classNames.root}\n        onKeyDown={this._onWrapperKeyDown}\n        onTouchStart={this._onTouchStart}\n        onTouchMove={this._onTouchMove}\n        aria-expanded={showFullMonth}\n      >\n        {this._renderPreviousWeekNavigationButton(classNames)}\n        <CalendarDayGrid\n          styles={styles}\n          componentRef={this._dayGrid}\n          strings={strings}\n          selectedDate={this.state.selectedDate!}\n          navigatedDate={this.state.navigatedDate!}\n          firstDayOfWeek={firstDayOfWeek!}\n          firstWeekOfYear={FirstWeekOfYear.FirstDay}\n          dateRangeType={DateRangeType.Day}\n          weeksToShow={showFullMonth ? weeksToShow : 1}\n          dateTimeFormatter={dateTimeFormatter!}\n          minDate={minDate}\n          maxDate={maxDate}\n          restrictedDates={restrictedDates}\n          onSelectDate={this._onSelectDate}\n          onNavigateDate={this._onNavigateDate}\n          today={today}\n          lightenDaysOutsideNavigatedMonth={showFullMonth}\n          animationDirection={this.state.animationDirection}\n          {...calendarDayGridProps}\n        />\n        {this._renderNextWeekNavigationButton(classNames)}\n      </div>\n    );\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  private _onSelectDate = (date: Date): void => {\n    const { onSelectDate } = this.props;\n\n    // don't set the navigated date on selection because selection never causes navigation\n    this.setState({\n      selectedDate: date,\n    });\n    this._focusOnUpdate = true;\n\n    if (onSelectDate) {\n      onSelectDate(date);\n    }\n  };\n\n  private _onNavigateDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    const { onNavigateDate } = this.props;\n\n    this.setState({\n      navigatedDate: date,\n    });\n    this._focusOnUpdate = focusOnNavigatedDay;\n\n    if (onNavigateDate) {\n      onNavigateDate(date);\n    }\n  };\n\n  private _renderPreviousWeekNavigationButton = (\n    classNames: IProcessedStyleSet<IWeeklyDayPickerStyles>,\n  ): JSX.Element => {\n    const { minDate, firstDayOfWeek, navigationIcons } = this.props;\n    const { navigatedDate } = this.state;\n    const leftNavigationIcon = getRTL() ? navigationIcons!.rightNavigation : navigationIcons!.leftNavigation;\n\n    // determine if previous week in bounds\n    const prevWeekInBounds = minDate\n      ? compareDatePart(minDate, getStartDateOfWeek(navigatedDate, firstDayOfWeek!)) < 0\n      : true;\n\n    return (\n      <button\n        className={css(classNames.navigationIconButton, {\n          [classNames.disabledStyle]: !prevWeekInBounds,\n        })}\n        disabled={!prevWeekInBounds}\n        aria-disabled={!prevWeekInBounds}\n        onClick={prevWeekInBounds ? this._onSelectPrevDateRange : undefined}\n        onKeyDown={prevWeekInBounds ? this._onButtonKeyDown(this._onSelectPrevDateRange) : undefined}\n        title={this._createPreviousWeekAriaLabel()}\n        type=\"button\"\n      >\n        <Icon iconName={leftNavigationIcon} />\n      </button>\n    );\n  };\n\n  private _renderNextWeekNavigationButton = (classNames: IProcessedStyleSet<IWeeklyDayPickerStyles>): JSX.Element => {\n    const { maxDate, firstDayOfWeek, navigationIcons } = this.props;\n    const { navigatedDate } = this.state;\n    const rightNavigationIcon = getRTL() ? navigationIcons!.leftNavigation : navigationIcons!.rightNavigation;\n\n    // determine if next week in bounds\n    const nextWeekInBounds = maxDate\n      ? compareDatePart(addDays(getStartDateOfWeek(navigatedDate, firstDayOfWeek!), 7), maxDate) < 0\n      : true;\n\n    return (\n      <button\n        className={css(classNames.navigationIconButton, {\n          [classNames.disabledStyle]: !nextWeekInBounds,\n        })}\n        disabled={!nextWeekInBounds}\n        aria-disabled={!nextWeekInBounds}\n        onClick={nextWeekInBounds ? this._onSelectNextDateRange : undefined}\n        onKeyDown={nextWeekInBounds ? this._onButtonKeyDown(this._onSelectNextDateRange) : undefined}\n        title={this._createNextWeekAriaLabel()}\n        type=\"button\"\n      >\n        <Icon iconName={rightNavigationIcon} />\n      </button>\n    );\n  };\n\n  private _onSelectPrevDateRange = () => {\n    if (this.props.showFullMonth) {\n      this._navigateDate(addMonths(this.state.navigatedDate, -1));\n    } else {\n      this._navigateDate(addDays(this.state.navigatedDate, -7));\n    }\n  };\n\n  private _onSelectNextDateRange = () => {\n    if (this.props.showFullMonth) {\n      this._navigateDate(addMonths(this.state.navigatedDate, 1));\n    } else {\n      this._navigateDate(addDays(this.state.navigatedDate, 7));\n    }\n  };\n\n  private _navigateDate = (date: Date) => {\n    this.setState({\n      navigatedDate: date,\n    });\n    if (this.props.onNavigateDate) {\n      this.props.onNavigateDate(date);\n    }\n  };\n\n  private _onWrapperKeyDown = (ev: React.KeyboardEvent<HTMLElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _onButtonKeyDown = (callback: () => void): ((ev: React.KeyboardEvent<HTMLButtonElement>) => void) => {\n    return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n          callback();\n          break;\n      }\n    };\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLDivElement>) => {\n    const touch = ev.touches[0];\n    if (touch) {\n      this._initialTouchX = touch.clientX;\n    }\n  };\n\n  private _onTouchMove = (ev: React.TouchEvent<HTMLDivElement>) => {\n    const isRtl = getRTL();\n    const touch = ev.touches[0];\n    if (touch && this._initialTouchX !== undefined && touch.clientX !== this._initialTouchX) {\n      if ((touch.clientX - this._initialTouchX) * (isRtl ? -1 : 1) < 0) {\n        // swipe right\n        this._onSelectNextDateRange();\n      } else {\n        // swipe left\n        this._onSelectPrevDateRange();\n      }\n      this._initialTouchX = undefined;\n    }\n  };\n\n  private _createPreviousWeekAriaLabel = () => {\n    const { strings, showFullMonth, firstDayOfWeek } = this.props;\n    const { navigatedDate } = this.state;\n\n    let ariaLabel = undefined;\n    if (showFullMonth && strings.prevMonthAriaLabel) {\n      ariaLabel = strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate!, -1).getMonth()];\n    } else if (!showFullMonth && strings.prevWeekAriaLabel) {\n      const firstDayOfPreviousWeek = getStartDateOfWeek(addDays(navigatedDate!, -7), firstDayOfWeek!);\n      const lastDayOfPreviousWeek = addDays(firstDayOfPreviousWeek, 6);\n      ariaLabel =\n        strings.prevWeekAriaLabel + ' ' + this._formatDateRange(firstDayOfPreviousWeek, lastDayOfPreviousWeek);\n    }\n    return ariaLabel;\n  };\n\n  private _createNextWeekAriaLabel = () => {\n    const { strings, showFullMonth, firstDayOfWeek } = this.props;\n    const { navigatedDate } = this.state;\n\n    let ariaLabel = undefined;\n    if (showFullMonth && strings.nextMonthAriaLabel) {\n      ariaLabel = strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate!, 1).getMonth()];\n    } else if (!showFullMonth && strings.nextWeekAriaLabel) {\n      const firstDayOfNextWeek = getStartDateOfWeek(addDays(navigatedDate!, 7), firstDayOfWeek!);\n      const lastDayOfNextWeek = addDays(firstDayOfNextWeek, 6);\n      ariaLabel = strings.nextWeekAriaLabel + ' ' + this._formatDateRange(firstDayOfNextWeek, lastDayOfNextWeek);\n    }\n    return ariaLabel;\n  };\n\n  private _formatDateRange = (startDate: Date, endDate: Date) => {\n    const { dateTimeFormatter, strings } = this.props;\n    return `${dateTimeFormatter?.formatMonthDayYear(startDate, strings)} - ${dateTimeFormatter?.formatMonthDayYear(\n      endDate,\n      strings,\n    )}`;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}