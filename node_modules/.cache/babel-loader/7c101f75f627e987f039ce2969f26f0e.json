{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nvar getClassNames = classNamesFunction();\n\nvar GroupHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupHeaderBase, _super);\n\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onToggleCollapse = _a.onToggleCollapse,\n          isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n\n      if (!ev.defaultPrevented) {\n        // eslint-disable-next-line deprecation/deprecation\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme); // eslint-disable-next-line deprecation/deprecation\n\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onToggleSelectGroupClick = function (ev) {\n      var _a = _this.props,\n          onToggleSelectGroup = _a.onToggleSelectGroup,\n          group = _a.group;\n\n      if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderClick = _a.onGroupHeaderClick,\n          onToggleSelectGroup = _a.onToggleSelectGroup;\n\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      } else if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n    };\n\n    _this._onRenderTitle = function (props) {\n      var group = props.group,\n          ariaColSpan = props.ariaColSpan;\n\n      if (!group) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        id: _this._id,\n        role: \"gridcell\",\n        \"aria-colspan\": ariaColSpan\n      }, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n\n    _this._id = getId('GroupHeader');\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n\n    return previousState;\n  };\n\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        group = _a.group,\n        _b = _a.groupLevel,\n        groupLevel = _b === void 0 ? 0 : _b,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        loadingText = _a.loadingText,\n        // eslint-disable-next-line deprecation/deprecation\n    _c = _a.isSelected,\n        // eslint-disable-next-line deprecation/deprecation\n    isSelected = _c === void 0 ? false : _c,\n        _d = _a.selected,\n        selected = _d === void 0 ? false : _d,\n        indentWidth = _a.indentWidth,\n        _e = _a.onRenderTitle,\n        onRenderTitle = _e === void 0 ? this._onRenderTitle : _e,\n        onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n        _f = _a.isCollapsedGroupSelectVisible,\n        isCollapsedGroupSelectVisible = _f === void 0 ? true : _f,\n        expandButtonProps = _a.expandButtonProps,\n        expandButtonIcon = _a.expandButtonIcon,\n        selectAllButtonProps = _a.selectAllButtonProps,\n        theme = _a.theme,\n        styles = _a.styles,\n        className = _a.className,\n        compact = _a.compact,\n        ariaPosInSet = _a.ariaPosInSet,\n        ariaSetSize = _a.ariaSetSize,\n        ariaRowIndex = _a.ariaRowIndex,\n        useFastIcons = _a.useFastIcons;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _g = this.state,\n        isCollapsed = _g.isCollapsed,\n        isLoadingVisible = _g.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      onClick: this._onHeaderClick,\n      role: \"row\",\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-rowindex\": ariaRowIndex,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel,\n      \"aria-labelledby\": group.ariaLabel ? undefined : this._id,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-selected\": canSelectGroup ? currentlySelected : undefined,\n      \"aria-level\": groupLevel + 1\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      id: this._id + \"-check\",\n      \"aria-checked\": currentlySelected,\n      \"aria-labelledby\": this._id + \"-check \" + this._id,\n      \"data-selection-toggle\": true,\n      onClick: this._onToggleSelectGroupClick\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) : // To make the group header align properly with the column headers, this spacer\n    // needs to be the same width as the check cell in the column header.\n    selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: CHECK_CELL_WIDTH,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\n\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}