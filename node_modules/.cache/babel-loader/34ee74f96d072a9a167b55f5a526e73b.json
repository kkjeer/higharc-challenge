{"ast":null,"code":"import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\n\nexport var getDayGrid = function (options) {\n  var selectedDate = options.selectedDate,\n      dateRangeType = options.dateRangeType,\n      firstDayOfWeek = options.firstDayOfWeek,\n      today = options.today,\n      minDate = options.minDate,\n      maxDate = options.maxDate,\n      weeksToShow = options.weeksToShow,\n      workWeekDays = options.workWeekDays,\n      daysToSelectInDayView = options.daysToSelectInDayView,\n      restrictedDates = options.restrictedDates,\n      markedDays = options.markedDays;\n  var restrictedDateOptions = {\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates\n  };\n  var todaysDate = today || new Date();\n  var navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n  var date;\n\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n\n  var weeks = []; // Cycle the date backwards to get to the first day of the week.\n\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  } // add the transition week as last week of previous range\n\n\n  date = addDays(date, -DAYS_IN_WEEK); // a flag to indicate whether all days of the week are outside the month\n\n  var isAllDaysOfWeekOutOfMonth = false; // in work week view if the days aren't contiguous we use week view instead\n\n  var selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n  var selectedDates = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  var shouldGetWeeks = true;\n\n  for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    var week = [];\n    isAllDaysOfWeekOutOfMonth = true;\n\n    var _loop_1 = function (dayIndex) {\n      var originalDate = new Date(date.getTime());\n      var dayInfo = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some(function (markedDay) {\n          return compareDates(originalDate, markedDay);\n        })) || false\n      };\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    };\n\n    for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      _loop_1(dayIndex);\n    } // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n\n\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0; // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n\n    weeks.push(week);\n  }\n\n  return weeks;\n};","map":{"version":3,"sources":["dateGrid/getDayGrid.ts"],"names":[],"mappings":"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","sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}