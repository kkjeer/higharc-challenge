{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\n\nvar Sticky =\n/** @class */\nfunction (_super) {\n  __extends(Sticky, _super);\n\n  function Sticky(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._stickyContentTop = React.createRef();\n    _this._stickyContentBottom = React.createRef();\n    _this._nonStickyContent = React.createRef();\n    _this._placeHolder = React.createRef();\n\n    _this.syncScroll = function (container) {\n      var nonStickyContent = _this.nonStickyContent;\n\n      if (nonStickyContent && _this.props.isScrollSynced) {\n        nonStickyContent.scrollLeft = container.scrollLeft;\n      }\n    };\n\n    _this._getContext = function () {\n      return _this.context;\n    };\n\n    _this._onScrollEvent = function (container, footerStickyContainer) {\n      if (_this.root && _this.nonStickyContent) {\n        var distanceFromTop = _this._getNonStickyDistanceFromTop(container);\n\n        var isStickyTop = false;\n        var isStickyBottom = false;\n\n        if (_this.canStickyTop) {\n          var distanceToStickTop = distanceFromTop - _this._getStickyDistanceFromTop();\n\n          isStickyTop = distanceToStickTop < container.scrollTop;\n        } // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n        // from the top of the pane\n\n\n        if (_this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n          isStickyBottom = distanceFromTop - Math.floor(container.scrollTop) >= _this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n        }\n\n        if (document.activeElement && _this.nonStickyContent.contains(document.activeElement) && (_this.state.isStickyTop !== isStickyTop || _this.state.isStickyBottom !== isStickyBottom)) {\n          _this._activeElement = document.activeElement;\n        } else {\n          _this._activeElement = undefined;\n        }\n\n        _this.setState({\n          isStickyTop: _this.canStickyTop && isStickyTop,\n          isStickyBottom: isStickyBottom,\n          distanceFromTop: distanceFromTop\n        });\n      }\n    };\n\n    _this._getStickyDistanceFromTop = function () {\n      var distance = 0;\n\n      if (_this.stickyContentTop) {\n        distance = _this.stickyContentTop.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getStickyDistanceFromTopForFooter = function (container, footerStickyVisibleContainer) {\n      var distance = 0;\n\n      if (_this.stickyContentBottom) {\n        distance = container.clientHeight - footerStickyVisibleContainer.offsetHeight + _this.stickyContentBottom.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getNonStickyDistanceFromTop = function (container) {\n      var distance = 0;\n      var currElem = _this.root;\n\n      if (currElem) {\n        while (currElem && currElem.offsetParent !== container) {\n          distance += currElem.offsetTop;\n          currElem = currElem.offsetParent;\n        }\n\n        if (currElem && currElem.offsetParent === container) {\n          distance += currElem.offsetTop;\n        }\n      }\n\n      return distance;\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined\n    };\n    _this._activeElement = undefined;\n    return _this;\n  }\n\n  Object.defineProperty(Sticky.prototype, \"root\", {\n    get: function () {\n      return this._root.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"placeholder\", {\n    get: function () {\n      return this._placeHolder.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentTop\", {\n    get: function () {\n      return this._stickyContentTop.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentBottom\", {\n    get: function () {\n      return this._stickyContentBottom.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"nonStickyContent\", {\n    get: function () {\n      return this._nonStickyContent.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyTop\", {\n    get: function () {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyBottom\", {\n    get: function () {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Sticky.prototype.componentDidMount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  };\n\n  Sticky.prototype.componentWillUnmount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  };\n\n  Sticky.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    var _a = this.state,\n        isStickyBottom = _a.isStickyBottom,\n        isStickyTop = _a.isStickyTop,\n        distanceFromTop = _a.distanceFromTop;\n    var syncScroll = false;\n\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true\n      /*sortAgain*/\n      );\n      syncScroll = true;\n    }\n\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  };\n\n  Sticky.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom,\n        distanceFromTop = _a.distanceFromTop;\n    return isStickyTop !== nextState.isStickyTop || isStickyBottom !== nextState.isStickyBottom || this.props.stickyPosition !== nextProps.stickyPosition || this.props.children !== nextProps.children || distanceFromTop !== nextState.distanceFromTop || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) || _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder);\n  };\n\n  Sticky.prototype.render = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n    var _b = this.props,\n        stickyClassName = _b.stickyClassName,\n        children = _b.children;\n\n    if (!this.context.scrollablePane) {\n      return React.createElement(\"div\", null, this.props.children);\n    }\n\n    return React.createElement(\"div\", {\n      ref: this._root\n    }, this.canStickyTop && React.createElement(\"div\", {\n      ref: this._stickyContentTop,\n      style: {\n        pointerEvents: isStickyTop ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyTop)\n    })), this.canStickyBottom && React.createElement(\"div\", {\n      ref: this._stickyContentBottom,\n      style: {\n        pointerEvents: isStickyBottom ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyBottom)\n    })), React.createElement(\"div\", {\n      style: this._getNonStickyPlaceholderHeightAndWidth(),\n      ref: this._placeHolder\n    }, (isStickyTop || isStickyBottom) && React.createElement(\"span\", {\n      style: hiddenContentStyle\n    }, children), React.createElement(\"div\", {\n      ref: this._nonStickyContent,\n      className: isStickyTop || isStickyBottom ? stickyClassName : undefined,\n      style: this._getContentStyles(isStickyTop || isStickyBottom)\n    }, children)));\n  };\n\n  Sticky.prototype.addSticky = function (stickyContent) {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.resetSticky = function () {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.setDistanceFromTop = function (container) {\n    var distanceFromTop = this._getNonStickyDistanceFromTop(container);\n\n    this.setState({\n      distanceFromTop: distanceFromTop\n    });\n  };\n\n  Sticky.prototype._getContentStyles = function (isSticky) {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : ''\n    };\n  };\n\n  Sticky.prototype._getStickyPlaceholderHeight = function (isSticky) {\n    var height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height\n    };\n  };\n\n  Sticky.prototype._getNonStickyPlaceholderHeightAndWidth = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n\n    if (isStickyTop || isStickyBottom) {\n      var height = 0;\n      var width = 0; // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight; // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n\n        width = this.nonStickyContent.firstElementChild.scrollWidth + (this.nonStickyContent.firstElementChild.offsetWidth - this.nonStickyContent.firstElementChild.clientWidth);\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    } else {\n      return {};\n    }\n  }; // Gets background of nearest parent element that has a declared background-color attribute\n\n\n  Sticky.prototype._getBackground = function () {\n    if (!this.root) {\n      return undefined;\n    }\n\n    var curr = this.root;\n\n    while (window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' || window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent') {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  };\n\n  Sticky.defaultProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true\n  };\n  Sticky.contextType = ScrollablePaneContext;\n  return Sticky;\n}(React.Component);\n\nexport { Sticky };\n\nfunction _isOffsetHeightDifferent(a, b) {\n  return a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight;\n}","map":{"version":3,"sources":["components/Sticky/Sticky.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\nimport type { IScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport type { IStickyProps } from './Sticky.types';\n\nexport interface IStickyState {\n  isStickyTop: boolean;\n  isStickyBottom: boolean;\n  distanceFromTop?: number;\n}\n\nexport class Sticky extends React.Component<IStickyProps, IStickyState> {\n  public static defaultProps: IStickyProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true,\n  };\n\n  public static contextType = ScrollablePaneContext;\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _stickyContentTop = React.createRef<HTMLDivElement>();\n  private _stickyContentBottom = React.createRef<HTMLDivElement>();\n  private _nonStickyContent = React.createRef<HTMLDivElement>();\n  private _placeHolder = React.createRef<HTMLDivElement>();\n  private _activeElement: HTMLElement | undefined;\n\n  constructor(props: IStickyProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined,\n    };\n    this._activeElement = undefined;\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get placeholder(): HTMLDivElement | null {\n    return this._placeHolder.current;\n  }\n\n  public get stickyContentTop(): HTMLDivElement | null {\n    return this._stickyContentTop.current;\n  }\n\n  public get stickyContentBottom(): HTMLDivElement | null {\n    return this._stickyContentBottom.current;\n  }\n\n  public get nonStickyContent(): HTMLDivElement | null {\n    return this._nonStickyContent.current;\n  }\n\n  public get canStickyTop(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header\n    );\n  }\n\n  public get canStickyBottom(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer\n    );\n  }\n\n  public syncScroll = (container: HTMLElement): void => {\n    const { nonStickyContent } = this;\n\n    if (nonStickyContent && this.props.isScrollSynced) {\n      nonStickyContent.scrollLeft = container.scrollLeft;\n    }\n  };\n\n  public componentDidMount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  }\n\n  public componentWillUnmount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  }\n\n  public componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    const { isStickyBottom, isStickyTop, distanceFromTop } = this.state;\n    let syncScroll: boolean = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    const { isStickyTop, isStickyBottom, distanceFromTop } = this.state;\n\n    return (isStickyTop !== nextState.isStickyTop ||\n      isStickyBottom !== nextState.isStickyBottom ||\n      this.props.stickyPosition !== nextProps.stickyPosition ||\n      this.props.children !== nextProps.children ||\n      distanceFromTop !== nextState.distanceFromTop ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder)) as boolean;\n  }\n\n  public render(): JSX.Element {\n    const { isStickyTop, isStickyBottom } = this.state;\n    const { stickyClassName, children } = this.props;\n\n    if (!this.context.scrollablePane) {\n      return <div>{this.props.children}</div>;\n    }\n\n    return (\n      <div ref={this._root}>\n        {this.canStickyTop && (\n          <div ref={this._stickyContentTop} style={{ pointerEvents: isStickyTop ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyTop)} />\n          </div>\n        )}\n        {this.canStickyBottom && (\n          <div ref={this._stickyContentBottom} style={{ pointerEvents: isStickyBottom ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyBottom)} />\n          </div>\n        )}\n        <div style={this._getNonStickyPlaceholderHeightAndWidth()} ref={this._placeHolder}>\n          {(isStickyTop || isStickyBottom) && <span style={hiddenContentStyle as any}>{children}</span>}\n          <div\n            ref={this._nonStickyContent}\n            className={isStickyTop || isStickyBottom ? stickyClassName : undefined}\n            style={this._getContentStyles(isStickyTop || isStickyBottom)}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public addSticky(stickyContent: HTMLDivElement): void {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public resetSticky(): void {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public setDistanceFromTop(container: HTMLDivElement): void {\n    const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({ distanceFromTop: distanceFromTop });\n  }\n\n  private _getContext = (): IScrollablePaneContext => this.context;\n\n  private _getContentStyles(isSticky: boolean): React.CSSProperties {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : '',\n    };\n  }\n\n  private _getStickyPlaceholderHeight(isSticky: boolean): React.CSSProperties {\n    const height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height,\n    };\n  }\n\n  private _getNonStickyPlaceholderHeightAndWidth(): React.CSSProperties {\n    const { isStickyTop, isStickyBottom } = this.state;\n    if (isStickyTop || isStickyBottom) {\n      let height = 0;\n      let width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width =\n          this.nonStickyContent.firstElementChild.scrollWidth +\n          ((this.nonStickyContent.firstElementChild as HTMLElement).offsetWidth -\n            this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height: height,\n        width: width,\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private _onScrollEvent = (container: HTMLElement, footerStickyContainer: HTMLElement): void => {\n    if (this.root && this.nonStickyContent) {\n      const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n      let isStickyTop = false;\n      let isStickyBottom = false;\n\n      if (this.canStickyTop) {\n        const distanceToStickTop = distanceFromTop - this._getStickyDistanceFromTop();\n        isStickyTop = distanceToStickTop < container.scrollTop;\n      }\n\n      // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n      // from the top of the pane\n      if (this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n        isStickyBottom =\n          distanceFromTop - Math.floor(container.scrollTop) >=\n          this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n      }\n\n      if (\n        document.activeElement &&\n        this.nonStickyContent.contains(document.activeElement) &&\n        (this.state.isStickyTop !== isStickyTop || this.state.isStickyBottom !== isStickyBottom)\n      ) {\n        this._activeElement = document.activeElement as HTMLElement;\n      } else {\n        this._activeElement = undefined;\n      }\n\n      this.setState({\n        isStickyTop: this.canStickyTop && isStickyTop,\n        isStickyBottom: isStickyBottom,\n        distanceFromTop: distanceFromTop,\n      });\n    }\n  };\n\n  private _getStickyDistanceFromTop = (): number => {\n    let distance = 0;\n    if (this.stickyContentTop) {\n      distance = this.stickyContentTop.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getStickyDistanceFromTopForFooter = (\n    container: HTMLElement,\n    footerStickyVisibleContainer: HTMLElement,\n  ): number => {\n    let distance = 0;\n    if (this.stickyContentBottom) {\n      distance =\n        container.clientHeight - footerStickyVisibleContainer.offsetHeight + this.stickyContentBottom.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getNonStickyDistanceFromTop = (container: HTMLElement): number => {\n    let distance = 0;\n    let currElem = this.root;\n\n    if (currElem) {\n      while (currElem && currElem.offsetParent !== container) {\n        distance += currElem.offsetTop;\n        currElem = currElem.offsetParent as HTMLDivElement;\n      }\n\n      if (currElem && currElem.offsetParent === container) {\n        distance += currElem.offsetTop;\n      }\n    }\n    return distance;\n  };\n\n  // Gets background of nearest parent element that has a declared background-color attribute\n  private _getBackground(): string | undefined {\n    if (!this.root) {\n      return undefined;\n    }\n\n    let curr: HTMLElement = this.root;\n\n    while (\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' ||\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent'\n    ) {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  }\n}\n\nfunction _isOffsetHeightDifferent(a: React.RefObject<HTMLElement>, b: React.RefObject<HTMLDivElement>): boolean {\n  return (a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight) as boolean;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}