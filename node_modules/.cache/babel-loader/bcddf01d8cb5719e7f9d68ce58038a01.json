{"ast":null,"code":"import { TimeConstants } from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\n\nexport var addMinutes = function (date, minutes) {\n  var result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\n\nexport var ceilMinuteToIncrement = function (date, increments) {\n  var result = new Date(date.getTime());\n  var minute = result.getMinutes();\n\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    var times = TimeConstants.MinutesInOneHour / increments;\n\n    for (var i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n\n    result.setMinutes(minute);\n  }\n\n  return result;\n};\n/**\n * Returns a date object from the selected time.\n * @param useHour12 - If the time picker uses 12 or 24 hour formatting\n * @param baseDate - The baseline date to calculate the offset of the selected time\n * @param selectedTime - A string representing the user selected time\n * @returns A new date object offset from the baseDate using the selected time.\n */\n\nexport var getDateFromTimeSelection = function (useHour12, baseDate, selectedTime) {\n  var _a = TimeConstants.TimeFormatRegex.exec(selectedTime) || [],\n      selectedHours = _a[1],\n      selectedMinutes = _a[2],\n      selectedSeconds = _a[3],\n      selectedAp = _a[4];\n\n  var hours = +selectedHours;\n  var minutes = +selectedMinutes;\n  var seconds = selectedSeconds ? +selectedSeconds : 0;\n\n  if (useHour12 && selectedAp) {\n    if (selectedAp.toLowerCase() === 'pm' && hours !== TimeConstants.OffsetTo24HourFormat) {\n      hours += TimeConstants.OffsetTo24HourFormat;\n    } else if (selectedAp.toLowerCase() === 'am' && hours === TimeConstants.OffsetTo24HourFormat) {\n      hours -= TimeConstants.OffsetTo24HourFormat;\n    }\n  }\n\n  var hoursOffset;\n\n  if (baseDate.getHours() > hours || baseDate.getHours() === hours && baseDate.getMinutes() > minutes) {\n    hoursOffset = TimeConstants.HoursInOneDay - baseDate.getHours() + hours;\n  } else {\n    hoursOffset = Math.abs(baseDate.getHours() - hours);\n  }\n\n  var offset = TimeConstants.MillisecondsIn1Sec * TimeConstants.MinutesInOneHour * hoursOffset * TimeConstants.SecondsInOneMinute + seconds * TimeConstants.MillisecondsIn1Sec;\n  var date = new Date(baseDate.getTime() + offset);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n  return date;\n};","map":{"version":3,"sources":["timeMath/timeMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\nexport const addMinutes = (date: Date, minutes: number): Date => {\n  const result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\nexport const ceilMinuteToIncrement = (date: Date, increments: number) => {\n  const result = new Date(date.getTime());\n  let minute = result.getMinutes();\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    const times = TimeConstants.MinutesInOneHour / increments;\n    for (let i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n    result.setMinutes(minute);\n  }\n  return result;\n};\n\n/**\n * Returns a date object from the selected time.\n * @param useHour12 - If the time picker uses 12 or 24 hour formatting\n * @param baseDate - The baseline date to calculate the offset of the selected time\n * @param selectedTime - A string representing the user selected time\n * @returns A new date object offset from the baseDate using the selected time.\n */\nexport const getDateFromTimeSelection = (useHour12: boolean, baseDate: Date, selectedTime: string): Date => {\n  const [, selectedHours, selectedMinutes, selectedSeconds, selectedAp] =\n    TimeConstants.TimeFormatRegex.exec(selectedTime) || [];\n\n  let hours = +selectedHours;\n  const minutes = +selectedMinutes;\n  const seconds = selectedSeconds ? +selectedSeconds : 0;\n\n  if (useHour12 && selectedAp) {\n    if (selectedAp.toLowerCase() === 'pm' && hours !== TimeConstants.OffsetTo24HourFormat) {\n      hours += TimeConstants.OffsetTo24HourFormat;\n    } else if (selectedAp.toLowerCase() === 'am' && hours === TimeConstants.OffsetTo24HourFormat) {\n      hours -= TimeConstants.OffsetTo24HourFormat;\n    }\n  }\n\n  let hoursOffset;\n  if (baseDate.getHours() > hours || (baseDate.getHours() === hours && baseDate.getMinutes() > minutes)) {\n    hoursOffset = TimeConstants.HoursInOneDay - baseDate.getHours() + hours;\n  } else {\n    hoursOffset = Math.abs(baseDate.getHours() - hours);\n  }\n\n  const offset =\n    TimeConstants.MillisecondsIn1Sec * TimeConstants.MinutesInOneHour * hoursOffset * TimeConstants.SecondsInOneMinute +\n    seconds * TimeConstants.MillisecondsIn1Sec;\n\n  const date = new Date(baseDate.getTime() + offset);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n\n  return date;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}