{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { DropdownMenuItemType } from '../Dropdown.types';\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\n\nvar DropdownSizePosCache =\n/** @class */\nfunction () {\n  function DropdownSizePosCache() {\n    this._size = 0;\n  }\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n\n\n  DropdownSizePosCache.prototype.updateOptions = function (options) {\n    var displayOnlyOptionsCache = [];\n    var size = 0;\n\n    for (var i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = __spreadArray([], options);\n  };\n\n  Object.defineProperty(DropdownSizePosCache.prototype, \"optionSetSize\", {\n    /**\n     * The size of all the selectable options.\n     */\n    get: function () {\n      return this._size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DropdownSizePosCache.prototype, \"cachedOptions\", {\n    /**\n     * The chached options array.\n     */\n    get: function () {\n      return this._cachedOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n\n  DropdownSizePosCache.prototype.positionInSet = function (index) {\n    if (index === undefined) {\n      return undefined;\n    } // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n\n\n    var offset = 0;\n\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(\"Unexpected: Option at index \" + index + \" is not a selectable element.\");\n    }\n\n    return index - offset + 1;\n  };\n\n  return DropdownSizePosCache;\n}();\n\nexport { DropdownSizePosCache };","map":{"version":3,"sources":["components/Dropdown/utilities/DropdownSizePosCache.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,QAAqC,mBAArC;AAGA;;;;;;;;;AASG;;AACH,IAAA,oBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,oBAAA,GAAA;IAGU,KAAA,KAAA,GAAQ,CAAR;EA0DT;EAxDC;;AAEG;;;EACI,oBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAA+C;IAC7C,IAAM,uBAAuB,GAAG,EAAhC;IACA,IAAI,IAAI,GAAG,CAAX;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;MACvC,IAAI,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,KAAwB,oBAAoB,CAAC,OAA7C,IAAwD,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,KAAwB,oBAAoB,CAAC,MAAzG,EAAiH;QAC/G,uBAAuB,CAAC,IAAxB,CAA6B,CAA7B;MACD,CAFD,MAEO,IAAI,CAAC,OAAO,CAAC,CAAD,CAAP,CAAW,MAAhB,EAAwB;QAC7B,IAAI;MACL;IACF;;IAED,KAAK,KAAL,GAAa,IAAb;IACA,KAAK,wBAAL,GAAgC,uBAAhC;IACA,KAAK,cAAL,GAAmB,aAAA,CAAA,EAAA,EAAO,OAAP,CAAnB;EACD,CAdM;;EAmBP,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;IAHxB;;AAEG;SACH,YAAA;MACE,OAAO,KAAK,KAAZ;IACD,CAFuB;qBAAA;;EAAA,CAAxB;EAOA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;IAHxB;;AAEG;SACH,YAAA;MACE,OAAO,KAAK,cAAZ;IACD,CAFuB;qBAAA;;EAAA,CAAxB;EAIA;;;;AAIG;;EACI,oBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAA8C;IAC5C,IAAI,KAAK,KAAK,SAAd,EAAyB;MACvB,OAAO,SAAP;IACD,CAH2C,CAK5C;IACA;;;IACA,IAAI,MAAM,GAAG,CAAb;;IACA,OAAO,KAAK,GAAG,KAAK,wBAAL,CAA8B,MAA9B,CAAf,EAAsD;MACpD,MAAM;IACP;;IAED,IAAI,KAAK,wBAAL,CAA8B,MAA9B,MAA0C,KAA9C,EAAqD;MACnD,MAAM,IAAI,KAAJ,CAAU,iCAA+B,KAA/B,GAAoC,+BAA9C,CAAN;IACD;;IAED,OAAO,KAAK,GAAG,MAAR,GAAiB,CAAxB;EACD,CAjBM;;EAkBT,OAAA,oBAAA;AAAC,CA7DD,EAAA","sourcesContent":["import { DropdownMenuItemType } from '../Dropdown.types';\nimport type { IDropdownOption } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _cachedOptions: IDropdownOption[];\n  private _displayOnlyOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = [...options];\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * The chached options array.\n   */\n  public get cachedOptions(): IDropdownOption[] {\n    return this._cachedOptions;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    return index - offset + 1;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}