{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nexport var LayerHost = function (props) {\n  var className = props.className;\n  var layerHostId = React.useState(function () {\n    return getId();\n  })[0];\n  var _a = props.id,\n      hostId = _a === void 0 ? layerHostId : _a;\n  var layerHostRef = React.useRef({\n    hostId: hostId,\n    rootRef: React.useRef(null),\n    notifyLayersChanged: function () {// Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    }\n  });\n  React.useImperativeHandle(props.componentRef, function () {\n    return layerHostRef.current;\n  });\n  React.useEffect(function () {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId); // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n  useUnmount(function () {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n  return React.createElement(\"div\", __assign({}, props, {\n    className: css('ms-LayerHost', className),\n    ref: layerHostRef.current.rootRef\n  }));\n};","map":{"version":3,"sources":["components/Layer/LayerHost.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,UAAT,QAA2B,uBAA3B;AACA,SAAS,GAAT,EAAc,KAAd,QAA2B,iBAA3B;AACA,SAAS,iBAAT,EAA4B,iBAA5B,EAA+C,mBAA/C,QAA0E,sBAA1E;AAGA,OAAO,IAAM,SAAS,GAA6C,UAAA,KAAA,EAAK;EAC9D,IAAA,SAAS,GAAK,KAAK,CAAV,SAAT;EAED,IAAA,WAAW,GAAI,KAAK,CAAC,QAAN,CAAe,YAAA;IAAM,OAAA,KAAA,EAAA;EAAO,CAA5B,EAAJ,CAAI,CAAf;EAEC,IAAA,EAAA,GAA6B,KAAK,CAAV,EAAxB;EAAA,IAAI,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,WAAH,GAAc,EAAxB;EAER,IAAM,YAAY,GAAG,KAAK,CAAC,MAAN,CAAyB;IAC5C,MAAM,EAAA,MADsC;IAE5C,OAAO,EAAE,KAAK,CAAC,MAAN,CAAoC,IAApC,CAFmC;IAG5C,mBAAmB,EAAE,YAAA,CACnB;IACD;EAL2C,CAAzB,CAArB;EAQA,KAAK,CAAC,mBAAN,CAA0B,KAAK,CAAC,YAAhC,EAA8C,YAAA;IAAM,OAAA,YAAY,CAAZ,OAAA;EAAoB,CAAxE;EAEA,KAAK,CAAC,SAAN,CAAgB,YAAA;IACd,iBAAiB,CAAC,MAAD,EAAS,YAAY,CAAC,OAAtB,CAAjB;IACA,iBAAiB,CAAC,MAAD,CAAjB,CAFc,CAGd;EACD,CAJD,EAIG,EAJH;EAMA,UAAU,CAAC,YAAA;IACT,mBAAmB,CAAC,MAAD,EAAS,YAAY,CAAC,OAAtB,CAAnB;IACA,iBAAiB,CAAC,MAAD,CAAjB;EACD,CAHS,CAAV;EAKA,OAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAS,KAAT,EAAc;IAAE,SAAS,EAAE,GAAG,CAAC,cAAD,EAAiB,SAAjB,CAAhB;IAA6C,GAAG,EAAE,YAAY,CAAC,OAAb,CAAqB;EAAvE,CAAd,CAAA,CAAP;AACD,CA7BM","sourcesContent":["import * as React from 'react';\nimport { useUnmount } from '@fluentui/react-hooks';\nimport { css, getId } from '../../Utilities';\nimport { notifyHostChanged, registerLayerHost, unregisterLayerHost } from './Layer.notification';\nimport type { ILayerHost, ILayerHostProps } from './LayerHost.types';\n\nexport const LayerHost: React.FunctionComponent<ILayerHostProps> = props => {\n  const { className } = props;\n\n  const [layerHostId] = React.useState(() => getId());\n\n  const { id: hostId = layerHostId } = props;\n\n  const layerHostRef = React.useRef<ILayerHost>({\n    hostId,\n    rootRef: React.useRef<HTMLDivElement | null>(null),\n    notifyLayersChanged: () => {\n      // Nothing, since the default implementation of Layer Host does not need to react to layer changes.\n    },\n  });\n\n  React.useImperativeHandle(props.componentRef, () => layerHostRef.current);\n\n  React.useEffect(() => {\n    registerLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useUnmount(() => {\n    unregisterLayerHost(hostId, layerHostRef.current);\n    notifyHostChanged(hostId);\n  });\n\n  return <div {...props} className={css('ms-LayerHost', className)} ref={layerHostRef.current.rootRef} />;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}