{"ast":null,"code":"var _a;\n\nimport { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nvar ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\nvar COMPONENT_NAME = 'MessageBar';\nvar getClassNames = classNamesFunction();\n\nvar getAnnouncementPriority = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n\n  return 'polite';\n};\n\nvar getRole = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n\n  return 'status';\n};\n\nexport var MessageBarBase = React.forwardRef(function (props, ref) {\n  var _a = useBoolean(false),\n      expandSingleLine = _a[0],\n      toggleExpandSingleLine = _a[1].toggle;\n\n  var labelId = useId('MessageBar');\n  var actions = props.actions,\n      className = props.className,\n      children = props.children,\n      // eslint-disable-next-line deprecation/deprecation\n  overflowButtonAriaLabel = props.overflowButtonAriaLabel,\n      dismissIconProps = props.dismissIconProps,\n      styles = props.styles,\n      theme = props.theme,\n      _b = props.messageBarType,\n      messageBarType = _b === void 0 ? MessageBarType.info : _b,\n      _c = props.onDismiss,\n      onDismiss = _c === void 0 ? undefined : _c,\n      _d = props.isMultiline,\n      isMultiline = _d === void 0 ? true : _d,\n      truncated = props.truncated,\n      dismissButtonAriaLabel = props.dismissButtonAriaLabel,\n      messageBarIconProps = props.messageBarIconProps,\n      role = props.role,\n      _e = props.delayedRender,\n      delayedRender = _e === void 0 ? true : _e,\n      expandButtonProps = props.expandButtonProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties, ['className', 'role']);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className: className\n  });\n  var expandIconProps = {\n    iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n  };\n  var regionProps = actions || onDismiss ? {\n    'aria-describedby': labelId,\n    role: 'region'\n  } : {};\n  var actionsDiv = actions ? React.createElement(\"div\", {\n    className: classNames.actions\n  }, actions) : null;\n  var dismissButton = onDismiss ? React.createElement(IconButton, {\n    disabled: false,\n    className: classNames.dismissal,\n    onClick: onDismiss,\n    iconProps: dismissIconProps ? dismissIconProps : {\n      iconName: 'Clear'\n    },\n    title: dismissButtonAriaLabel,\n    ariaLabel: dismissButtonAriaLabel\n  }) : null;\n  return React.createElement(\"div\", __assign({\n    ref: ref,\n    className: classNames.root\n  }, regionProps), React.createElement(\"div\", {\n    className: classNames.content\n  }, React.createElement(\"div\", {\n    className: classNames.iconContainer,\n    \"aria-hidden\": true\n  }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n    className: css(classNames.icon, messageBarIconProps.className)\n  })) : React.createElement(Icon, {\n    iconName: ICON_MAP[messageBarType],\n    className: classNames.icon\n  })), React.createElement(\"div\", {\n    className: classNames.text,\n    id: labelId,\n    role: role || getRole(messageBarType),\n    \"aria-live\": getAnnouncementPriority(messageBarType)\n  }, React.createElement(\"span\", __assign({\n    className: classNames.innerText\n  }, nativeProps), delayedRender ? React.createElement(DelayedRender, null, React.createElement(\"span\", null, children)) : // this span is probably not necessary, but preserving it for now in case anyone\n  // has styling that expects it to be present\n  React.createElement(\"span\", null, children))),\n  /* singleline expand/collapse button */\n  !isMultiline && !actionsDiv && truncated && React.createElement(\"div\", {\n    className: classNames.expandSingleLine\n  }, React.createElement(IconButton, __assign({\n    disabled: false,\n    className: classNames.expand,\n    onClick: toggleExpandSingleLine,\n    iconProps: expandIconProps,\n    ariaLabel: overflowButtonAriaLabel,\n    \"aria-expanded\": expandSingleLine\n  }, expandButtonProps))), !isMultiline && actionsDiv,\n  /* singleline dismiss */\n  !isMultiline && dismissButton && React.createElement(\"div\", {\n    className: classNames.dismissSingleLine\n  }, dismissButton), isMultiline && dismissButton), isMultiline && actionsDiv);\n});\nMessageBarBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/MessageBar/MessageBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}