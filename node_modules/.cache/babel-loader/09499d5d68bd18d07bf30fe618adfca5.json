{"ast":null,"code":"import { SELECTION_CHANGE, SelectionMode, SELECTION_ITEMS_CHANGE } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n/**\n * {@docCategory Selection}\n */\n\nvar Selection =\n/** @class */\nfunction () {\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  function Selection() {\n    var options = []; // Otherwise, arguments require options with `getKey`.\n\n    for (var _i = 0 // Otherwise, arguments require options with `getKey`.\n    ; _i < arguments.length // Otherwise, arguments require options with `getKey`.\n    ; _i++ // Otherwise, arguments require options with `getKey`.\n    ) {\n      options[_i] = arguments[_i]; // Otherwise, arguments require options with `getKey`.\n    }\n\n    var _a = options[0] || {},\n        onSelectionChanged = _a.onSelectionChanged,\n        onItemsChanged = _a.onItemsChanged,\n        getKey = _a.getKey,\n        _b = _a.canSelectItem,\n        canSelectItem = _b === void 0 ? function () {\n      return true;\n    } : _b,\n        items = _a.items,\n        _c = _a.selectionMode,\n        selectionMode = _c === void 0 ? SelectionMode.multiple : _c;\n\n    this.mode = selectionMode;\n    this._getKey = getKey || defaultGetKey;\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n    this._isModal = false;\n    this.setItems(items || [], true);\n    this.count = this.getSelectedCount();\n  }\n\n  Selection.prototype.canSelectItem = function (item, index) {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  };\n\n  Selection.prototype.getKey = function (item, index) {\n    var key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? \"\" + key : '';\n  };\n\n  Selection.prototype.setChangeEvents = function (isEnabled, suppressChange) {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  };\n\n  Selection.prototype.isModal = function () {\n    return this._isModal;\n  };\n\n  Selection.prototype.setModal = function (isModal) {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  };\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n\n\n  Selection.prototype.setItems = function (items, shouldClear) {\n    if (shouldClear === void 0) {\n      shouldClear = true;\n    }\n\n    var newKeyToIndexMap = {};\n    var newUnselectableIndices = {};\n    var hasSelectionChanged = false;\n    this.setChangeEvents(false); // Reset the unselectable count.\n\n    this._unselectableCount = 0;\n    var haveItemsChanged = false; // Build lookup table for quick selection evaluation.\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (item) {\n        var key = this.getKey(item, i);\n\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    } // Check the exemption list for discrepencies.\n\n\n    var newExemptedIndicies = {};\n    var newExemptedCount = 0;\n\n    for (var indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        var index = Number(indexProperty);\n        var item = this._items[index];\n        var exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        var newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    if (!haveItemsChanged) {\n      for (var _i = 0, _a = Object.keys(this._keyToIndexMap); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n\n    if (hasSelectionChanged) {\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  };\n\n  Selection.prototype.getItems = function () {\n    return this._items;\n  };\n\n  Selection.prototype.getSelection = function () {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n      var items = this._items;\n\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  };\n\n  Selection.prototype.getSelectedCount = function () {\n    return this._isAllSelected ? this._items.length - this._exemptedCount - this._unselectableCount : this._exemptedCount;\n  };\n\n  Selection.prototype.getSelectedIndices = function () {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n      var items = this._items;\n\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  };\n\n  Selection.prototype.getItemIndex = function (key) {\n    var index = this._keyToIndexMap[key];\n    return index !== null && index !== void 0 ? index : -1;\n  };\n\n  Selection.prototype.isRangeSelected = function (fromIndex, count) {\n    if (count === 0) {\n      return false;\n    }\n\n    var endIndex = fromIndex + count;\n\n    for (var i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Selection.prototype.isAllSelected = function () {\n    var selectableCount = this._items.length - this._unselectableCount; // In single mode, we can only have a max of 1 item.\n\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return this.count > 0 && this._isAllSelected && this._exemptedCount === 0 || !this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0;\n  };\n\n  Selection.prototype.isKeySelected = function (key) {\n    var index = this._keyToIndexMap[key];\n    return this.isIndexSelected(index);\n  };\n\n  Selection.prototype.isIndexSelected = function (index) {\n    return !!(this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index] || !this._isAllSelected && this._exemptedIndices[index]);\n  };\n\n  Selection.prototype.setAllSelected = function (isAllSelected) {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  };\n\n  Selection.prototype.setKeySelected = function (key, isSelected, shouldAnchor) {\n    var index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  };\n\n  Selection.prototype.setIndexSelected = function (index, isSelected, shouldAnchor) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    } // Clamp the index.\n\n\n    index = Math.min(Math.max(0, index), this._items.length - 1); // No-op on out of bounds selections.\n\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    var isExempt = this._exemptedIndices[index];\n    var canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      } // Determine if we need to remove the exemption.\n\n\n      if (isExempt && (isSelected && this._isAllSelected || !isSelected && !this._isAllSelected)) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      } // Determine if we need to add the exemption.\n\n\n      if (!isExempt && (isSelected && !this._isAllSelected || !isSelected && this._isAllSelected)) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  };\n\n  Selection.prototype.selectToKey = function (key, clearSelection) {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  };\n\n  Selection.prototype.selectToIndex = function (index, clearSelection) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    var anchorIndex = this._anchoredIndex || 0;\n    var startIndex = Math.min(index, anchorIndex);\n    var endIndex = Math.max(index, anchorIndex);\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  };\n\n  Selection.prototype.toggleAllSelected = function () {\n    this.setAllSelected(!this.isAllSelected());\n  };\n\n  Selection.prototype.toggleKeySelected = function (key) {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  };\n\n  Selection.prototype.toggleIndexSelected = function (index) {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  };\n\n  Selection.prototype.toggleRangeSelected = function (fromIndex, count) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    var isRangeSelected = this.isRangeSelected(fromIndex, count);\n    var endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    for (var i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n\n    this.setChangeEvents(true);\n  };\n\n  Selection.prototype._updateCount = function (preserveModalState) {\n    if (preserveModalState === void 0) {\n      preserveModalState = false;\n    }\n\n    var count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  };\n\n  Selection.prototype._setAllSelected = function (isAllSelected, preserveModalState) {\n    if (preserveModalState === void 0) {\n      preserveModalState = false;\n    }\n\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  };\n\n  Selection.prototype._change = function () {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  };\n\n  return Selection;\n}();\n\nexport { Selection };\n\nfunction defaultGetKey(item, index) {\n  // 0 may be used as a key\n  var _a = (item || {}).key,\n      key = _a === void 0 ? \"\" + index : _a;\n  return key;\n}","map":{"version":3,"sources":["selection/Selection.ts"],"names":[],"mappings":"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","sourcesContent":["import { SELECTION_CHANGE, SelectionMode, SELECTION_ITEMS_CHANGE } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\nimport type { IObjectWithKey, ISelection } from './Selection.types';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  onItemsChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count!: number;\n  public readonly mode!: SelectionMode;\n\n  private _getKey!: (item: TItem, index?: number) => string | number;\n  private _canSelectItem!: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items!: TItem[];\n  private _selectedItems!: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected!: boolean;\n  private _exemptedIndices!: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap!: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _onItemsChanged: (() => void) | undefined;\n  private _hasChanged!: boolean;\n  private _unselectableIndices!: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const {\n      onSelectionChanged,\n      onItemsChanged,\n      getKey,\n      canSelectItem = () => true,\n      items,\n      selectionMode = SelectionMode.multiple,\n    } = options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    let haveItemsChanged = false;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    if (!haveItemsChanged) {\n      for (const key of Object.keys(this._keyToIndexMap)) {\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n\n    if (hasSelectionChanged) {\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public getItemIndex(key: string): number {\n    const index = this._keyToIndexMap[key];\n\n    return index ?? -1;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}