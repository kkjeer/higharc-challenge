{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useConst } from '@fluentui/react-hooks';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement, getDateFromTimeSelection } from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nvar REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nvar REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nvar REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nvar REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\nvar TIME_LOWER_BOUND = 0;\nvar TIME_UPPER_BOUND = 23;\n\nvar getDefaultStrings = function (useHour12, showSeconds) {\n  var hourUnits = useHour12 ? '12-hour' : '24-hour';\n  var timeFormat = \"hh:mm\" + (showSeconds ? ':ss' : '') + (useHour12 ? ' AP' : '');\n  var errorMessageToDisplay = \"Enter a valid time in the \" + hourUnits + \" format: \" + timeFormat;\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay\n  };\n};\n\nexport var TimePicker = function (_a) {\n  var label = _a.label,\n      _b = _a.increments,\n      increments = _b === void 0 ? 30 : _b,\n      _c = _a.showSeconds,\n      showSeconds = _c === void 0 ? false : _c,\n      _d = _a.allowFreeform,\n      allowFreeform = _d === void 0 ? true : _d,\n      _e = _a.useHour12,\n      useHour12 = _e === void 0 ? false : _e,\n      timeRange = _a.timeRange,\n      _f = _a.strings,\n      strings = _f === void 0 ? getDefaultStrings(useHour12, showSeconds) : _f,\n      defaultValue = _a.defaultValue,\n      onChange = _a.onChange,\n      onFormatDate = _a.onFormatDate,\n      onValidateUserInput = _a.onValidateUserInput,\n      rest = __rest(_a, [\"label\", \"increments\", \"showSeconds\", \"allowFreeform\", \"useHour12\", \"timeRange\", \"strings\", \"defaultValue\", \"onChange\", \"onFormatDate\", \"onValidateUserInput\"]);\n\n  var _g = React.useState(''),\n      userText = _g[0],\n      setUserText = _g[1];\n\n  var _h = React.useState(''),\n      errorMessage = _h[0],\n      setErrorMessage = _h[1];\n\n  var optionsCount = getDropdownOptionsCount(increments, timeRange);\n  var initialValue = useConst(defaultValue || new Date());\n  var baseDate = React.useMemo(function () {\n    return generateBaseDate(increments, timeRange, initialValue);\n  }, [increments, timeRange, initialValue]);\n  var timePickerOptions = React.useMemo(function () {\n    var optionsList = Array(optionsCount);\n\n    for (var i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map(function (_, index) {\n      var option = addMinutes(baseDate, increments * index);\n      option.setSeconds(0);\n      var optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText\n      };\n    });\n  }, [baseDate, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  var _j = React.useState(timePickerOptions[0].key),\n      selectedKey = _j[0],\n      setSelectedKey = _j[1];\n\n  var onInputChange = React.useCallback(function (event, option, index, value) {\n    var validateUserInput = function (userInput) {\n      var errorMessageToDisplay = '';\n      var regex;\n\n      if (useHour12) {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n      } else {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n      }\n\n      if (!regex.test(userInput)) {\n        errorMessageToDisplay = strings.invalidInputErrorMessage;\n      }\n\n      return errorMessageToDisplay;\n    };\n\n    var key = option === null || option === void 0 ? void 0 : option.key;\n    var updatedUserText = '';\n    var errorMessageToDisplay = '';\n\n    if (value) {\n      if (allowFreeform && !option) {\n        if (!onFormatDate) {\n          // Validate only if user did not add onFormatDate\n          errorMessageToDisplay = validateUserInput(value);\n        } else {\n          // Use user provided validation if onFormatDate is provided\n          if (onValidateUserInput) {\n            errorMessageToDisplay = onValidateUserInput(value);\n          }\n        }\n      }\n\n      updatedUserText = value;\n    } else if (option) {\n      updatedUserText = option.text;\n    }\n\n    if (onChange && !errorMessageToDisplay) {\n      var selectedTime = value || (option === null || option === void 0 ? void 0 : option.text) || '';\n      var date = getDateFromTimeSelection(useHour12, baseDate, selectedTime);\n      onChange(event, date);\n    }\n\n    setErrorMessage(errorMessageToDisplay);\n    setUserText(updatedUserText);\n    setSelectedKey(key);\n  }, [baseDate, allowFreeform, onChange, onFormatDate, onValidateUserInput, showSeconds, useHour12, strings.invalidInputErrorMessage]);\n\n  var evaluatePressedKey = function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    var charCode = event.charCode;\n\n    if (!onFormatDate && // Only permit input of digits, space, colon, A/P/M characters\n    !(charCode >= KeyCodes.zero && charCode <= KeyCodes.colon || charCode === KeyCodes.space || charCode === KeyCodes.a || charCode === KeyCodes.m || charCode === KeyCodes.p)) {\n      event.preventDefault();\n    }\n  };\n\n  return React.createElement(ComboBox, __assign({}, rest, {\n    allowFreeform: allowFreeform,\n    selectedKey: selectedKey,\n    label: label,\n    errorMessage: errorMessage,\n    options: timePickerOptions,\n    onChange: onInputChange,\n    text: userText,\n    //eslint-disable-next-line\n    onKeyPress: evaluatePressedKey\n  }));\n};\nTimePicker.displayName = 'TimePicker';\n\nvar clampTimeRange = function (timeRange) {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND)\n  };\n};\n\nvar generateBaseDate = function (increments, timeRange, baseDate) {\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    baseDate.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(baseDate, increments);\n};\n\nvar getDropdownOptionsCount = function (increments, timeRange) {\n  var hoursInRange = TimeConstants.HoursInOneDay;\n\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n\n  return Math.floor(TimeConstants.MinutesInOneHour * hoursInRange / increments);\n};","map":{"version":3,"sources":["components/TimePicker/TimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useConst } from '@fluentui/react-hooks';\nimport { KeyCodes } from '../../Utilities';\nimport {\n  TimeConstants,\n  addMinutes,\n  formatTimeString,\n  ceilMinuteToIncrement,\n  getDateFromTimeSelection,\n} from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nimport type { IComboBox, IComboBoxOption } from '../../ComboBox';\nimport type { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):([0-5][0-9]):([0-5][0-9])\\s([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /^((1[0-2]|0?[1-9]):[0-5][0-9]\\s([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  const timeFormat = `hh:mm${showSeconds ? ':ss' : ''}${useHour12 ? ' AP' : ''}`;\n  const errorMessageToDisplay = `Enter a valid time in the ${hourUnits} format: ${timeFormat}`;\n\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay,\n  };\n};\n\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  defaultValue,\n  onChange,\n  onFormatDate,\n  onValidateUserInput,\n  ...rest\n}: ITimePickerProps) => {\n  const [userText, setUserText] = React.useState<string>('');\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const initialValue = useConst(defaultValue || new Date());\n  const baseDate: Date = React.useMemo(() => generateBaseDate(increments, timeRange, initialValue), [\n    increments,\n    timeRange,\n    initialValue,\n  ]);\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    return optionsList.map((_, index) => {\n      const option = addMinutes(baseDate, increments * index);\n      option.setSeconds(0);\n      const optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText,\n      };\n    });\n  }, [baseDate, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined>(timePickerOptions[0].key);\n\n  const onInputChange = React.useCallback(\n    (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string): void => {\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        }\n        return errorMessageToDisplay;\n      };\n\n      const key = option?.key;\n      let updatedUserText = '';\n      let errorMessageToDisplay = '';\n      if (value) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(value);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(value);\n            }\n          }\n        }\n        updatedUserText = value;\n      } else if (option) {\n        updatedUserText = option.text;\n      }\n\n      if (onChange && !errorMessageToDisplay) {\n        const selectedTime = value || option?.text || '';\n        const date = getDateFromTimeSelection(useHour12, baseDate, selectedTime);\n        onChange(event, date);\n      }\n\n      setErrorMessage(errorMessageToDisplay);\n      setUserText(updatedUserText);\n      setSelectedKey(key);\n    },\n    [\n      baseDate,\n      allowFreeform,\n      onChange,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      strings.invalidInputErrorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const charCode = event.charCode;\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (charCode >= KeyCodes.zero && charCode <= KeyCodes.colon) ||\n        charCode === KeyCodes.space ||\n        charCode === KeyCodes.a ||\n        charCode === KeyCodes.m ||\n        charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={userText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst generateBaseDate = (increments: number, timeRange: ITimeRange | undefined, baseDate: Date) => {\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    baseDate.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(baseDate, increments);\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}