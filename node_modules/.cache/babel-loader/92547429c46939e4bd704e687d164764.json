{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, getNativeProps, divProperties, css, format, getPropsWithDefaults } from '@fluentui/utilities';\nimport { Calendar } from '../../Calendar';\nimport { FirstWeekOfYear, getDatePartHashValue, compareDatePart, DayOfWeek } from '@fluentui/date-time-utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { TextField } from '../../TextField';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nimport { useId, useAsync, useControllableValue } from '@fluentui/react-hooks';\nimport { defaultDatePickerStrings } from './defaults';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_PROPS = {\n  allowTextInput: false,\n  formatDate: function (date) {\n    return date ? date.toDateString() : '';\n  },\n  parseDateFromString: function (dateStr) {\n    var date = Date.parse(dateStr);\n    return date ? new Date(date) : null;\n  },\n  firstDayOfWeek: DayOfWeek.Sunday,\n  initialPickerDate: new Date(),\n  isRequired: false,\n  isMonthPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  strings: defaultDatePickerStrings,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  borderless: false,\n  pickerAriaLabel: 'Calendar',\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  showGoToToday: true,\n  showCloseButton: false,\n  underlined: false,\n  allFocusable: false\n};\n\nfunction useFocusLogic() {\n  var textFieldRef = React.useRef(null);\n  var preventFocusOpeningPicker = React.useRef(false);\n\n  var focus = function () {\n    var _a, _b;\n\n    (_b = (_a = textFieldRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  var preventNextFocusOpeningPicker = function () {\n    preventFocusOpeningPicker.current = true;\n  };\n\n  return [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker];\n}\n\nfunction useCalendarVisibility(_a, focus) {\n  var allowTextInput = _a.allowTextInput,\n      onAfterMenuDismiss = _a.onAfterMenuDismiss;\n\n  var _b = React.useState(false),\n      isCalendarShown = _b[0],\n      setIsCalendarShown = _b[1];\n\n  var isMounted = React.useRef(false);\n  var async = useAsync();\n  React.useEffect(function () {\n    if (isMounted.current && !isCalendarShown) {\n      // In browsers like IE, textfield gets unfocused when datepicker is collapsed\n      if (allowTextInput) {\n        async.requestAnimationFrame(focus);\n      } // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n\n\n      onAfterMenuDismiss === null || onAfterMenuDismiss === void 0 ? void 0 : onAfterMenuDismiss();\n    }\n\n    isMounted.current = true; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isCalendarShown]);\n  return [isCalendarShown, setIsCalendarShown];\n}\n\nfunction useSelectedDate(_a) {\n  var formatDate = _a.formatDate,\n      value = _a.value,\n      onSelectDate = _a.onSelectDate;\n\n  var _b = useControllableValue(value, undefined, function (ev, newValue) {\n    return onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(newValue);\n  }),\n      selectedDate = _b[0],\n      setSelectedDateState = _b[1];\n\n  var _c = React.useState(function () {\n    return value && formatDate ? formatDate(value) : '';\n  }),\n      formattedDate = _c[0],\n      setFormattedDate = _c[1];\n\n  var setSelectedDate = function (newDate) {\n    setSelectedDateState(newDate);\n    setFormattedDate(newDate && formatDate ? formatDate(newDate) : '');\n  };\n\n  React.useEffect(function () {\n    setFormattedDate(value && formatDate ? formatDate(value) : '');\n  }, [formatDate, value]);\n  return [selectedDate, formattedDate, setSelectedDate, setFormattedDate];\n}\n\nfunction useErrorMessage(_a, selectedDate, setSelectedDate, inputValue, isCalendarShown) {\n  var isRequired = _a.isRequired,\n      allowTextInput = _a.allowTextInput,\n      strings = _a.strings,\n      parseDateFromString = _a.parseDateFromString,\n      onSelectDate = _a.onSelectDate,\n      formatDate = _a.formatDate,\n      minDate = _a.minDate,\n      maxDate = _a.maxDate;\n\n  var _b = React.useState(),\n      errorMessage = _b[0],\n      setErrorMessage = _b[1];\n\n  var _c = React.useState(),\n      statusMessage = _c[0],\n      setStatusMessage = _c[1];\n\n  var validateTextInput = function (date) {\n    if (date === void 0) {\n      date = null;\n    }\n\n    if (allowTextInput) {\n      if (inputValue || date) {\n        // Don't parse if the selected date has the same formatted string as what we're about to parse.\n        // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n        // not be able to come up with the exact same date.\n        if (selectedDate && !errorMessage && formatDate && formatDate(date !== null && date !== void 0 ? date : selectedDate) === inputValue) {\n          return;\n        }\n\n        date = date || parseDateFromString(inputValue); // Check if date is null, or date is Invalid Date\n\n        if (!date || isNaN(date.getTime())) {\n          // Reset invalid input field, if formatting is available\n          setSelectedDate(selectedDate); // default the newer isResetStatusMessage string to invalidInputErrorMessage for legacy support\n\n          var selectedText = formatDate ? formatDate(selectedDate) : '';\n          var statusText = strings.isResetStatusMessage ? format(strings.isResetStatusMessage, inputValue, selectedText) : strings.invalidInputErrorMessage || '';\n          setStatusMessage(statusText);\n        } else {\n          // Check against optional date boundaries\n          if (isDateOutOfBounds(date, minDate, maxDate)) {\n            setErrorMessage(strings.isOutOfBoundsErrorMessage || ' ');\n          } else {\n            setSelectedDate(date);\n            setErrorMessage(undefined);\n            setStatusMessage(undefined);\n          }\n        }\n      } else {\n        // Only show error for empty inputValue if it is a required field\n        setErrorMessage(isRequired ? strings.isRequiredErrorMessage || ' ' : undefined); // If no input date string or input date string is invalid\n        // date variable will be null, callback should expect null value for this case\n\n        onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date);\n      }\n    } else if (isRequired && !inputValue) {\n      // Check when DatePicker is a required field but has NO input value\n      setErrorMessage(strings.isRequiredErrorMessage || ' ');\n    } else {\n      // Cleanup the error message and status message\n      setErrorMessage(undefined);\n      setStatusMessage(undefined);\n    }\n  };\n\n  React.useEffect(function () {\n    if (isRequired && !selectedDate) {\n      setErrorMessage(strings.isRequiredErrorMessage || ' ');\n    } else if (selectedDate && isDateOutOfBounds(selectedDate, minDate, maxDate)) {\n      setErrorMessage(strings.isOutOfBoundsErrorMessage || ' ');\n    } else {\n      setErrorMessage(undefined);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [// We don't want to compare the date itself, since two instances of date at the same time are not equal\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  minDate && getDatePartHashValue(minDate), // eslint-disable-next-line react-hooks/exhaustive-deps\n  maxDate && getDatePartHashValue(maxDate), // eslint-disable-next-line react-hooks/exhaustive-deps\n  selectedDate && getDatePartHashValue(selectedDate), isRequired]);\n  return [isCalendarShown ? undefined : errorMessage, validateTextInput, setErrorMessage, isCalendarShown ? undefined : statusMessage, setStatusMessage];\n}\n\nexport var DatePickerBase = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  var firstDayOfWeek = props.firstDayOfWeek,\n      strings = props.strings,\n      label = props.label,\n      theme = props.theme,\n      className = props.className,\n      styles = props.styles,\n      initialPickerDate = props.initialPickerDate,\n      isRequired = props.isRequired,\n      disabled = props.disabled,\n      ariaLabel = props.ariaLabel,\n      pickerAriaLabel = props.pickerAriaLabel,\n      placeholder = props.placeholder,\n      allowTextInput = props.allowTextInput,\n      borderless = props.borderless,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      showCloseButton = props.showCloseButton,\n      calendarProps = props.calendarProps,\n      calloutProps = props.calloutProps,\n      textFieldProps = props.textField,\n      underlined = props.underlined,\n      allFocusable = props.allFocusable,\n      _a = props.calendarAs,\n      CalendarType = _a === void 0 ? Calendar : _a,\n      tabIndex = props.tabIndex,\n      _b = props.disableAutoFocus,\n      disableAutoFocus = _b === void 0 ? true : _b;\n  var id = useId('DatePicker', props.id);\n  var calloutId = useId('DatePicker-Callout');\n  var calendar = React.useRef(null);\n  var datePickerDiv = React.useRef(null);\n\n  var _c = useFocusLogic(),\n      textFieldRef = _c[0],\n      focus = _c[1],\n      preventFocusOpeningPicker = _c[2],\n      preventNextFocusOpeningPicker = _c[3];\n\n  var _d = useCalendarVisibility(props, focus),\n      isCalendarShown = _d[0],\n      setIsCalendarShown = _d[1];\n\n  var _e = useSelectedDate(props),\n      selectedDate = _e[0],\n      formattedDate = _e[1],\n      setSelectedDate = _e[2],\n      setFormattedDate = _e[3];\n\n  var _f = useErrorMessage(props, selectedDate, setSelectedDate, formattedDate, isCalendarShown),\n      errorMessage = _f[0],\n      validateTextInput = _f[1],\n      setErrorMessage = _f[2],\n      statusMessage = _f[3],\n      setStatusMessage = _f[4];\n\n  var showDatePickerPopup = React.useCallback(function () {\n    if (!isCalendarShown) {\n      preventNextFocusOpeningPicker();\n      setIsCalendarShown(true);\n    }\n  }, [isCalendarShown, preventNextFocusOpeningPicker, setIsCalendarShown]);\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: focus,\n      reset: function () {\n        setIsCalendarShown(false);\n        setSelectedDate(undefined);\n        setErrorMessage(undefined);\n        setStatusMessage(undefined);\n      },\n      showDatePickerPopup: showDatePickerPopup\n    };\n  }, [focus, setErrorMessage, setIsCalendarShown, setSelectedDate, setStatusMessage, showDatePickerPopup]);\n\n  var onTextFieldFocus = function () {\n    if (disableAutoFocus) {\n      return;\n    }\n\n    if (!allowTextInput) {\n      if (!preventFocusOpeningPicker.current) {\n        showDatePickerPopup();\n      }\n\n      preventFocusOpeningPicker.current = false;\n    }\n  };\n\n  var onSelectDate = function (date) {\n    if (props.calendarProps && props.calendarProps.onSelectDate) {\n      props.calendarProps.onSelectDate(date);\n    }\n\n    calendarDismissed(date);\n  };\n\n  var onCalloutPositioned = function () {\n    var shouldFocus = true; // If the user has specified that the callout shouldn't use initial focus, then respect\n    // that and don't attempt to set focus. That will default to true within the callout\n    // so we need to check if it's undefined here.\n\n    if (props.calloutProps && props.calloutProps.setInitialFocus !== undefined) {\n      shouldFocus = props.calloutProps.setInitialFocus;\n    }\n\n    if (calendar.current && shouldFocus) {\n      calendar.current.focus();\n    }\n  };\n\n  var onTextFieldBlur = function (ev) {\n    validateTextInput();\n  };\n\n  var onTextFieldChanged = function (ev, newValue) {\n    var _a;\n\n    var textField = props.textField;\n\n    if (allowTextInput) {\n      if (isCalendarShown) {\n        dismissDatePickerPopup();\n      }\n\n      setFormattedDate(newValue);\n    }\n\n    (_a = textField === null || textField === void 0 ? void 0 : textField.onChange) === null || _a === void 0 ? void 0 : _a.call(textField, ev, newValue);\n  };\n\n  var onTextFieldKeyDown = function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (!isCalendarShown) {\n          validateTextInput();\n          showDatePickerPopup();\n        } else {\n          // When DatePicker allows input date string directly,\n          // it is expected to hit another enter to close the popup\n          if (props.allowTextInput) {\n            dismissDatePickerPopup();\n          }\n        }\n\n        break;\n\n      case KeyCodes.escape:\n        handleEscKey(ev);\n        break;\n\n      case KeyCodes.down:\n        if (ev.altKey && !isCalendarShown) {\n          showDatePickerPopup();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var onTextFieldClick = function (ev) {\n    // default openOnClick to !props.disableAutoFocus for legacy support of disableAutoFocus behavior\n    var openOnClick = props.openOnClick || !props.disableAutoFocus;\n\n    if (openOnClick && !isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n      return;\n    }\n\n    if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  var onIconClick = function (ev) {\n    ev.stopPropagation();\n\n    if (!isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n    } else if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  var dismissDatePickerPopup = function (newlySelectedDate) {\n    if (isCalendarShown) {\n      setIsCalendarShown(false);\n      validateTextInput(newlySelectedDate);\n\n      if (!allowTextInput && newlySelectedDate) {\n        setSelectedDate(newlySelectedDate);\n      }\n    }\n  };\n\n  var renderTextfieldDescription = function (inputProps, defaultRender) {\n    return React.createElement(React.Fragment, null, inputProps.description ? defaultRender(inputProps) : null, React.createElement(\"div\", {\n      \"aria-live\": \"assertive\",\n      className: classNames.statusMessage\n    }, statusMessage));\n  };\n\n  var renderReadOnlyInput = function (inputProps) {\n    var divProps = getNativeProps(inputProps, divProperties); // Talkback on Android treats readonly inputs as disabled, so swipe gestures to open the Calendar\n    // don't register. Workaround is rendering a div with role=\"combobox\" (passed in via TextField props).\n\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: css(divProps.className, classNames.readOnlyTextField),\n      tabIndex: tabIndex || 0\n    }), formattedDate || // Putting the placeholder in a separate span fixes specificity issues for the text color\n    React.createElement(\"span\", {\n      className: classNames.readOnlyPlaceholder\n    }, placeholder));\n  };\n  /**\n   * Callback for closing the calendar callout\n   */\n\n\n  var calendarDismissed = function (newlySelectedDate) {\n    preventNextFocusOpeningPicker();\n    dismissDatePickerPopup(newlySelectedDate); // don't need to focus the text box, if necessary the focusTrapZone will do it\n  };\n\n  var calloutDismissed = function (ev) {\n    calendarDismissed();\n  };\n\n  var handleEscKey = function (ev) {\n    ev.stopPropagation();\n    calendarDismissed();\n  };\n\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    underlined: underlined,\n    label: !!label,\n    isDatePickerShown: isCalendarShown\n  });\n  var nativeProps = getNativeProps(props, divProperties, ['value']);\n  var iconProps = textFieldProps && textFieldProps.iconProps;\n  var textFieldId = textFieldProps && textFieldProps.id && textFieldProps.id !== id ? textFieldProps.id : id + '-label';\n  var readOnly = !allowTextInput && !disabled;\n  return React.createElement(\"div\", __assign({}, nativeProps, {\n    className: classNames.root,\n    ref: forwardedRef\n  }), React.createElement(\"div\", {\n    ref: datePickerDiv,\n    \"aria-owns\": isCalendarShown ? calloutId : undefined,\n    className: classNames.wrapper\n  }, React.createElement(TextField, __assign({\n    role: \"combobox\",\n    label: label,\n    \"aria-expanded\": isCalendarShown,\n    ariaLabel: ariaLabel,\n    \"aria-haspopup\": \"dialog\",\n    \"aria-controls\": isCalendarShown ? calloutId : undefined,\n    required: isRequired,\n    disabled: disabled,\n    errorMessage: errorMessage,\n    placeholder: placeholder,\n    borderless: borderless,\n    value: formattedDate,\n    componentRef: textFieldRef,\n    underlined: underlined,\n    tabIndex: tabIndex,\n    readOnly: !allowTextInput\n  }, textFieldProps, {\n    id: textFieldId,\n    className: css(classNames.textField, textFieldProps && textFieldProps.className),\n    iconProps: __assign(__assign({\n      iconName: 'Calendar'\n    }, iconProps), {\n      className: css(classNames.icon, iconProps && iconProps.className),\n      onClick: onIconClick\n    }),\n    // eslint-disable-next-line react/jsx-no-bind\n    onRenderDescription: renderTextfieldDescription,\n    // eslint-disable-next-line react/jsx-no-bind\n    onKeyDown: onTextFieldKeyDown,\n    // eslint-disable-next-line react/jsx-no-bind\n    onFocus: onTextFieldFocus,\n    // eslint-disable-next-line react/jsx-no-bind\n    onBlur: onTextFieldBlur,\n    // eslint-disable-next-line react/jsx-no-bind\n    onClick: onTextFieldClick,\n    // eslint-disable-next-line react/jsx-no-bind\n    onChange: onTextFieldChanged,\n    onRenderInput: readOnly ? renderReadOnlyInput : undefined\n  }))), isCalendarShown && React.createElement(Callout, __assign({\n    id: calloutId,\n    role: \"dialog\",\n    ariaLabel: pickerAriaLabel,\n    isBeakVisible: false,\n    gapSpace: 0,\n    doNotLayer: false,\n    target: datePickerDiv.current,\n    directionalHint: DirectionalHint.bottomLeftEdge\n  }, calloutProps, {\n    className: css(classNames.callout, calloutProps && calloutProps.className),\n    // eslint-disable-next-line react/jsx-no-bind\n    onDismiss: calloutDismissed,\n    // eslint-disable-next-line react/jsx-no-bind\n    onPositioned: onCalloutPositioned\n  }), React.createElement(FocusTrapZone, {\n    isClickableOutsideFocusTrap: true,\n    disableFirstFocus: disableAutoFocus\n  }, React.createElement(CalendarType, __assign({}, calendarProps, {\n    // eslint-disable-next-line react/jsx-no-bind\n    onSelectDate: onSelectDate,\n    // eslint-disable-next-line react/jsx-no-bind\n    onDismiss: calendarDismissed,\n    isMonthPickerVisible: props.isMonthPickerVisible,\n    showMonthPickerAsOverlay: props.showMonthPickerAsOverlay,\n    today: props.today,\n    value: selectedDate || initialPickerDate,\n    firstDayOfWeek: firstDayOfWeek,\n    strings: strings,\n    highlightCurrentMonth: props.highlightCurrentMonth,\n    highlightSelectedMonth: props.highlightSelectedMonth,\n    showWeekNumbers: props.showWeekNumbers,\n    firstWeekOfYear: props.firstWeekOfYear,\n    showGoToToday: props.showGoToToday,\n    dateTimeFormatter: props.dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    componentRef: calendar,\n    showCloseButton: showCloseButton,\n    allFocusable: allFocusable\n  })))));\n});\nDatePickerBase.displayName = 'DatePickerBase';\n\nfunction isDateOutOfBounds(date, minDate, maxDate) {\n  return !!minDate && compareDatePart(minDate, date) > 0 || !!maxDate && compareDatePart(maxDate, date) < 0;\n}","map":{"version":3,"sources":["components/DatePicker/DatePicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  classNamesFunction,\n  getNativeProps,\n  divProperties,\n  css,\n  format,\n  getPropsWithDefaults,\n} from '@fluentui/utilities';\nimport { Calendar } from '../../Calendar';\nimport { FirstWeekOfYear, getDatePartHashValue, compareDatePart, DayOfWeek } from '@fluentui/date-time-utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { TextField } from '../../TextField';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nimport { useId, useAsync, useControllableValue } from '@fluentui/react-hooks';\nimport { defaultDatePickerStrings } from './defaults';\nimport type { IDatePickerProps, IDatePickerStyleProps, IDatePickerStyles } from './DatePicker.types';\nimport type { IRenderFunction } from '@fluentui/utilities';\nimport type { ICalendar } from '../../Calendar';\nimport type { ITextField, ITextFieldProps } from '../../TextField';\n\nconst getClassNames = classNamesFunction<IDatePickerStyleProps, IDatePickerStyles>();\n\nconst DEFAULT_PROPS: IDatePickerProps = {\n  allowTextInput: false,\n  formatDate: (date: Date) => (date ? date.toDateString() : ''),\n  parseDateFromString: (dateStr: string) => {\n    const date = Date.parse(dateStr);\n    return date ? new Date(date) : null;\n  },\n  firstDayOfWeek: DayOfWeek.Sunday,\n  initialPickerDate: new Date(),\n  isRequired: false,\n  isMonthPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  strings: defaultDatePickerStrings,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  borderless: false,\n  pickerAriaLabel: 'Calendar',\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  showGoToToday: true,\n  showCloseButton: false,\n  underlined: false,\n  allFocusable: false,\n};\n\nfunction useFocusLogic() {\n  const textFieldRef = React.useRef<ITextField>(null);\n  const preventFocusOpeningPicker = React.useRef(false);\n\n  const focus = () => {\n    textFieldRef.current?.focus?.();\n  };\n\n  const preventNextFocusOpeningPicker = () => {\n    preventFocusOpeningPicker.current = true;\n  };\n\n  return [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker] as const;\n}\n\nfunction useCalendarVisibility({ allowTextInput, onAfterMenuDismiss }: IDatePickerProps, focus: () => void) {\n  const [isCalendarShown, setIsCalendarShown] = React.useState(false);\n  const isMounted = React.useRef(false);\n  const async = useAsync();\n\n  React.useEffect(() => {\n    if (isMounted.current && !isCalendarShown) {\n      // In browsers like IE, textfield gets unfocused when datepicker is collapsed\n      if (allowTextInput) {\n        async.requestAnimationFrame(focus);\n      }\n\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      onAfterMenuDismiss?.();\n    }\n    isMounted.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isCalendarShown]);\n\n  return [isCalendarShown, setIsCalendarShown] as const;\n}\n\nfunction useSelectedDate({ formatDate, value, onSelectDate }: IDatePickerProps) {\n  const [selectedDate, setSelectedDateState] = useControllableValue(value, undefined, (ev, newValue) =>\n    onSelectDate?.(newValue),\n  );\n  const [formattedDate, setFormattedDate] = React.useState(() => (value && formatDate ? formatDate(value) : ''));\n\n  const setSelectedDate = (newDate: Date | undefined) => {\n    setSelectedDateState(newDate);\n    setFormattedDate(newDate && formatDate ? formatDate(newDate) : '');\n  };\n\n  React.useEffect(() => {\n    setFormattedDate(value && formatDate ? formatDate(value) : '');\n  }, [formatDate, value]);\n\n  return [selectedDate, formattedDate, setSelectedDate, setFormattedDate] as const;\n}\n\nfunction useErrorMessage(\n  {\n    isRequired,\n    allowTextInput,\n    strings,\n    parseDateFromString,\n    onSelectDate,\n    formatDate,\n    minDate,\n    maxDate,\n  }: IDatePickerProps,\n  selectedDate: Date | undefined,\n  setSelectedDate: (date: Date | undefined) => void,\n  inputValue: string,\n  isCalendarShown: boolean,\n) {\n  const [errorMessage, setErrorMessage] = React.useState<string | undefined>();\n  const [statusMessage, setStatusMessage] = React.useState<string | undefined>();\n\n  const validateTextInput = (date: Date | null = null): void => {\n    if (allowTextInput) {\n      if (inputValue || date) {\n        // Don't parse if the selected date has the same formatted string as what we're about to parse.\n        // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n        // not be able to come up with the exact same date.\n        if (selectedDate && !errorMessage && formatDate && formatDate(date ?? selectedDate) === inputValue) {\n          return;\n        }\n        date = date || parseDateFromString!(inputValue);\n\n        // Check if date is null, or date is Invalid Date\n        if (!date || isNaN(date.getTime())) {\n          // Reset invalid input field, if formatting is available\n          setSelectedDate(selectedDate);\n          // default the newer isResetStatusMessage string to invalidInputErrorMessage for legacy support\n          const selectedText = formatDate ? formatDate(selectedDate) : '';\n          const statusText = strings!.isResetStatusMessage\n            ? format(strings!.isResetStatusMessage, inputValue, selectedText)\n            : strings!.invalidInputErrorMessage || '';\n          setStatusMessage(statusText);\n        } else {\n          // Check against optional date boundaries\n          if (isDateOutOfBounds(date, minDate, maxDate)) {\n            setErrorMessage(strings!.isOutOfBoundsErrorMessage || ' ');\n          } else {\n            setSelectedDate(date);\n            setErrorMessage(undefined);\n            setStatusMessage(undefined);\n          }\n        }\n      } else {\n        // Only show error for empty inputValue if it is a required field\n        setErrorMessage(isRequired ? strings!.isRequiredErrorMessage || ' ' : undefined);\n\n        // If no input date string or input date string is invalid\n        // date variable will be null, callback should expect null value for this case\n        onSelectDate?.(date);\n      }\n    } else if (isRequired && !inputValue) {\n      // Check when DatePicker is a required field but has NO input value\n      setErrorMessage(strings!.isRequiredErrorMessage || ' ');\n    } else {\n      // Cleanup the error message and status message\n      setErrorMessage(undefined);\n      setStatusMessage(undefined);\n    }\n  };\n\n  React.useEffect(() => {\n    if (isRequired && !selectedDate) {\n      setErrorMessage(strings!.isRequiredErrorMessage || ' ');\n    } else if (selectedDate && isDateOutOfBounds(selectedDate, minDate, maxDate)) {\n      setErrorMessage(strings!.isOutOfBoundsErrorMessage || ' ');\n    } else {\n      setErrorMessage(undefined);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    // We don't want to compare the date itself, since two instances of date at the same time are not equal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    minDate && getDatePartHashValue(minDate),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    maxDate && getDatePartHashValue(maxDate),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    selectedDate && getDatePartHashValue(selectedDate),\n    isRequired,\n  ]);\n\n  return [\n    isCalendarShown ? undefined : errorMessage,\n    validateTextInput,\n    setErrorMessage,\n    isCalendarShown ? undefined : statusMessage,\n    setStatusMessage,\n  ] as const;\n}\n\nexport const DatePickerBase: React.FunctionComponent<IDatePickerProps> = React.forwardRef<\n  HTMLDivElement,\n  IDatePickerProps\n>((propsWithoutDefaults, forwardedRef) => {\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  const {\n    firstDayOfWeek,\n    strings,\n    label,\n    theme,\n    className,\n    styles,\n    initialPickerDate,\n    isRequired,\n    disabled,\n    ariaLabel,\n    pickerAriaLabel,\n    placeholder,\n    allowTextInput,\n    borderless,\n    minDate,\n    maxDate,\n    showCloseButton,\n    calendarProps,\n    calloutProps,\n    textField: textFieldProps,\n    underlined,\n    allFocusable,\n    calendarAs: CalendarType = Calendar,\n    tabIndex,\n    disableAutoFocus = true,\n  } = props;\n\n  const id = useId('DatePicker', props.id);\n  const calloutId = useId('DatePicker-Callout');\n\n  const calendar = React.useRef<ICalendar>(null);\n  const datePickerDiv = React.useRef<HTMLDivElement>(null);\n\n  const [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker] = useFocusLogic();\n  const [isCalendarShown, setIsCalendarShown] = useCalendarVisibility(props, focus);\n  const [selectedDate, formattedDate, setSelectedDate, setFormattedDate] = useSelectedDate(props);\n  const [errorMessage, validateTextInput, setErrorMessage, statusMessage, setStatusMessage] = useErrorMessage(\n    props,\n    selectedDate,\n    setSelectedDate,\n    formattedDate,\n    isCalendarShown,\n  );\n\n  const showDatePickerPopup = React.useCallback((): void => {\n    if (!isCalendarShown) {\n      preventNextFocusOpeningPicker();\n      setIsCalendarShown(true);\n    }\n  }, [isCalendarShown, preventNextFocusOpeningPicker, setIsCalendarShown]);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus,\n      reset() {\n        setIsCalendarShown(false);\n        setSelectedDate(undefined);\n        setErrorMessage(undefined);\n        setStatusMessage(undefined);\n      },\n      showDatePickerPopup,\n    }),\n    [focus, setErrorMessage, setIsCalendarShown, setSelectedDate, setStatusMessage, showDatePickerPopup],\n  );\n\n  const onTextFieldFocus = (): void => {\n    if (disableAutoFocus) {\n      return;\n    }\n\n    if (!allowTextInput) {\n      if (!preventFocusOpeningPicker.current) {\n        showDatePickerPopup();\n      }\n      preventFocusOpeningPicker.current = false;\n    }\n  };\n\n  const onSelectDate = (date: Date): void => {\n    if (props.calendarProps && props.calendarProps.onSelectDate) {\n      props.calendarProps.onSelectDate(date);\n    }\n\n    calendarDismissed(date);\n  };\n\n  const onCalloutPositioned = (): void => {\n    let shouldFocus = true;\n    // If the user has specified that the callout shouldn't use initial focus, then respect\n    // that and don't attempt to set focus. That will default to true within the callout\n    // so we need to check if it's undefined here.\n    if (props.calloutProps && props.calloutProps.setInitialFocus !== undefined) {\n      shouldFocus = props.calloutProps.setInitialFocus;\n    }\n    if (calendar.current && shouldFocus) {\n      calendar.current.focus();\n    }\n  };\n\n  const onTextFieldBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    validateTextInput();\n  };\n\n  const onTextFieldChanged = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue: string): void => {\n    const { textField } = props;\n\n    if (allowTextInput) {\n      if (isCalendarShown) {\n        dismissDatePickerPopup();\n      }\n\n      setFormattedDate(newValue);\n    }\n\n    textField?.onChange?.(ev, newValue);\n  };\n\n  const onTextFieldKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        ev.stopPropagation();\n        if (!isCalendarShown) {\n          validateTextInput();\n          showDatePickerPopup();\n        } else {\n          // When DatePicker allows input date string directly,\n          // it is expected to hit another enter to close the popup\n          if (props.allowTextInput) {\n            dismissDatePickerPopup();\n          }\n        }\n        break;\n\n      case KeyCodes.escape:\n        handleEscKey(ev);\n        break;\n\n      case KeyCodes.down:\n        if (ev.altKey && !isCalendarShown) {\n          showDatePickerPopup();\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onTextFieldClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    // default openOnClick to !props.disableAutoFocus for legacy support of disableAutoFocus behavior\n    const openOnClick = props.openOnClick || !props.disableAutoFocus;\n    if (openOnClick && !isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n      return;\n    }\n    if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  const onIconClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    ev.stopPropagation();\n    if (!isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n    } else if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  const dismissDatePickerPopup = (newlySelectedDate?: Date): void => {\n    if (isCalendarShown) {\n      setIsCalendarShown(false);\n\n      validateTextInput(newlySelectedDate);\n      if (!allowTextInput && newlySelectedDate) {\n        setSelectedDate(newlySelectedDate);\n      }\n    }\n  };\n\n  const renderTextfieldDescription = (inputProps: ITextFieldProps, defaultRender: IRenderFunction<ITextFieldProps>) => {\n    return (\n      <>\n        {inputProps.description ? defaultRender(inputProps) : null}\n        <div aria-live=\"assertive\" className={classNames.statusMessage}>\n          {statusMessage}\n        </div>\n      </>\n    );\n  };\n\n  const renderReadOnlyInput: ITextFieldProps['onRenderInput'] = inputProps => {\n    const divProps = getNativeProps(inputProps!, divProperties);\n\n    // Talkback on Android treats readonly inputs as disabled, so swipe gestures to open the Calendar\n    // don't register. Workaround is rendering a div with role=\"combobox\" (passed in via TextField props).\n    return (\n      <div {...divProps} className={css(divProps.className, classNames.readOnlyTextField)} tabIndex={tabIndex || 0}>\n        {formattedDate || (\n          // Putting the placeholder in a separate span fixes specificity issues for the text color\n          <span className={classNames.readOnlyPlaceholder}>{placeholder}</span>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Callback for closing the calendar callout\n   */\n  const calendarDismissed = (newlySelectedDate?: Date): void => {\n    preventNextFocusOpeningPicker();\n    dismissDatePickerPopup(newlySelectedDate);\n    // don't need to focus the text box, if necessary the focusTrapZone will do it\n  };\n\n  const calloutDismissed = (ev: React.MouseEvent<HTMLElement>): void => {\n    calendarDismissed();\n  };\n\n  const handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    ev.stopPropagation();\n    calendarDismissed();\n  };\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className,\n    disabled,\n    underlined,\n    label: !!label,\n    isDatePickerShown: isCalendarShown,\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['value']);\n  const iconProps = textFieldProps && textFieldProps.iconProps;\n  const textFieldId =\n    textFieldProps && textFieldProps.id && textFieldProps.id !== id ? textFieldProps.id : id + '-label';\n  const readOnly = !allowTextInput && !disabled;\n\n  return (\n    <div {...nativeProps} className={classNames.root} ref={forwardedRef}>\n      <div ref={datePickerDiv} aria-owns={isCalendarShown ? calloutId : undefined} className={classNames.wrapper}>\n        <TextField\n          role=\"combobox\"\n          label={label}\n          aria-expanded={isCalendarShown}\n          ariaLabel={ariaLabel}\n          aria-haspopup=\"dialog\"\n          aria-controls={isCalendarShown ? calloutId : undefined}\n          required={isRequired}\n          disabled={disabled}\n          errorMessage={errorMessage}\n          placeholder={placeholder}\n          borderless={borderless}\n          value={formattedDate}\n          componentRef={textFieldRef}\n          underlined={underlined}\n          tabIndex={tabIndex}\n          readOnly={!allowTextInput}\n          {...textFieldProps}\n          id={textFieldId}\n          className={css(classNames.textField, textFieldProps && textFieldProps.className)}\n          iconProps={{\n            iconName: 'Calendar',\n            ...iconProps,\n            className: css(classNames.icon, iconProps && iconProps.className),\n            onClick: onIconClick,\n          }}\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderDescription={renderTextfieldDescription}\n          // eslint-disable-next-line react/jsx-no-bind\n          onKeyDown={onTextFieldKeyDown}\n          // eslint-disable-next-line react/jsx-no-bind\n          onFocus={onTextFieldFocus}\n          // eslint-disable-next-line react/jsx-no-bind\n          onBlur={onTextFieldBlur}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={onTextFieldClick}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={onTextFieldChanged}\n          onRenderInput={readOnly ? renderReadOnlyInput : undefined}\n        />\n      </div>\n      {isCalendarShown && (\n        <Callout\n          id={calloutId}\n          role=\"dialog\"\n          ariaLabel={pickerAriaLabel}\n          isBeakVisible={false}\n          gapSpace={0}\n          doNotLayer={false}\n          target={datePickerDiv.current}\n          directionalHint={DirectionalHint.bottomLeftEdge}\n          {...calloutProps}\n          className={css(classNames.callout, calloutProps && calloutProps.className)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={calloutDismissed}\n          // eslint-disable-next-line react/jsx-no-bind\n          onPositioned={onCalloutPositioned}\n        >\n          <FocusTrapZone isClickableOutsideFocusTrap={true} disableFirstFocus={disableAutoFocus}>\n            <CalendarType\n              {...calendarProps}\n              // eslint-disable-next-line react/jsx-no-bind\n              onSelectDate={onSelectDate}\n              // eslint-disable-next-line react/jsx-no-bind\n              onDismiss={calendarDismissed}\n              isMonthPickerVisible={props.isMonthPickerVisible}\n              showMonthPickerAsOverlay={props.showMonthPickerAsOverlay}\n              today={props.today}\n              value={selectedDate || initialPickerDate}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={strings!}\n              highlightCurrentMonth={props.highlightCurrentMonth}\n              highlightSelectedMonth={props.highlightSelectedMonth}\n              showWeekNumbers={props.showWeekNumbers}\n              firstWeekOfYear={props.firstWeekOfYear}\n              showGoToToday={props.showGoToToday}\n              dateTimeFormatter={props.dateTimeFormatter}\n              minDate={minDate}\n              maxDate={maxDate}\n              componentRef={calendar}\n              showCloseButton={showCloseButton}\n              allFocusable={allFocusable}\n            />\n          </FocusTrapZone>\n        </Callout>\n      )}\n    </div>\n  );\n});\nDatePickerBase.displayName = 'DatePickerBase';\n\nfunction isDateOutOfBounds(date: Date, minDate?: Date, maxDate?: Date): boolean {\n  return (!!minDate && compareDatePart(minDate!, date) > 0) || (!!maxDate && compareDatePart(maxDate!, date) < 0);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}