{"ast":null,"code":"import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling'; // Size breakpoint when the default border width changes from 2px to 4px.\n\nvar CELL_BORDER_BREAKPOINT = 24;\nvar LARGE_BORDER = 4;\nvar SMALL_BORDER = 2;\nvar DIVIDING_PADDING = 2;\nvar DEFAULT_CELL_SIZE = 20;\nvar cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      disabled = props.disabled,\n      selected = props.selected,\n      circle = props.circle,\n      isWhite = props.isWhite,\n      _f = props.height,\n      height = _f === void 0 ? DEFAULT_CELL_SIZE : _f,\n      _g = props.width,\n      width = _g === void 0 ? DEFAULT_CELL_SIZE : _g,\n      borderWidth = props.borderWidth;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var buttonBorderHovered = palette.neutralLighter;\n  var buttonBorderChecked = palette.neutralLight;\n  var buttonBorderCheckedHovered = palette.neutralSecondary;\n  var buttonBorderIsWhite = palette.neutralTertiary; // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n\n  var calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\n  return {\n    // this is a button that wraps the color\n    colorCell: [getFocusStyle(theme, {\n      inset: -1,\n      position: 'relative',\n      highContrastStyle: cellHighContrastFocus\n    }), {\n      backgroundColor: semanticColors.bodyBackground,\n      padding: 0,\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block',\n      cursor: 'pointer',\n      userSelect: 'none',\n      borderRadius: 0,\n      border: 'none',\n      height: height,\n      width: width,\n      verticalAlign: 'top'\n    }, !circle && {\n      selectors: (_a = {}, _a[\".\" + IsFocusVisibleClassName + \" &:focus::after\"] = {\n        // -1px so that we don't increase visually the size of the cell.\n        outlineOffset: calculatedBorderWidth - 1 + \"px\"\n      }, _a)\n    }, // In focus state for circle we want a round border which is not possible with outline.\n    circle && {\n      borderRadius: '50%',\n      selectors: (_b = {}, _b[\".\" + IsFocusVisibleClassName + \" &:focus::after\"] = {\n        outline: 'none',\n        borderColor: semanticColors.focusBorder,\n        borderRadius: '50%',\n        left: -calculatedBorderWidth,\n        right: -calculatedBorderWidth,\n        top: -calculatedBorderWidth,\n        bottom: -calculatedBorderWidth,\n        selectors: (_c = {}, _c[HighContrastSelector] = {\n          outline: \"1px solid ButtonText\"\n        }, _c)\n      }, _b)\n    }, selected && {\n      padding: DIVIDING_PADDING,\n      border: calculatedBorderWidth + \"px solid \" + buttonBorderChecked,\n      selectors: (_d = {}, _d['&:hover::before'] = {\n        content: '\"\"',\n        height: height,\n        width: width,\n        position: 'absolute',\n        top: -calculatedBorderWidth,\n        left: -calculatedBorderWidth,\n        borderRadius: circle ? '50%' : 'default',\n        boxShadow: \"inset 0 0 0 1px \" + buttonBorderCheckedHovered\n      }, _d)\n    }, !selected && {\n      selectors: (_e = {}, _e['&:hover, &:active, &:focus'] = {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: DIVIDING_PADDING,\n        border: calculatedBorderWidth + \"px solid \" + buttonBorderHovered\n      }, _e['&:focus'] = {\n        borderColor: semanticColors.bodyBackground,\n        padding: 0,\n        selectors: {\n          ':hover': {\n            borderColor: theme.palette.neutralLight,\n            padding: DIVIDING_PADDING\n          }\n        }\n      }, _e)\n    }, disabled && {\n      color: semanticColors.disabledBodyText,\n      pointerEvents: 'none',\n      opacity: 0.3\n    }, isWhite && !selected && {\n      // fake a border for white\n      backgroundColor: buttonBorderIsWhite,\n      padding: 1\n    }],\n    // the <svg> that holds the color\n    svg: [{\n      width: '100%',\n      height: '100%'\n    }, circle && {\n      borderRadius: '50%'\n    }]\n  };\n};","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\nimport type { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n// Size breakpoint when the default border width changes from 2px to 4px.\nconst CELL_BORDER_BREAKPOINT = 24;\nconst LARGE_BORDER = 4;\nconst SMALL_BORDER = 2;\nconst DIVIDING_PADDING = 2;\nconst DEFAULT_CELL_SIZE = 20;\n\nconst cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText',\n};\n\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\n  const {\n    theme,\n    disabled,\n    selected,\n    circle,\n    isWhite,\n    height = DEFAULT_CELL_SIZE,\n    width = DEFAULT_CELL_SIZE,\n    borderWidth,\n  } = props;\n  const { semanticColors, palette } = theme;\n\n  const buttonBorderHovered = palette.neutralLighter;\n  const buttonBorderChecked = palette.neutralLight;\n  const buttonBorderCheckedHovered = palette.neutralSecondary;\n  const buttonBorderIsWhite = palette.neutralTertiary;\n\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  const calculatedBorderWidth = borderWidth\n    ? borderWidth\n    : width < CELL_BORDER_BREAKPOINT\n    ? SMALL_BORDER\n    : LARGE_BORDER;\n\n  return {\n    // this is a button that wraps the color\n    colorCell: [\n      getFocusStyle(theme, { inset: -1, position: 'relative', highContrastStyle: cellHighContrastFocus }),\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: 0,\n        position: 'relative',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        cursor: 'pointer',\n        userSelect: 'none',\n        borderRadius: 0,\n        border: 'none',\n        height: height,\n        width: width,\n        verticalAlign: 'top',\n      },\n      !circle && {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            // -1px so that we don't increase visually the size of the cell.\n            outlineOffset: `${calculatedBorderWidth - 1}px`,\n          },\n        },\n      },\n      // In focus state for circle we want a round border which is not possible with outline.\n      circle && {\n        borderRadius: '50%',\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            outline: 'none',\n            borderColor: semanticColors.focusBorder,\n            borderRadius: '50%',\n            left: -calculatedBorderWidth,\n            right: -calculatedBorderWidth,\n            top: -calculatedBorderWidth,\n            bottom: -calculatedBorderWidth,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: `1px solid ButtonText`,\n              },\n            },\n          },\n        },\n      },\n      selected && {\n        padding: DIVIDING_PADDING,\n        border: `${calculatedBorderWidth}px solid ${buttonBorderChecked}`,\n        selectors: {\n          ['&:hover::before']: {\n            content: '\"\"',\n            height: height,\n            width: width,\n            position: 'absolute',\n            top: -calculatedBorderWidth,\n            left: -calculatedBorderWidth,\n            borderRadius: circle ? '50%' : 'default',\n            boxShadow: `inset 0 0 0 1px ${buttonBorderCheckedHovered}`,\n          },\n        },\n      },\n      !selected && {\n        selectors: {\n          ['&:hover, &:active, &:focus']: {\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\n            padding: DIVIDING_PADDING,\n            border: `${calculatedBorderWidth}px solid ${buttonBorderHovered}`,\n          },\n          ['&:focus']: {\n            borderColor: semanticColors.bodyBackground,\n            padding: 0,\n            selectors: {\n              ':hover': {\n                borderColor: theme.palette.neutralLight,\n                padding: DIVIDING_PADDING,\n              },\n            },\n          },\n        },\n      },\n      disabled && {\n        color: semanticColors.disabledBodyText,\n        pointerEvents: 'none',\n        opacity: 0.3,\n      },\n      isWhite &&\n        !selected && {\n          // fake a border for white\n          backgroundColor: buttonBorderIsWhite,\n          padding: 1,\n        },\n    ],\n    // the <svg> that holds the color\n    svg: [\n      {\n        width: '100%',\n        height: '100%',\n      },\n      circle && {\n        borderRadius: '50%',\n      },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}