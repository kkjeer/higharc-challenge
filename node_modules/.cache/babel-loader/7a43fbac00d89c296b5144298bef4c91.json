{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxMedium, ScreenWidthMaxSmall, ScreenWidthMinMedium, getFocusStyle, getScreenSelector, getGlobalClassNames, FontWeights, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item'\n};\nvar SingleLineTextStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n};\nvar overflowButtonFontSize = 16;\nvar chevronSmallFontSize = 8;\nvar itemLineHeight = 36;\nvar itemFontSize = 18;\nvar MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nvar MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n\n  var className = props.className,\n      theme = props.theme;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // Tokens\n\n  var itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  var itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  var itemTextColor = palette.neutralSecondary;\n  var itemTextFontWeight = FontWeights.regular;\n  var itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  var itemLastChildTextColor = palette.neutralPrimary;\n  var itemLastChildTextFontWeight = FontWeights.semibold;\n  var chevronButtonColor = palette.neutralSecondary;\n  var overflowButtonColor = palette.neutralSecondary;\n  var lastChildItemStyles = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor\n  };\n  var itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        color: 'Highlight',\n        backgroundColor: 'transparent'\n      }, _a)\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none'\n    }\n  };\n  var commonItemStyles = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight\n  };\n  return {\n    root: [classNames.root, fonts.medium, {\n      margin: '11px 0 1px'\n    }, className],\n    list: [classNames.list, {\n      whiteSpace: 'nowrap',\n      padding: 0,\n      margin: 0,\n      display: 'flex',\n      alignItems: 'stretch'\n    }],\n    listItem: [classNames.listItem, {\n      listStyleType: 'none',\n      margin: '0',\n      padding: '0',\n      display: 'flex',\n      position: 'relative',\n      alignItems: 'center',\n      selectors: {\n        '&:last-child .ms-Breadcrumb-itemLink': __assign(__assign({}, lastChildItemStyles), (_b = {}, _b[HighContrastSelector] = {\n          MsHighContrastAdjust: 'auto',\n          forcedColorAdjust: 'auto'\n        }, _b)),\n        '&:last-child .ms-Breadcrumb-item': lastChildItemStyles\n      }\n    }],\n    chevron: [classNames.chevron, {\n      color: chevronButtonColor,\n      fontSize: fonts.small.fontSize,\n      selectors: (_c = {}, _c[HighContrastSelector] = __assign({\n        color: 'WindowText'\n      }, getHighContrastNoAdjustStyle()), _c[MediumScreenSelector] = {\n        fontSize: chevronSmallFontSize\n      }, _c[MinimumScreenSelector] = {\n        fontSize: chevronSmallFontSize\n      }, _c)\n    }],\n    overflow: [classNames.overflow, {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center'\n    }],\n    overflowButton: [classNames.overflowButton, getFocusStyle(theme), SingleLineTextStyle, {\n      fontSize: overflowButtonFontSize,\n      color: overflowButtonColor,\n      height: '100%',\n      cursor: 'pointer',\n      selectors: __assign(__assign({}, itemStateSelectors), (_d = {}, _d[MinimumScreenSelector] = {\n        padding: '4px 6px'\n      }, _d[MediumScreenSelector] = {\n        fontSize: fonts.mediumPlus.fontSize\n      }, _d))\n    }],\n    itemLink: [classNames.itemLink, getFocusStyle(theme), SingleLineTextStyle, __assign(__assign({}, commonItemStyles), {\n      selectors: __assign((_e = {\n        ':focus': {\n          color: palette.neutralDark\n        }\n      }, _e[\".\" + IsFocusVisibleClassName + \" &:focus\"] = {\n        outline: \"none\"\n      }, _e), itemStateSelectors)\n    })],\n    item: [classNames.item, __assign(__assign({}, commonItemStyles), {\n      selectors: {\n        ':hover': {\n          cursor: 'default'\n        }\n      }\n    })]\n  };\n};","map":{"version":3,"sources":["components/Breadcrumb/Breadcrumb.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  HighContrastSelector,\n  ScreenWidthMaxMedium,\n  ScreenWidthMaxSmall,\n  ScreenWidthMinMedium,\n  getFocusStyle,\n  getScreenSelector,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nimport type { IRawStyle } from '../../Styling';\nimport type { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Breadcrumb',\n  list: 'ms-Breadcrumb-list',\n  listItem: 'ms-Breadcrumb-listItem',\n  chevron: 'ms-Breadcrumb-chevron',\n  overflow: 'ms-Breadcrumb-overflow',\n  overflowButton: 'ms-Breadcrumb-overflowButton',\n  itemLink: 'ms-Breadcrumb-itemLink',\n  item: 'ms-Breadcrumb-item',\n};\n\nconst SingleLineTextStyle: IRawStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden',\n};\n\nconst overflowButtonFontSize = 16;\nconst chevronSmallFontSize = 8;\nconst itemLineHeight = 36;\nconst itemFontSize = 18;\n\nconst MinimumScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\nconst MediumScreenSelector = getScreenSelector(ScreenWidthMinMedium, ScreenWidthMaxMedium);\n\nexport const getStyles = (props: IBreadcrumbStyleProps): IBreadcrumbStyles => {\n  const { className, theme } = props;\n  const { palette, semanticColors, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // Tokens\n  const itemBackgroundHoveredColor = semanticColors.menuItemBackgroundHovered;\n  const itemBackgroundPressedColor = semanticColors.menuItemBackgroundPressed;\n  const itemTextColor = palette.neutralSecondary;\n  const itemTextFontWeight = FontWeights.regular;\n  const itemTextHoveredOrPressedColor = palette.neutralPrimary;\n  const itemLastChildTextColor = palette.neutralPrimary;\n  const itemLastChildTextFontWeight = FontWeights.semibold;\n  const chevronButtonColor = palette.neutralSecondary;\n  const overflowButtonColor = palette.neutralSecondary;\n\n  const lastChildItemStyles: IRawStyle = {\n    fontWeight: itemLastChildTextFontWeight,\n    color: itemLastChildTextColor,\n  };\n\n  const itemStateSelectors = {\n    ':hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundHoveredColor,\n      cursor: 'pointer',\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'Highlight',\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n    ':active': {\n      backgroundColor: itemBackgroundPressedColor,\n      color: itemTextHoveredOrPressedColor,\n    },\n    '&:active:hover': {\n      color: itemTextHoveredOrPressedColor,\n      backgroundColor: itemBackgroundPressedColor,\n    },\n    '&:active, &:hover, &:active:hover': {\n      textDecoration: 'none',\n    },\n  };\n\n  const commonItemStyles: IRawStyle = {\n    color: itemTextColor,\n    padding: '0 8px',\n    lineHeight: itemLineHeight,\n    fontSize: itemFontSize,\n    fontWeight: itemTextFontWeight,\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        margin: '11px 0 1px',\n      },\n      className,\n    ],\n\n    list: [\n      classNames.list,\n      {\n        whiteSpace: 'nowrap',\n        padding: 0,\n        margin: 0,\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n\n    listItem: [\n      classNames.listItem,\n      {\n        listStyleType: 'none',\n        margin: '0',\n        padding: '0',\n        display: 'flex',\n        position: 'relative',\n        alignItems: 'center',\n        selectors: {\n          '&:last-child .ms-Breadcrumb-itemLink': {\n            ...lastChildItemStyles,\n            [HighContrastSelector]: {\n              MsHighContrastAdjust: 'auto',\n              forcedColorAdjust: 'auto',\n            },\n          },\n          '&:last-child .ms-Breadcrumb-item': lastChildItemStyles,\n        },\n      },\n    ],\n\n    chevron: [\n      classNames.chevron,\n      {\n        color: chevronButtonColor,\n        fontSize: fonts.small.fontSize,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n          [MediumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n          [MinimumScreenSelector]: {\n            fontSize: chevronSmallFontSize,\n          },\n        },\n      },\n    ],\n\n    overflow: [\n      classNames.overflow,\n      {\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n\n    overflowButton: [\n      classNames.overflowButton,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        fontSize: overflowButtonFontSize,\n        color: overflowButtonColor,\n        height: '100%',\n        cursor: 'pointer',\n        selectors: {\n          ...itemStateSelectors,\n          [MinimumScreenSelector]: {\n            padding: '4px 6px',\n          },\n          [MediumScreenSelector]: {\n            fontSize: fonts.mediumPlus.fontSize,\n          },\n        },\n      },\n    ],\n\n    itemLink: [\n      classNames.itemLink,\n      getFocusStyle(theme),\n      SingleLineTextStyle,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':focus': {\n            color: palette.neutralDark,\n          },\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            outline: `none`,\n          },\n          ...itemStateSelectors,\n        },\n      },\n    ],\n\n    item: [\n      classNames.item,\n      {\n        ...commonItemStyles,\n        selectors: {\n          ':hover': {\n            cursor: 'default',\n          },\n        },\n      },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}