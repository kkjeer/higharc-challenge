{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\n\nexport var useSetTimeout = function () {\n  var timeoutIds = useConst({}); // Cleanup function.\n\n  React.useEffect(function () {\n    return function () {\n      for (var _i = 0, _a = Object.keys(timeoutIds); _i < _a.length; _i++) {\n        var id = _a[_i]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        clearTimeout(id);\n      }\n    };\n  }, // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n  [timeoutIds]); // Return wrapper which will auto cleanup.\n\n  return useConst({\n    setTimeout: function (func, duration) {\n      var id = setTimeout(func, duration);\n      timeoutIds[id] = 1;\n      return id;\n    },\n    clearTimeout: function (id) {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    }\n  });\n};","map":{"version":3,"sources":["useSetTimeout.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,YAAzB;AAOA;;AAEG;;AACH,OAAO,IAAM,aAAa,GAAG,YAAA;EAC3B,IAAM,UAAU,GAAG,QAAQ,CAAyB,EAAzB,CAA3B,CAD2B,CAG3B;;EACA,KAAK,CAAC,SAAN,CACE,YAAA;IAAM,OAAA,YAAA;MACJ,KAAiB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAjB,EAAiB,EAAA,GAAA,EAAA,CAAA,MAAjB,EAAiB,EAAA,EAAjB,EAA0C;QAArC,IAAM,EAAE,GAAA,EAAA,CAAA,EAAA,CAAR,CAAqC,CACxC;;QACA,YAAY,CAAC,EAAD,CAAZ;MACD;IAJG,CAAA;EAKL,CANH,EAOE;EACA,CAAC,UAAD,CARF,EAJ2B,CAe3B;;EACA,OAAO,QAAQ,CAAC;IACd,UAAU,EAAE,UAAC,IAAD,EAAmB,QAAnB,EAAmC;MAC7C,IAAM,EAAE,GAAI,UAAU,CAAC,IAAD,EAAO,QAAP,CAAtB;MAEA,UAAU,CAAC,EAAD,CAAV,GAAiB,CAAjB;MAEA,OAAO,EAAP;IACD,CAPa;IASd,YAAY,EAAE,UAAC,EAAD,EAAW;MACvB,OAAO,UAAU,CAAC,EAAD,CAAjB;MACA,YAAY,CAAC,EAAD,CAAZ;IACD;EAZa,CAAD,CAAf;AAcD,CA9BM","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetTimeoutReturnType = {\n  setTimeout: (callback: () => void, duration: number) => number;\n  clearTimeout: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport const useSetTimeout = (): UseSetTimeoutReturnType => {\n  const timeoutIds = useConst<Record<number, number>>({});\n\n  // Cleanup function.\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(timeoutIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearTimeout(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [timeoutIds],\n  );\n\n  // Return wrapper which will auto cleanup.\n  return useConst({\n    setTimeout: (func: () => void, duration: number): number => {\n      const id = (setTimeout(func, duration) as unknown) as number;\n\n      timeoutIds[id] = 1;\n\n      return id;\n    },\n\n    clearTimeout: (id: number): void => {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    },\n  });\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}