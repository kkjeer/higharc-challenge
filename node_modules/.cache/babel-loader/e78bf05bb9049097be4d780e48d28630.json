{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, divProperties, doesElementContainFocus, getDocument, getNativeProps, getPropsWithDefaults, getWindow, modalize } from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\n\nfunction useScrollbarAsync(props, root) {\n  var async = useAsync();\n\n  var _a = React.useState(false),\n      needsVerticalScrollBarState = _a[0],\n      setNeedsVerticalScrollBar = _a[1];\n\n  React.useEffect(function () {\n    async.requestAnimationFrame(function () {\n      var _a; // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n\n\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      var needsVerticalScrollBar = false;\n\n      if (root && root.current && ((_a = root.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        var rootHeight = root.current.clientHeight;\n        var firstChildHeight = root.current.firstElementChild.clientHeight;\n\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n    return function () {\n      return async.dispose();\n    };\n  });\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options) {\n  var originalElement = options.originalElement,\n      containsFocus = options.containsFocus;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(function () {\n      var _a;\n\n      (_a = originalElement.focus) === null || _a === void 0 ? void 0 : _a.call(originalElement);\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props, root) {\n  var _a = props.onRestoreFocus,\n      onRestoreFocus = _a === void 0 ? defaultFocusRestorer : _a;\n  var originalFocusedElement = React.useRef();\n  var containsFocus = React.useRef(false);\n  React.useEffect(function () {\n    originalFocusedElement.current = getDocument().activeElement;\n\n    if (doesElementContainFocus(root.current)) {\n      containsFocus.current = true;\n    }\n\n    return function () {\n      var _a;\n\n      onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: ((_a = getDocument()) === null || _a === void 0 ? void 0 : _a.hasFocus()) || false\n      }); // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n\n      originalFocusedElement.current = undefined;\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n  useOnEvent(root, 'focus', React.useCallback(function () {\n    containsFocus.current = true;\n  }, []), true);\n  useOnEvent(root, 'blur', React.useCallback(function (ev) {\n    /** The popup should update this._containsFocus when:\n     * relatedTarget exists AND\n     * the relatedTarget is not contained within the popup.\n     * If the relatedTarget is within the popup, that means the popup still has focus\n     * and focused moved from one element to another within the popup.\n     * If relatedTarget is undefined or null that usually means that a\n     * keyboard event occurred and focus didn't change\n     */\n    if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget)) {\n      containsFocus.current = false;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n\n  }, []), true);\n}\n\nfunction useHideSiblingNodes(props, root) {\n  // eslint-disable-next-line deprecation/deprecation\n  var shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n  React.useEffect(function () {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    var unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n/**\n * This adds accessibility to Dialog and Panel controls\n */\n\n\nexport var Popup = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults({\n    shouldRestoreFocus: true,\n    enableAriaHiddenSiblings: true\n  }, propsWithoutDefaults);\n  var root = React.useRef();\n  var mergedRootRef = useMergedRefs(root, forwardedRef);\n  useHideSiblingNodes(props, root);\n  useRestoreFocus(props, root);\n  var role = props.role,\n      className = props.className,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy,\n      ariaDescribedBy = props.ariaDescribedBy,\n      style = props.style,\n      children = props.children,\n      onDismiss = props.onDismiss;\n  var needsVerticalScrollBar = useScrollbarAsync(props, root);\n  var onKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        if (onDismiss) {\n          onDismiss(ev);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  }, [onDismiss]);\n  var win = useWindow();\n  useOnEvent(win, 'keydown', onKeyDown);\n  return React.createElement(\"div\", __assign({\n    ref: mergedRootRef\n  }, getNativeProps(props, divProperties), {\n    className: className,\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    onKeyDown: onKeyDown,\n    style: __assign({\n      overflowY: needsVerticalScrollBar ? 'scroll' : undefined,\n      outline: 'none'\n    }, style)\n  }), children);\n});\nPopup.displayName = 'Popup';","map":{"version":3,"sources":["components/Popup/Popup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  divProperties,\n  doesElementContainFocus,\n  getDocument,\n  getNativeProps,\n  getPropsWithDefaults,\n  getWindow,\n  modalize,\n} from '../../Utilities';\nimport { useMergedRefs, useAsync, useOnEvent } from '@fluentui/react-hooks';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { IPopupProps, IPopupRestoreFocusParams } from './Popup.types';\n\nfunction useScrollbarAsync(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const async = useAsync();\n  const [needsVerticalScrollBarState, setNeedsVerticalScrollBar] = React.useState(false);\n  React.useEffect(() => {\n    async.requestAnimationFrame(() => {\n      // If overflowY is overridden, don't waste time calculating whether the scrollbar is necessary.\n      if (props.style && props.style.overflowY) {\n        return;\n      }\n\n      let needsVerticalScrollBar = false;\n      if (root && root.current && root.current?.firstElementChild) {\n        // ClientHeight returns the client height of an element rounded to an\n        // integer. On some browsers at different zoom levels this rounding\n        // can generate different results for the root container and child even\n        // though they are the same height. This causes us to show a scroll bar\n        // when not needed. Ideally we would use BoundingClientRect().height\n        // instead however seems that the API is 90% slower than using ClientHeight.\n        // Therefore instead we will calculate the difference between heights and\n        // allow for a 1px difference to still be considered ok and not show the\n        // scroll bar.\n        const rootHeight = root.current.clientHeight;\n        const firstChildHeight = root.current.firstElementChild.clientHeight;\n        if (rootHeight > 0 && firstChildHeight > rootHeight) {\n          needsVerticalScrollBar = firstChildHeight - rootHeight > 1;\n        }\n      }\n      if (needsVerticalScrollBarState !== needsVerticalScrollBar) {\n        setNeedsVerticalScrollBar(needsVerticalScrollBar);\n      }\n    });\n\n    return () => async.dispose();\n  });\n\n  return needsVerticalScrollBarState;\n}\n\nfunction defaultFocusRestorer(options: IPopupRestoreFocusParams) {\n  const { originalElement, containsFocus } = options;\n\n  if (originalElement && containsFocus && originalElement !== getWindow()) {\n    // Make sure that the focus method actually exists\n    // In some cases the object might exist but not be a real element.\n    // This is primarily for IE 11 and should be removed once IE 11 is no longer in use.\n    // This is wrapped in a setTimeout because of a React 16 bug that is resolved in 17.\n    // Once we move to 17, the setTimeout should be removed (ref: https://github.com/facebook/react/issues/17894#issuecomment-656094405)\n    setTimeout(() => {\n      originalElement.focus?.();\n    }, 0);\n  }\n}\n\nfunction useRestoreFocus(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  const { onRestoreFocus = defaultFocusRestorer } = props;\n  const originalFocusedElement = React.useRef<HTMLElement>();\n  const containsFocus = React.useRef(false);\n\n  React.useEffect(() => {\n    originalFocusedElement.current = getDocument()!.activeElement as HTMLElement;\n\n    if (doesElementContainFocus(root.current!)) {\n      containsFocus.current = true;\n    }\n\n    return () => {\n      onRestoreFocus?.({\n        originalElement: originalFocusedElement.current,\n        containsFocus: containsFocus.current,\n        documentContainsFocus: getDocument()?.hasFocus() || false,\n      });\n\n      // De-reference DOM Node to avoid retainment via transpiled closure of _onKeyDown\n      originalFocusedElement.current = undefined;\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n  }, []);\n\n  useOnEvent(\n    root,\n    'focus',\n    React.useCallback((): void => {\n      containsFocus.current = true;\n    }, []),\n    true,\n  );\n\n  useOnEvent(\n    root,\n    'blur',\n    React.useCallback((ev: FocusEvent): void => {\n      /** The popup should update this._containsFocus when:\n       * relatedTarget exists AND\n       * the relatedTarget is not contained within the popup.\n       * If the relatedTarget is within the popup, that means the popup still has focus\n       * and focused moved from one element to another within the popup.\n       * If relatedTarget is undefined or null that usually means that a\n       * keyboard event occurred and focus didn't change\n       */\n      if (root.current && ev.relatedTarget && !root.current.contains(ev.relatedTarget as HTMLElement)) {\n        containsFocus.current = false;\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run on first render\n    }, []),\n    true,\n  );\n}\n\nfunction useHideSiblingNodes(props: IPopupProps, root: React.RefObject<HTMLDivElement | undefined>) {\n  // eslint-disable-next-line deprecation/deprecation\n  const shouldHideSiblings = String(props['aria-modal']).toLowerCase() === 'true' && props.enableAriaHiddenSiblings;\n\n  React.useEffect(() => {\n    if (!(shouldHideSiblings && root.current)) {\n      return;\n    }\n\n    const unmodalize = modalize(root.current);\n    return unmodalize;\n  }, [root, shouldHideSiblings]);\n}\n\n/**\n * This adds accessibility to Dialog and Panel controls\n */\nexport const Popup: React.FunctionComponent<IPopupProps> = React.forwardRef<HTMLDivElement, IPopupProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(\n      { shouldRestoreFocus: true, enableAriaHiddenSiblings: true },\n      propsWithoutDefaults,\n    );\n\n    const root = React.useRef<HTMLDivElement>();\n    const mergedRootRef = useMergedRefs(root, forwardedRef) as React.Ref<HTMLDivElement>;\n\n    useHideSiblingNodes(props, root);\n    useRestoreFocus(props, root);\n\n    const { role, className, ariaLabel, ariaLabelledBy, ariaDescribedBy, style, children, onDismiss } = props;\n    const needsVerticalScrollBar = useScrollbarAsync(props, root);\n\n    const onKeyDown = React.useCallback(\n      (ev: React.KeyboardEvent<HTMLElement> | KeyboardEvent): void => {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.escape:\n            if (onDismiss) {\n              onDismiss(ev);\n\n              ev.preventDefault();\n              ev.stopPropagation();\n            }\n\n            break;\n        }\n      },\n      [onDismiss],\n    );\n\n    const win = useWindow();\n    useOnEvent(win, 'keydown', onKeyDown as (ev: Event) => void);\n\n    return (\n      <div\n        ref={mergedRootRef}\n        {...getNativeProps(props, divProperties)}\n        className={className}\n        role={role}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        onKeyDown={onKeyDown}\n        style={{ overflowY: needsVerticalScrollBar ? 'scroll' : undefined, outline: 'none', ...style }}\n      >\n        {children}\n      </div>\n    );\n  },\n);\nPopup.displayName = 'Popup';\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}