{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { useConst, useIsomorphicLayoutEffect, usePrevious } from '@fluentui/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\n\nexport function useKeytipData(options) {\n  var uniqueId = React.useRef();\n  var keytipProps = options.keytipProps ? __assign({\n    disabled: options.disabled\n  }, options.keytipProps) : undefined;\n  var keytipManager = useConst(KeytipManager.getInstance());\n  var prevOptions = usePrevious(options); // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n\n  useIsomorphicLayoutEffect(function () {\n    if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n  useIsomorphicLayoutEffect(function () {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return function () {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);\n    }; // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var nativeKeytipProps = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\n\nfunction getKeytipData(keytipManager, keytipProps, describedByPrepend) {\n  // Add the parent overflow sequence if necessary\n  var newKeytipProps = keytipManager.addParentOverflow(keytipProps); // Construct aria-describedby and data-ktp-id attributes\n\n  var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));\n\n  var keySequences = __spreadArray([], newKeytipProps.keySequences);\n\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n\n  var keytipId = sequencesToID(keySequences);\n  return {\n    ariaDescribedBy: ariaDescribedBy,\n    keytipId: keytipId\n  };\n}","map":{"version":3,"sources":["components/KeytipData/useKeytipData.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,EAAmB,yBAAnB,EAA8C,WAA9C,QAAiE,uBAAjE;AACA,SAAS,wBAAT,QAAyC,iBAAzC;AACA,SAAS,aAAT,EAAwB,cAAxB,EAAwC,aAAxC,EAAuD,kBAAvD,QAAiF,+BAAjF;AASA;;AAEG;;AACH,OAAM,SAAU,aAAV,CAAwB,OAAxB,EAAkD;EACtD,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,EAAjB;EACA,IAAM,WAAW,GAA6B,OAAO,CAAC,WAAR,GAC3C,QAAA,CAAA;IACG,QAAQ,EAAE,OAAO,CAAC;EADrB,CAAA,EAEM,OAAO,CAAC,WAFd,CAD2C,GAK1C,SALJ;EAOA,IAAM,aAAa,GAAG,QAAQ,CAAgB,aAAa,CAAC,WAAd,EAAhB,CAA9B;EACA,IAAM,WAAW,GAAG,WAAW,CAAC,OAAD,CAA/B,CAVsD,CAYtD;;EACA,yBAAyB,CAAC,YAAA;IACxB,IACE,QAAQ,CAAC,OAAT,IACA,WADA,KAEC,CAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,WAAb,MAA6B,OAAO,CAAC,WAArC,IAAoD,CAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,QAAb,MAA0B,OAAO,CAAC,QAFvF,CADF,EAIE;MACA,aAAa,CAAC,MAAd,CAAqB,WAArB,EAAkC,QAAQ,CAAC,OAA3C;IACD;EACF,CARwB,CAAzB;EAUA,yBAAyB,CAAC,YAAA;IACxB;IACA,IAAI,WAAJ,EAAiB;MACf,QAAQ,CAAC,OAAT,GAAmB,aAAa,CAAC,QAAd,CAAuB,WAAvB,CAAnB;IACD;;IAED,OAAO,YAAA;MACL;MACA,WAAW,IAAI,aAAa,CAAC,UAAd,CAAyB,WAAzB,EAAsC,QAAQ,CAAC,OAA/C,CAAf;IACD,CAHD,CANwB,CAUxB;IACA;EACD,CAZwB,EAYtB,EAZsB,CAAzB;EAcA,IAAI,iBAAiB,GAAgB;IACnC,eAAe,EAAE,SADkB;IAEnC,QAAQ,EAAE;EAFyB,CAArC;;EAKA,IAAI,WAAJ,EAAiB;IACf,iBAAiB,GAAG,aAAa,CAAC,aAAD,EAAgB,WAAhB,EAA6B,OAAO,CAAC,eAArC,CAAjC;EACD;;EAED,OAAO,iBAAP;AACD;AAED;;;;AAIG;;AACH,SAAS,aAAT,CACE,aADF,EAEE,WAFF,EAGE,kBAHF,EAG6B;EAE3B;EACA,IAAM,cAAc,GAAG,aAAa,CAAC,iBAAd,CAAgC,WAAhC,CAAvB,CAH2B,CAK3B;;EACA,IAAM,eAAe,GAAG,wBAAwB,CAC9C,kBAD8C,EAE9C,kBAAkB,CAAC,cAAc,CAAC,YAAhB,CAF4B,CAAhD;;EAKA,IAAI,YAAY,GAAA,aAAA,CAAA,EAAA,EAAO,cAAc,CAAC,YAAtB,CAAhB;;EACA,IAAI,cAAc,CAAC,mBAAnB,EAAwC;IACtC,YAAY,GAAG,cAAc,CAAC,YAAD,EAAe,cAAc,CAAC,mBAA9B,CAA7B;EACD;;EACD,IAAM,QAAQ,GAAG,aAAa,CAAC,YAAD,CAA9B;EAEA,OAAO;IACL,eAAe,EAAA,eADV;IAEL,QAAQ,EAAA;EAFH,CAAP;AAID","sourcesContent":["import * as React from 'react';\nimport { useConst, useIsomorphicLayoutEffect, usePrevious } from '@fluentui/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\nimport type { KeytipDataOptions } from './KeytipData.types';\nimport type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n  const prevOptions = usePrevious(options);\n\n  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n  useIsomorphicLayoutEffect(() => {\n    if (\n      uniqueId.current &&\n      keytipProps &&\n      (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n    ) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}