{"ast":null,"code":"import { Customizations, mergeSettings } from '@fluentui/utilities';\n/**\n * @internal\n * This function is still in experimental phase in support of Foundation experimental development.\n * Its API signature and existence are subject to change.\n *\n * Modify context to activate the specified scheme or theme. For schemes, look in context (if available) and fall back\n * to global Customizations. If both scheme and theme are specified, scheme will be looked up in theme. In this case,\n * scheme must be present in theme arg, otherwise new context will default to theme arg (there is no fallback to\n * settings to look up scheme.)\n *\n * @param context - Context in which to get schemed customizations.\n * @param scheme - Scheme to get customizations for from theme arg (if supplied) OR from context and global settings.\n * @param theme - Theme to merge into context.\n * @returns modified schemed context if scheme is valid and not already applied, unmodified context otherwise.\n */\n\nexport function getThemedContext(context, scheme, theme) {\n  var newContext = context;\n  var newSettings; // Only fall back to context and customizations when theme arg is not provided.\n\n  var schemeSource = theme || Customizations.getSettings(['theme'], undefined, context.customizations).theme;\n\n  if (theme) {\n    newSettings = {\n      theme: theme\n    };\n  }\n\n  var schemeTheme = scheme && schemeSource && schemeSource.schemes && schemeSource.schemes[scheme]; // These first two checks are logically redundant but TS doesn't infer schemeSource.schemes is defined\n  // when schemeTheme is defined.\n\n  if (schemeSource && schemeTheme && schemeSource !== schemeTheme) {\n    newSettings = {\n      theme: schemeTheme\n    };\n    newSettings.theme.schemes = schemeSource.schemes;\n  }\n\n  if (newSettings) {\n    newContext = {\n      customizations: {\n        settings: mergeSettings(context.customizations.settings, newSettings),\n        scopedSettings: context.customizations.scopedSettings\n      }\n    };\n  }\n\n  return newContext;\n}","map":{"version":3,"sources":["styles/scheme.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,EAAyB,aAAzB,QAA8C,qBAA9C;AAIA;;;;;;;;;;;;;;AAcG;;AACH,OAAM,SAAU,gBAAV,CACJ,OADI,EAEJ,MAFI,EAGJ,KAHI,EAGU;EAEd,IAAI,UAAU,GAAuB,OAArC;EACA,IAAI,WAAJ,CAHc,CAKd;;EACA,IAAI,YAAY,GAAG,KAAK,IAAI,cAAc,CAAC,WAAf,CAA2B,CAAC,OAAD,CAA3B,EAAsC,SAAtC,EAAiD,OAAO,CAAC,cAAzD,EAAyE,KAArG;;EAEA,IAAI,KAAJ,EAAW;IACT,WAAW,GAAG;MAAE,KAAK,EAAA;IAAP,CAAd;EACD;;EAED,IAAM,WAAW,GACf,MAAM,IAAI,YAAV,IAA0B,YAAY,CAAC,OAAvC,IAAkD,YAAY,CAAC,OAAb,CAAqB,MAArB,CADpD,CAZc,CAed;EACA;;EACA,IAAI,YAAY,IAAI,WAAhB,IAA+B,YAAY,KAAK,WAApD,EAAiE;IAC/D,WAAW,GAAG;MAAE,KAAK,EAAE;IAAT,CAAd;IACA,WAAW,CAAC,KAAZ,CAAkB,OAAlB,GAA4B,YAAY,CAAC,OAAzC;EACD;;EAED,IAAI,WAAJ,EAAiB;IACf,UAAU,GAAG;MACX,cAAc,EAAE;QACd,QAAQ,EAAE,aAAa,CAAC,OAAO,CAAC,cAAR,CAAuB,QAAxB,EAAkC,WAAlC,CADT;QAEd,cAAc,EAAE,OAAO,CAAC,cAAR,CAAuB;MAFzB;IADL,CAAb;EAMD;;EAED,OAAO,UAAP;AACD","sourcesContent":["import { Customizations, mergeSettings } from '@fluentui/utilities';\nimport type { ICustomizerContext } from '@fluentui/utilities';\nimport type { ISchemeNames, ITheme } from '../interfaces/index';\n\n/**\n * @internal\n * This function is still in experimental phase in support of Foundation experimental development.\n * Its API signature and existence are subject to change.\n *\n * Modify context to activate the specified scheme or theme. For schemes, look in context (if available) and fall back\n * to global Customizations. If both scheme and theme are specified, scheme will be looked up in theme. In this case,\n * scheme must be present in theme arg, otherwise new context will default to theme arg (there is no fallback to\n * settings to look up scheme.)\n *\n * @param context - Context in which to get schemed customizations.\n * @param scheme - Scheme to get customizations for from theme arg (if supplied) OR from context and global settings.\n * @param theme - Theme to merge into context.\n * @returns modified schemed context if scheme is valid and not already applied, unmodified context otherwise.\n */\nexport function getThemedContext(\n  context: ICustomizerContext,\n  scheme?: ISchemeNames,\n  theme?: ITheme,\n): ICustomizerContext {\n  let newContext: ICustomizerContext = context;\n  let newSettings;\n\n  // Only fall back to context and customizations when theme arg is not provided.\n  let schemeSource = theme || Customizations.getSettings(['theme'], undefined, context.customizations).theme;\n\n  if (theme) {\n    newSettings = { theme };\n  }\n\n  const schemeTheme: ITheme | undefined =\n    scheme && schemeSource && schemeSource.schemes && schemeSource.schemes[scheme];\n\n  // These first two checks are logically redundant but TS doesn't infer schemeSource.schemes is defined\n  // when schemeTheme is defined.\n  if (schemeSource && schemeTheme && schemeSource !== schemeTheme) {\n    newSettings = { theme: schemeTheme };\n    newSettings.theme.schemes = schemeSource.schemes;\n  }\n\n  if (newSettings) {\n    newContext = {\n      customizations: {\n        settings: mergeSettings(context.customizations.settings, newSettings),\n        scopedSettings: context.customizations.scopedSettings,\n      },\n    };\n  }\n\n  return newContext;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}