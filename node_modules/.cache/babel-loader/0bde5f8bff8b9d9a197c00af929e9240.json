{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar SVG_REGEX = /\\.svg$/i;\nvar KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(props, imageElement) {\n  var onLoadingStateChange = props.onLoadingStateChange,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      src = props.src;\n\n  var _a = React.useState(ImageLoadState.notLoaded),\n      loadState = _a[0],\n      setLoadState = _a[1];\n\n  useIsomorphicLayoutEffect(function () {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]); // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n\n  React.useEffect(function () {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n  React.useEffect(function () {\n    onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState); // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n  var onImageLoaded = React.useCallback(function (ev) {\n    onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);\n\n    if (src) {\n      setLoadState(ImageLoadState.loaded);\n    }\n  }, [src, onLoad]);\n  var onImageError = React.useCallback(function (ev) {\n    onError === null || onError === void 0 ? void 0 : onError(ev);\n    setLoadState(ImageLoadState.error);\n  }, [onError]);\n  return [loadState, onImageLoaded, onImageError];\n}\n\nexport var ImageBase = React.forwardRef(function (props, forwardedRef) {\n  var frameElement = React.useRef();\n  var imageElement = React.useRef();\n\n  var _a = useLoadState(props, imageElement),\n      loadState = _a[0],\n      onImageLoaded = _a[1],\n      onImageError = _a[2];\n\n  var imageProps = getNativeProps(props, imgProperties, ['width', 'height']);\n  var src = props.src,\n      alt = props.alt,\n      width = props.width,\n      height = props.height,\n      _b = props.shouldFadeIn,\n      shouldFadeIn = _b === void 0 ? true : _b,\n      shouldStartVisible = props.shouldStartVisible,\n      className = props.className,\n      imageFit = props.imageFit,\n      role = props.role,\n      maximizeFrame = props.maximizeFrame,\n      styles = props.styles,\n      theme = props.theme,\n      loading = props.loading;\n  var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    width: width,\n    height: height,\n    maximizeFrame: maximizeFrame,\n    shouldFadeIn: shouldFadeIn,\n    shouldStartVisible: shouldStartVisible,\n    isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,\n    isLandscape: coverStyle === ImageCoverStyle.landscape,\n    isCenter: imageFit === ImageFit.center,\n    isCenterContain: imageFit === ImageFit.centerContain,\n    isCenterCover: imageFit === ImageFit.centerCover,\n    isContain: imageFit === ImageFit.contain,\n    isCover: imageFit === ImageFit.cover,\n    isNone: imageFit === ImageFit.none,\n    isError: loadState === ImageLoadState.error,\n    isNotImageFit: imageFit === undefined\n  }); // If image dimensions aren't specified, the natural size of the image is used.\n\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    style: {\n      width: width,\n      height: height\n    },\n    ref: frameElement\n  }, React.createElement(\"img\", __assign({}, imageProps, {\n    onLoad: onImageLoaded,\n    onError: onImageError,\n    key: KEY_PREFIX + props.src || '',\n    className: classNames.image,\n    ref: useMergedRefs(imageElement, forwardedRef),\n    src: src,\n    alt: alt,\n    role: role,\n    loading: loading\n  })));\n});\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(props, loadState, imageElement, frameElement) {\n  var previousLoadState = React.useRef(loadState);\n  var coverStyle = React.useRef();\n\n  if (coverStyle === undefined || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n  return coverStyle.current;\n}\n\nfunction computeCoverStyle(props, loadState, imageElement, frameElement) {\n  var imageFit = props.imageFit,\n      width = props.width,\n      height = props.height; // Do not compute cover style if it was already specified in props\n\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    var desiredRatio = void 0;\n\n    if (typeof width === 'number' && typeof height === 'number' && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    } // Examine the source image to determine its original ratio.\n\n\n    var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight; // Should we crop from the top or the sides?\n\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n\n  return ImageCoverStyle.portrait;\n}","map":{"version":3,"sources":["components/Image/Image.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst SVG_REGEX = /\\.svg$/i;\nconst KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(\n  props: IImageProps,\n  imageElement: React.RefObject<HTMLImageElement>,\n): readonly [\n  ImageLoadState,\n  /* onImageLoad */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n  /* onImageError */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n] {\n  const { onLoadingStateChange, onLoad, onError, src } = props;\n\n  const [loadState, setLoadState] = React.useState<ImageLoadState>(ImageLoadState.notLoaded);\n\n  useIsomorphicLayoutEffect(() => {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(() => {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = imageElement.current\n        ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||\n          (imageElement.current.complete && SVG_REGEX.test(src!))\n        : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    onLoadingStateChange?.(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n\n  const onImageLoaded = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onLoad?.(ev);\n      if (src) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    },\n    [src, onLoad],\n  );\n\n  const onImageError = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onError?.(ev);\n      setLoadState(ImageLoadState.error);\n    },\n    [onError],\n  );\n\n  return [loadState, onImageLoaded, onImageError] as const;\n}\n\nexport const ImageBase: React.FunctionComponent<IImageProps> = React.forwardRef<HTMLImageElement, IImageProps>(\n  (props, forwardedRef) => {\n    const frameElement = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    const imageElement = React.useRef<HTMLImageElement>() as React.RefObject<HTMLImageElement>;\n    const [loadState, onImageLoaded, onImageError] = useLoadState(props, imageElement);\n\n    const imageProps = getNativeProps<React.ImgHTMLAttributes<HTMLImageElement>>(props, imgProperties, [\n      'width',\n      'height',\n    ]);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn = true,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      styles,\n      theme,\n      loading,\n    } = props;\n    const coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      width,\n      height,\n      maximizeFrame,\n      shouldFadeIn,\n      shouldStartVisible,\n      isLoaded:\n        loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),\n      isLandscape: coverStyle === ImageCoverStyle.landscape,\n      isCenter: imageFit === ImageFit.center,\n      isCenterContain: imageFit === ImageFit.centerContain,\n      isCenterCover: imageFit === ImageFit.centerCover,\n      isContain: imageFit === ImageFit.contain,\n      isCover: imageFit === ImageFit.cover,\n      isNone: imageFit === ImageFit.none,\n      isError: loadState === ImageLoadState.error,\n      isNotImageFit: imageFit === undefined,\n    });\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div className={classNames.root} style={{ width: width, height: height }} ref={frameElement}>\n        <img\n          {...imageProps}\n          onLoad={onImageLoaded}\n          onError={onImageError}\n          key={KEY_PREFIX + props.src || ''}\n          className={classNames.image}\n          ref={useMergedRefs(imageElement, forwardedRef)}\n          src={src}\n          alt={alt}\n          role={role}\n          loading={loading}\n        />\n      </div>\n    );\n  },\n);\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n) {\n  const previousLoadState = React.useRef(loadState);\n  const coverStyle = React.useRef<ImageCoverStyle | undefined>();\n\n  if (\n    coverStyle === undefined ||\n    (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)\n  ) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n\n  return coverStyle.current!;\n}\n\nfunction computeCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n): ImageCoverStyle {\n  const { imageFit, width, height } = props;\n\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (\n    loadState === ImageLoadState.loaded &&\n    (imageFit === ImageFit.cover ||\n      imageFit === ImageFit.contain ||\n      imageFit === ImageFit.centerContain ||\n      imageFit === ImageFit.centerCover) &&\n    imageElement.current &&\n    frameElement.current\n  ) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    let desiredRatio;\n    if (\n      typeof width === 'number' &&\n      typeof height === 'number' &&\n      imageFit !== ImageFit.centerContain &&\n      imageFit !== ImageFit.centerCover\n    ) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n\n    // Examine the source image to determine its original ratio.\n    const naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}