{"ast":null,"code":"import * as React from 'react';\nimport { FocusZone } from '../../../FocusZone';\nimport { addYears, setMonth, getYearStart, getYearEnd, getMonthStart, getMonthEnd, compareDatePart, DEFAULT_DATE_FORMATTING } from '@fluentui/date-time-utilities';\nimport { Icon } from '../../../Icon';\nimport { getStyles } from './CalendarMonth.styles';\nimport { css, getRTL, classNamesFunction, KeyCodes, format, getPropsWithDefaults } from '@fluentui/utilities';\nimport { CalendarYear } from '../CalendarYear/CalendarYear';\nimport { usePrevious } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from '../defaults';\nvar MONTHS_PER_ROW = 4;\nvar getClassNames = classNamesFunction();\nvar DEFAULT_PROPS = {\n  styles: getStyles,\n  strings: undefined,\n  navigationIcons: defaultCalendarNavigationIcons,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  yearPickerHidden: false\n};\n\nfunction useAnimateBackwards(_a) {\n  var navigatedDate = _a.navigatedDate;\n  var currentYear = navigatedDate.getFullYear();\n  var previousYear = usePrevious(currentYear);\n\n  if (previousYear === undefined || previousYear === currentYear) {\n    return undefined;\n  } else {\n    return previousYear > currentYear;\n  }\n}\n\nfunction useFocusLogic(_a) {\n  var componentRef = _a.componentRef;\n  var navigatedMonthRef = React.useRef(null);\n  var calendarYearRef = React.useRef(null);\n  var focusOnUpdate = React.useRef(false);\n  var focus = React.useCallback(function () {\n    if (calendarYearRef.current) {\n      calendarYearRef.current.focus();\n    } else if (navigatedMonthRef.current) {\n      navigatedMonthRef.current.focus();\n    }\n  }, []);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: focus\n    };\n  }, [focus]);\n  React.useEffect(function () {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  var focusOnNextUpdate = function () {\n    focusOnUpdate.current = true;\n  };\n\n  return [navigatedMonthRef, calendarYearRef, focusOnNextUpdate];\n}\n\nexport var CalendarMonthBase = function (propsWithoutDefaults) {\n  var _a, _b;\n\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  var _c = useFocusLogic(props),\n      navigatedMonthRef = _c[0],\n      calendarYearRef = _c[1],\n      focusOnNextUpdate = _c[2];\n\n  var _d = React.useState(false),\n      isYearPickerVisible = _d[0],\n      setIsYearPickerVisible = _d[1];\n\n  var animateBackwards = useAnimateBackwards(props);\n  var navigatedDate = props.navigatedDate,\n      selectedDate = props.selectedDate,\n      strings = props.strings,\n      _e = props.today,\n      today = _e === void 0 ? new Date() : _e,\n      navigationIcons = props.navigationIcons,\n      dateTimeFormatter = props.dateTimeFormatter,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      theme = props.theme,\n      styles = props.styles,\n      className = props.className,\n      allFocusable = props.allFocusable,\n      highlightCurrentMonth = props.highlightCurrentMonth,\n      highlightSelectedMonth = props.highlightSelectedMonth,\n      animationDirection = props.animationDirection,\n      yearPickerHidden = props.yearPickerHidden,\n      onNavigateDate = props.onNavigateDate;\n\n  var selectMonthCallback = function (newMonth) {\n    return function () {\n      return onSelectMonth(newMonth);\n    };\n  };\n\n  var onSelectNextYear = function () {\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  var onSelectPrevYear = function () {\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  var onSelectMonth = function (newMonth) {\n    var _a; // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n\n\n    (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props);\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  var onHeaderSelect = function () {\n    var _a;\n\n    if (!yearPickerHidden) {\n      focusOnNextUpdate();\n      setIsYearPickerVisible(true);\n    } else {\n      (_a = props.onHeaderSelect) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  };\n\n  var onSelectYear = function (selectedYear) {\n    focusOnNextUpdate();\n    var navYear = navigatedDate.getFullYear();\n\n    if (navYear !== selectedYear) {\n      var newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear); // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n\n      onNavigateDate(newNavigationDate, true);\n    }\n\n    setIsYearPickerVisible(false);\n  };\n\n  var onYearPickerHeaderSelect = function (focus) {\n    focusOnNextUpdate();\n    setIsYearPickerVisible(false);\n  }; // navigationIcons has a default value in defaultProps, but typescript doesn't recognize this\n\n\n  var leftNavigationIcon = navigationIcons.leftNavigation;\n  var rightNavigationIcon = navigationIcons.rightNavigation;\n  var dateFormatter = dateTimeFormatter; // determine if previous/next years are in bounds\n\n  var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n  var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    hasHeaderClickCallback: !!props.onHeaderSelect || !yearPickerHidden,\n    highlightCurrent: highlightCurrentMonth,\n    highlightSelected: highlightSelectedMonth,\n    animateBackwards: animateBackwards,\n    animationDirection: animationDirection\n  });\n\n  if (isYearPickerVisible) {\n    var _f = getYearStrings(props),\n        onRenderYear = _f[0],\n        yearStrings = _f[1]; // use navigated date for the year picker\n\n\n    return React.createElement(CalendarYear, {\n      key: 'calendarYear',\n      minYear: minDate ? minDate.getFullYear() : undefined,\n      maxYear: maxDate ? maxDate.getFullYear() : undefined,\n      // eslint-disable-next-line react/jsx-no-bind\n      onSelectYear: onSelectYear,\n      navigationIcons: navigationIcons,\n      // eslint-disable-next-line react/jsx-no-bind\n      onHeaderSelect: onYearPickerHeaderSelect,\n      selectedYear: selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined,\n      onRenderYear: onRenderYear,\n      strings: yearStrings,\n      componentRef: calendarYearRef,\n      styles: styles,\n      highlightCurrentYear: highlightCurrentMonth,\n      highlightSelectedYear: highlightSelectedMonth,\n      animationDirection: animationDirection\n    });\n  }\n\n  var rowIndexes = [];\n\n  for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n    rowIndexes.push(i);\n  }\n\n  var yearString = dateFormatter.formatYear(navigatedDate);\n  var headerAriaLabel = strings.monthPickerHeaderAriaLabel ? format(strings.monthPickerHeaderAriaLabel, yearString) : yearString;\n  return React.createElement(\"div\", {\n    className: classNames.root\n  }, React.createElement(\"div\", {\n    className: classNames.headerContainer\n  }, React.createElement(\"button\", {\n    className: classNames.currentItemButton,\n    onClick: onHeaderSelect,\n    onKeyDown: onButtonKeyDown(onHeaderSelect),\n    \"aria-label\": headerAriaLabel,\n    \"data-is-focusable\": !!props.onHeaderSelect || !yearPickerHidden,\n    tabIndex: !!props.onHeaderSelect || !yearPickerHidden ? 0 : -1,\n    type: \"button\"\n  }, React.createElement(\"span\", {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, yearString)), React.createElement(\"div\", {\n    className: classNames.navigationButtonsContainer\n  }, React.createElement(\"button\", {\n    className: css(classNames.navigationButton, (_a = {}, _a[classNames.disabled] = !isPrevYearInBounds, _a)),\n    \"aria-disabled\": !isPrevYearInBounds,\n    tabIndex: isPrevYearInBounds ? undefined : allFocusable ? 0 : -1,\n    onClick: isPrevYearInBounds ? onSelectPrevYear : undefined,\n    onKeyDown: isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined,\n    title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon\n  })), React.createElement(\"button\", {\n    className: css(classNames.navigationButton, (_b = {}, _b[classNames.disabled] = !isNextYearInBounds, _b)),\n    \"aria-disabled\": !isNextYearInBounds,\n    tabIndex: isNextYearInBounds ? undefined : allFocusable ? 0 : -1,\n    onClick: isNextYearInBounds ? onSelectNextYear : undefined,\n    onKeyDown: isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined,\n    title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon\n  })))), React.createElement(FocusZone, null, React.createElement(\"div\", {\n    className: classNames.gridContainer,\n    role: \"grid\",\n    \"aria-label\": yearString\n  }, rowIndexes.map(function (rowNum) {\n    var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n    return React.createElement(\"div\", {\n      key: 'monthRow_' + rowNum + navigatedDate.getFullYear(),\n      role: \"row\",\n      className: classNames.buttonRow\n    }, monthsForRow.map(function (month, index) {\n      var _a;\n\n      var monthIndex = rowNum * MONTHS_PER_ROW + index;\n      var indexedMonth = setMonth(navigatedDate, monthIndex);\n      var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n      var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n      var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n      var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n      return React.createElement(\"button\", {\n        ref: isNavigatedMonth ? navigatedMonthRef : undefined,\n        role: 'gridcell',\n        className: css(classNames.itemButton, (_a = {}, _a[classNames.current] = highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today), _a[classNames.selected] = highlightSelectedMonth && isSelectedMonth && isSelectedYear, _a[classNames.disabled] = !isInBounds, _a)),\n        disabled: !allFocusable && !isInBounds,\n        key: monthIndex,\n        onClick: isInBounds ? selectMonthCallback(monthIndex) : undefined,\n        onKeyDown: isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined,\n        \"aria-label\": dateFormatter.formatMonth(indexedMonth, strings),\n        \"aria-selected\": isNavigatedMonth,\n        \"data-is-focusable\": isInBounds ? true : undefined,\n        type: \"button\"\n      }, month);\n    }));\n  }))));\n};\nCalendarMonthBase.displayName = 'CalendarMonthBase';\n\nfunction getYearStrings(_a) {\n  var strings = _a.strings,\n      navigatedDate = _a.navigatedDate,\n      dateTimeFormatter = _a.dateTimeFormatter;\n\n  var yearToString = function (year) {\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      var yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n\n    return String(year);\n  };\n\n  var yearRangeToString = function (yearRange) {\n    return yearToString(yearRange.fromYear) + \" - \" + yearToString(yearRange.toYear);\n  };\n\n  var yearRangeToNextDecadeLabel = function (yearRange) {\n    return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + \" \" + yearRangeToString(yearRange) : '';\n  };\n\n  var yearRangeToPrevDecadeLabel = function (yearRange) {\n    return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + \" \" + yearRangeToString(yearRange) : '';\n  };\n\n  return [yearToString, {\n    rangeAriaLabel: yearRangeToString,\n    prevRangeAriaLabel: yearRangeToPrevDecadeLabel,\n    nextRangeAriaLabel: yearRangeToNextDecadeLabel,\n    headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n  }];\n}\n\nfunction isCurrentMonth(month, year, today) {\n  return today.getFullYear() === year && today.getMonth() === month;\n}\n\nfunction onButtonKeyDown(callback) {\n  return function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        callback();\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["components/Calendar/CalendarMonth/CalendarMonth.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FocusZone } from '../../../FocusZone';\nimport {\n  addYears,\n  setMonth,\n  getYearStart,\n  getYearEnd,\n  getMonthStart,\n  getMonthEnd,\n  compareDatePart,\n  DEFAULT_DATE_FORMATTING,\n} from '@fluentui/date-time-utilities';\nimport { Icon } from '../../../Icon';\nimport { getStyles } from './CalendarMonth.styles';\nimport { css, getRTL, classNamesFunction, KeyCodes, format, getPropsWithDefaults } from '@fluentui/utilities';\nimport { CalendarYear } from '../CalendarYear/CalendarYear';\nimport { usePrevious } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from '../defaults';\nimport type { ICalendarMonthProps, ICalendarMonthStyles, ICalendarMonthStyleProps } from './CalendarMonth.types';\nimport type { ICalendarYear, ICalendarYearRange } from '../CalendarYear/CalendarYear.types';\n\nconst MONTHS_PER_ROW = 4;\n\nconst getClassNames = classNamesFunction<ICalendarMonthStyleProps, ICalendarMonthStyles>();\n\nconst DEFAULT_PROPS: Readonly<Partial<ICalendarMonthProps>> = {\n  styles: getStyles,\n  strings: undefined,\n  navigationIcons: defaultCalendarNavigationIcons,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  yearPickerHidden: false,\n};\n\nfunction useAnimateBackwards({ navigatedDate }: ICalendarMonthProps) {\n  const currentYear = navigatedDate.getFullYear();\n  const previousYear = usePrevious(currentYear);\n\n  if (previousYear === undefined || previousYear === currentYear) {\n    return undefined;\n  } else {\n    return previousYear > currentYear;\n  }\n}\n\nfunction useFocusLogic({ componentRef }: ICalendarMonthProps) {\n  const navigatedMonthRef = React.useRef<HTMLButtonElement>(null);\n  const calendarYearRef = React.useRef<ICalendarYear>(null);\n  const focusOnUpdate = React.useRef(false);\n\n  const focus = React.useCallback(() => {\n    if (calendarYearRef.current) {\n      calendarYearRef.current.focus();\n    } else if (navigatedMonthRef.current) {\n      navigatedMonthRef.current.focus();\n    }\n  }, []);\n\n  React.useImperativeHandle(componentRef, () => ({ focus }), [focus]);\n\n  React.useEffect(() => {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  const focusOnNextUpdate = () => {\n    focusOnUpdate.current = true;\n  };\n\n  return [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] as const;\n}\n\nexport const CalendarMonthBase: React.FunctionComponent<ICalendarMonthProps> = propsWithoutDefaults => {\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  const [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] = useFocusLogic(props);\n  const [isYearPickerVisible, setIsYearPickerVisible] = React.useState(false);\n\n  const animateBackwards = useAnimateBackwards(props);\n\n  const {\n    navigatedDate,\n    selectedDate,\n    strings,\n    today = new Date(),\n    navigationIcons,\n    dateTimeFormatter,\n    minDate,\n    maxDate,\n    theme,\n    styles,\n    className,\n    allFocusable,\n    highlightCurrentMonth,\n    highlightSelectedMonth,\n    animationDirection,\n    yearPickerHidden,\n    onNavigateDate,\n  } = props;\n\n  const selectMonthCallback = (newMonth: number): (() => void) => {\n    return () => onSelectMonth(newMonth);\n  };\n\n  const onSelectNextYear = (): void => {\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevYear = (): void => {\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  const onSelectMonth = (newMonth: number): void => {\n    // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n    props.onHeaderSelect?.();\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  const onHeaderSelect = (): void => {\n    if (!yearPickerHidden) {\n      focusOnNextUpdate();\n      setIsYearPickerVisible(true);\n    } else {\n      props.onHeaderSelect?.();\n    }\n  };\n\n  const onSelectYear = (selectedYear: number) => {\n    focusOnNextUpdate();\n    const navYear = navigatedDate.getFullYear();\n    if (navYear !== selectedYear) {\n      let newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear);\n      // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n      onNavigateDate(newNavigationDate, true);\n    }\n    setIsYearPickerVisible(false);\n  };\n\n  const onYearPickerHeaderSelect = (focus: boolean): void => {\n    focusOnNextUpdate();\n    setIsYearPickerVisible(false);\n  };\n\n  // navigationIcons has a default value in defaultProps, but typescript doesn't recognize this\n  const leftNavigationIcon = navigationIcons!.leftNavigation;\n  const rightNavigationIcon = navigationIcons!.rightNavigation;\n  const dateFormatter = dateTimeFormatter!;\n\n  // determine if previous/next years are in bounds\n  const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n  const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className: className,\n    hasHeaderClickCallback: !!props.onHeaderSelect || !yearPickerHidden,\n    highlightCurrent: highlightCurrentMonth,\n    highlightSelected: highlightSelectedMonth,\n    animateBackwards: animateBackwards,\n    animationDirection: animationDirection,\n  });\n\n  if (isYearPickerVisible) {\n    const [onRenderYear, yearStrings] = getYearStrings(props);\n    // use navigated date for the year picker\n    return (\n      <CalendarYear\n        key={'calendarYear'}\n        minYear={minDate ? minDate.getFullYear() : undefined}\n        maxYear={maxDate ? maxDate.getFullYear() : undefined}\n        // eslint-disable-next-line react/jsx-no-bind\n        onSelectYear={onSelectYear}\n        navigationIcons={navigationIcons}\n        // eslint-disable-next-line react/jsx-no-bind\n        onHeaderSelect={onYearPickerHeaderSelect}\n        selectedYear={\n          selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined\n        }\n        onRenderYear={onRenderYear}\n        strings={yearStrings}\n        componentRef={calendarYearRef}\n        styles={styles}\n        highlightCurrentYear={highlightCurrentMonth}\n        highlightSelectedYear={highlightSelectedMonth}\n        animationDirection={animationDirection}\n      />\n    );\n  }\n\n  const rowIndexes = [];\n  for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n    rowIndexes.push(i);\n  }\n\n  const yearString = dateFormatter.formatYear(navigatedDate);\n  const headerAriaLabel = strings.monthPickerHeaderAriaLabel\n    ? format(strings.monthPickerHeaderAriaLabel, yearString)\n    : yearString;\n\n  return (\n    <div className={classNames.root}>\n      <div className={classNames.headerContainer}>\n        <button\n          className={classNames.currentItemButton}\n          onClick={onHeaderSelect}\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          aria-label={headerAriaLabel}\n          data-is-focusable={!!props.onHeaderSelect || !yearPickerHidden}\n          tabIndex={!!props.onHeaderSelect || !yearPickerHidden ? 0 : -1}\n          type=\"button\"\n        >\n          <span aria-live=\"polite\" aria-atomic=\"true\">\n            {yearString}\n          </span>\n        </button>\n        <div className={classNames.navigationButtonsContainer}>\n          <button\n            className={css(classNames.navigationButton, {\n              [classNames.disabled]: !isPrevYearInBounds,\n            })}\n            aria-disabled={!isPrevYearInBounds}\n            tabIndex={isPrevYearInBounds ? undefined : allFocusable ? 0 : -1}\n            onClick={isPrevYearInBounds ? onSelectPrevYear : undefined}\n            onKeyDown={isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined}\n            title={\n              strings.prevYearAriaLabel\n                ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1))\n                : undefined\n            }\n            type=\"button\"\n          >\n            <Icon iconName={getRTL() ? rightNavigationIcon : leftNavigationIcon} />\n          </button>\n          <button\n            className={css(classNames.navigationButton, {\n              [classNames.disabled]: !isNextYearInBounds,\n            })}\n            aria-disabled={!isNextYearInBounds}\n            tabIndex={isNextYearInBounds ? undefined : allFocusable ? 0 : -1}\n            onClick={isNextYearInBounds ? onSelectNextYear : undefined}\n            onKeyDown={isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined}\n            title={\n              strings.nextYearAriaLabel\n                ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1))\n                : undefined\n            }\n            type=\"button\"\n          >\n            <Icon iconName={getRTL() ? leftNavigationIcon : rightNavigationIcon} />\n          </button>\n        </div>\n      </div>\n      <FocusZone>\n        <div className={classNames.gridContainer} role=\"grid\" aria-label={yearString}>\n          {rowIndexes.map((rowNum: number) => {\n            const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n            return (\n              <div key={'monthRow_' + rowNum + navigatedDate.getFullYear()} role=\"row\" className={classNames.buttonRow}>\n                {monthsForRow.map((month: string, index: number) => {\n                  const monthIndex = rowNum * MONTHS_PER_ROW + index;\n                  const indexedMonth = setMonth(navigatedDate, monthIndex);\n                  const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                  const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                  const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n                  const isInBounds =\n                    (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&\n                    (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n\n                  return (\n                    <button\n                      ref={isNavigatedMonth ? navigatedMonthRef : undefined}\n                      role={'gridcell'}\n                      className={css(classNames.itemButton, {\n                        [classNames.current]:\n                          highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today),\n                        [classNames.selected]: highlightSelectedMonth && isSelectedMonth && isSelectedYear,\n                        [classNames.disabled]: !isInBounds,\n                      })}\n                      disabled={!allFocusable && !isInBounds}\n                      key={monthIndex}\n                      onClick={isInBounds ? selectMonthCallback(monthIndex) : undefined}\n                      onKeyDown={isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined}\n                      aria-label={dateFormatter.formatMonth(indexedMonth, strings)}\n                      aria-selected={isNavigatedMonth}\n                      data-is-focusable={isInBounds ? true : undefined}\n                      type=\"button\"\n                    >\n                      {month}\n                    </button>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </FocusZone>\n    </div>\n  );\n};\nCalendarMonthBase.displayName = 'CalendarMonthBase';\n\nfunction getYearStrings({ strings, navigatedDate, dateTimeFormatter }: ICalendarMonthProps) {\n  const yearToString = (year: number) => {\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      const yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n    return String(year);\n  };\n\n  const yearRangeToString = (yearRange: ICalendarYearRange) => {\n    return `${yearToString(yearRange.fromYear)} - ${yearToString(yearRange.toYear)}`;\n  };\n\n  const yearRangeToNextDecadeLabel = (yearRange: ICalendarYearRange) => {\n    return strings.nextYearRangeAriaLabel ? `${strings.nextYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n  };\n\n  const yearRangeToPrevDecadeLabel = (yearRange: ICalendarYearRange) => {\n    return strings.prevYearRangeAriaLabel ? `${strings.prevYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n  };\n\n  return [\n    yearToString,\n    {\n      rangeAriaLabel: yearRangeToString,\n      prevRangeAriaLabel: yearRangeToPrevDecadeLabel,\n      nextRangeAriaLabel: yearRangeToNextDecadeLabel,\n      headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,\n    } as const,\n  ] as const;\n}\n\nfunction isCurrentMonth(month: number, year: number, today: Date): boolean {\n  return today.getFullYear() === year && today.getMonth() === month;\n}\n\nfunction onButtonKeyDown(callback: () => void): (ev: React.KeyboardEvent<HTMLButtonElement>) => void {\n  return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        callback();\n        break;\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}