{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings } from '../GlobalSettings';\nvar CustomizationsGlobalKey = 'customizations';\nvar NO_CUSTOMIZATIONS = {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n};\n\nvar _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n});\n\nvar _events = [];\n\nvar Customizations =\n/** @class */\nfunction () {\n  function Customizations() {}\n\n  Customizations.reset = function () {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  };\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n\n\n  Customizations.applySettings = function (settings) {\n    _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);\n\n    Customizations._raiseChange();\n  };\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n\n\n  Customizations.applyScopedSettings = function (scopeName, settings) {\n    _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);\n\n    Customizations._raiseChange();\n  };\n\n  Customizations.getSettings = function (properties, scopeName, localSettings) {\n    if (localSettings === void 0) {\n      localSettings = NO_CUSTOMIZATIONS;\n    }\n\n    var settings = {};\n    var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};\n    var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};\n\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var property = properties_1[_i];\n      settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];\n    }\n\n    return settings;\n  };\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n\n\n  Customizations.applyBatchedUpdates = function (code, suppressUpdate) {\n    Customizations._suppressUpdates = true;\n\n    try {\n      code();\n    } catch (_a) {\n      /* do nothing */\n    }\n\n    Customizations._suppressUpdates = false;\n\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  };\n\n  Customizations.observe = function (onChange) {\n    _events.push(onChange);\n  };\n\n  Customizations.unobserve = function (onChange) {\n    _events = _events.filter(function (cb) {\n      return cb !== onChange;\n    });\n  };\n\n  Customizations._raiseChange = function () {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach(function (cb) {\n        return cb();\n      });\n    }\n  };\n\n  return Customizations;\n}();\n\nexport { Customizations };","map":{"version":3,"sources":["customizations/Customizations.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalSettings } from '../GlobalSettings';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ISettings = { [key: string]: any };\nexport type ISettingsFunction = (settings: ISettings) => ISettings;\n\n/**\n * @deprecated Use ISettings.\n */\nexport type Settings = ISettings;\n\n/**\n * @deprecated Use ISettingsFunction.\n */\nexport type SettingsFunction = ISettingsFunction;\n\nexport interface ICustomizations {\n  settings: ISettings;\n  scopedSettings: { [key: string]: ISettings };\n  inCustomizerContext?: boolean;\n}\n\nconst CustomizationsGlobalKey = 'customizations';\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\n\nlet _allSettings = GlobalSettings.getValue<ICustomizations>(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false,\n});\n\nlet _events: (() => void)[] = [];\n\nexport class Customizations {\n  private static _suppressUpdates: boolean;\n\n  public static reset(): void {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  }\n\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  public static applySettings(settings: ISettings): void {\n    _allSettings.settings = { ..._allSettings.settings, ...settings };\n    Customizations._raiseChange();\n  }\n\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  public static applyScopedSettings(scopeName: string, settings: ISettings): void {\n    _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\n    Customizations._raiseChange();\n  }\n\n  public static getSettings(\n    properties: string[],\n    scopeName?: string,\n    localSettings: ICustomizations = NO_CUSTOMIZATIONS,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    const settings: ISettings = {};\n    const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n    const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n\n    for (let property of properties) {\n      settings[property] =\n        localScopedSettings[property] ||\n        localSettings.settings[property] ||\n        globalScopedSettings[property] ||\n        _allSettings.settings[property];\n    }\n\n    return settings;\n  }\n\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  public static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  }\n\n  public static observe(onChange: () => void): void {\n    _events.push(onChange);\n  }\n\n  public static unobserve(onChange: () => void): void {\n    _events = _events.filter((cb: () => void) => cb !== onChange);\n  }\n\n  private static _raiseChange(): void {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach((cb: () => void) => cb());\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}