{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\n\nexport var useSetInterval = function () {\n  var intervalIds = useConst({});\n  React.useEffect(function () {\n    return function () {\n      for (var _i = 0, _a = Object.keys(intervalIds); _i < _a.length; _i++) {\n        var id = _a[_i]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        clearInterval(id);\n      }\n    };\n  }, // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n  [intervalIds]);\n  return useConst({\n    setInterval: function (func, duration) {\n      var id = setInterval(func, duration);\n      intervalIds[id] = 1;\n      return id;\n    },\n    clearInterval: function (id) {\n      delete intervalIds[id];\n      clearInterval(id);\n    }\n  });\n};","map":{"version":3,"sources":["useSetInterval.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,YAAzB;AAOA;;AAEG;;AACH,OAAO,IAAM,cAAc,GAAG,YAAA;EAC5B,IAAM,WAAW,GAAG,QAAQ,CAAyB,EAAzB,CAA5B;EAEA,KAAK,CAAC,SAAN,CACE,YAAA;IAAM,OAAA,YAAA;MACJ,KAAiB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,WAAZ,CAAjB,EAAiB,EAAA,GAAA,EAAA,CAAA,MAAjB,EAAiB,EAAA,EAAjB,EAA2C;QAAtC,IAAM,EAAE,GAAA,EAAA,CAAA,EAAA,CAAR,CAAsC,CACzC;;QACA,aAAa,CAAC,EAAD,CAAb;MACD;IAJG,CAAA;EAKL,CANH,EAOE;EACA,CAAC,WAAD,CARF;EAWA,OAAO,QAAQ,CAAC;IACd,WAAW,EAAE,UAAC,IAAD,EAAmB,QAAnB,EAAmC;MAC9C,IAAM,EAAE,GAAI,WAAW,CAAC,IAAD,EAAO,QAAP,CAAvB;MAEA,WAAW,CAAC,EAAD,CAAX,GAAkB,CAAlB;MAEA,OAAO,EAAP;IACD,CAPa;IASd,aAAa,EAAE,UAAC,EAAD,EAAW;MACxB,OAAO,WAAW,CAAC,EAAD,CAAlB;MACA,aAAa,CAAC,EAAD,CAAb;IACD;EAZa,CAAD,CAAf;AAcD,CA5BM","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetIntervalReturnType = {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport const useSetInterval = (): UseSetIntervalReturnType => {\n  const intervalIds = useConst<Record<number, number>>({});\n\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(intervalIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [intervalIds],\n  );\n\n  return useConst({\n    setInterval: (func: () => void, duration: number): number => {\n      const id = (setInterval(func, duration) as unknown) as number;\n\n      intervalIds[id] = 1;\n\n      return id;\n    },\n\n    clearInterval: (id: number): void => {\n      delete intervalIds[id];\n      clearInterval(id);\n    },\n  });\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}