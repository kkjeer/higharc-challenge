{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\n\n\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\n\n\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\n\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\n\n\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n\nvar now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\n\nfunction measure(func) {\n  var start = now();\n  func();\n  var end = now();\n  _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\n\n\nfunction initializeThemeState() {\n  var state = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n\n  if (!state.runState) {\n    state = __assign(__assign({}, state), {\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: 0\n        /* sync */\n        ,\n        buffer: []\n      }\n    });\n  }\n\n  if (!state.registeredThemableStyles) {\n    state = __assign(__assign({}, state), {\n      registeredThemableStyles: []\n    });\n  }\n\n  _root.__themeState__ = state;\n  return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\n\n\nexport function loadStyles(styles, loadAsync) {\n  if (loadAsync === void 0) {\n    loadAsync = false;\n  }\n\n  measure(function () {\n    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n    var _a = _themeState.runState,\n        mode = _a.mode,\n        buffer = _a.buffer,\n        flushTimer = _a.flushTimer;\n\n    if (loadAsync || mode === 1\n    /* async */\n    ) {\n      buffer.push(styleParts);\n\n      if (!flushTimer) {\n        _themeState.runState.flushTimer = asyncLoadStyles();\n      }\n    } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\n\nexport function configureLoadStyles(loadStylesFn) {\n  _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\n\nexport function configureRunMode(mode) {\n  _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\n\nexport function flush() {\n  measure(function () {\n    var styleArrays = _themeState.runState.buffer.slice();\n\n    _themeState.runState.buffer = [];\n    var mergedStyleArray = [].concat.apply([], styleArrays);\n\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n/**\n * register async loadStyles\n */\n\nfunction asyncLoadStyles() {\n  return setTimeout(function () {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\n\n\nfunction applyThemableStyles(stylesArray, styleRecord) {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\n\n\nexport function loadTheme(theme) {\n  _themeState.theme = theme; // reload styles.\n\n  reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\n\nexport function clearStyles(option) {\n  if (option === void 0) {\n    option = 3\n    /* all */\n    ;\n  }\n\n  if (option === 3\n  /* all */\n  || option === 2\n  /* onlyNonThemable */\n  ) {\n    clearStylesInternal(_themeState.registeredStyles);\n    _themeState.registeredStyles = [];\n  }\n\n  if (option === 3\n  /* all */\n  || option === 1\n  /* onlyThemable */\n  ) {\n    clearStylesInternal(_themeState.registeredThemableStyles);\n    _themeState.registeredThemableStyles = [];\n  }\n}\n\nfunction clearStylesInternal(records) {\n  records.forEach(function (styleRecord) {\n    var styleElement = styleRecord && styleRecord.styleElement;\n\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n/**\n * Reloads styles.\n */\n\n\nfunction reloadStyles() {\n  if (_themeState.theme) {\n    var themableStyles = [];\n\n    for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n      var styleRecord = _a[_i];\n      themableStyles.push(styleRecord.themableStyle);\n    }\n\n    if (themableStyles.length > 0) {\n      clearStyles(1\n      /* onlyThemable */\n      );\n      applyThemableStyles([].concat.apply([], themableStyles));\n    }\n  }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\n\n\nexport function detokenize(styles) {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n\n  return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\n\nfunction resolveThemableArray(splitStyleArray) {\n  var theme = _themeState.theme;\n  var themable = false; // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n\n  var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n    var themeSlot = currentValue.theme;\n\n    if (themeSlot) {\n      themable = true; // A theming annotation. Resolve it.\n\n      var themedValue = theme ? theme[themeSlot] : undefined;\n      var defaultValue = currentValue.defaultValue || 'inherit'; // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n      // Allow the themedValue to be undefined to explicitly request the default value.\n\n      if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== 'undefined' && DEBUG) {\n        console.warn(\"Theming value not provided for \\\"\".concat(themeSlot, \"\\\". Falling back to \\\"\").concat(defaultValue, \"\\\".\"));\n      }\n\n      return themedValue || defaultValue;\n    } else {\n      // A non-themable string. Preserve it.\n      return currentValue.rawString;\n    }\n  });\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\n\n\nexport function splitStyles(styles) {\n  var result = [];\n\n  if (styles) {\n    var pos = 0; // Current position in styles.\n\n    var tokenMatch = void 0;\n\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\n      var matchIndex = tokenMatch.index;\n\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n\n      }); // index of the first character after the current match\n\n      pos = _themeTokenRegex.lastIndex;\n    } // Push the rest of the string after the last match.\n\n\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n\n  return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\n\nfunction registerStyles(styleArray) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.getElementsByTagName('head')[0];\n  var styleElement = document.createElement('style');\n\n  var _a = resolveThemableArray(styleArray),\n      styleString = _a.styleString,\n      themable = _a.themable;\n\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n  var ev = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true\n  /* bubbleEvent */\n  , false\n  /* cancelable */\n  );\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n  var record = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\n * to use if that slot is not specified by the theme.\n */\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n// Declaring a global here in case that the execution environment is Node.js (without importing the\n// entire node.js d.ts for now)\ndeclare let global: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\nexport interface IThemingInstruction {\n  theme?: string;\n  defaultValue?: string;\n  rawString?: string;\n}\n\nexport type ThemableArray = IThemingInstruction[];\n\nexport interface ITheme {\n  [key: string]: string;\n}\n\ninterface IStyleSheet {\n  cssText: string;\n}\n\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\n  styleSheet: IStyleSheet;\n}\n\n/**\n * Performance Measurement of loading styles\n */\ninterface IMeasurement {\n  /**\n   * Count of style element injected, which is the slow operation in IE\n   */\n  count: number;\n  /**\n   * Total duration of all loadStyles exections\n   */\n  duration: number;\n}\n\ninterface IRunState {\n  mode: Mode;\n  buffer: ThemableArray[];\n  flushTimer: number;\n}\n\ninterface IThemeState {\n  theme: ITheme | undefined;\n  lastStyleElement: IExtendedHtmlStyleElement;\n  registeredStyles: IStyleRecord[]; // records of already registered non-themable styles\n  registeredThemableStyles: IStyleRecord[]; // records of already registered themable styles\n  loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined;\n  perf: IMeasurement;\n  runState: IRunState;\n}\n\ninterface IStyleRecord {\n  styleElement: Element;\n  themableStyle: ThemableArray;\n}\n\ninterface ICustomEvent<T> extends Event {\n  args?: T;\n}\n\n/**\n * object returned from resolveThemableArray function\n */\ninterface IThemableArrayResolveResult {\n  /** this string is the processed styles in string */\n  styleString: string;\n\n  /** this boolean indicates if this style array is themable */\n  themable: boolean;\n}\n\n/**\n * In sync mode, styles are registered as style elements synchronously with loadStyles() call.\n * In async mode, styles are buffered and registered as batch in async timer for performance purpose.\n */\nexport const enum Mode {\n  sync,\n  async\n}\n\n/**\n * Themable styles and non-themable styles are tracked separately\n * Specify ClearStyleOptions when calling clearStyles API to specify which group of registered styles should be cleared.\n */\nexport const enum ClearStyleOptions {\n  /** only themable styles will be cleared */\n  onlyThemable = 1,\n  /** only non-themable styles will be cleared */\n  onlyNonThemable = 2,\n  /** both themable and non-themable styles will be cleared */\n  all = 3\n}\n\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nconst _root: any = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\nconst _styleNonce: string = _root && _root.CSPSettings && _root.CSPSettings.nonce;\n\nconst _themeState: IThemeState = initializeThemeState();\n\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\nconst _themeTokenRegex: RegExp =\n  /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n\nconst now: () => number = () =>\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n\nfunction measure(func: () => void): void {\n  const start: number = now();\n  func();\n  const end: number = now();\n  _themeState.perf.duration += end - start;\n}\n\n/**\n * initialize global state object\n */\nfunction initializeThemeState(): IThemeState {\n  let state: IThemeState = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n\n  if (!state.runState) {\n    state = {\n      ...state,\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: Mode.sync,\n        buffer: []\n      }\n    };\n  }\n  if (!state.registeredThemableStyles) {\n    state = {\n      ...state,\n      registeredThemableStyles: []\n    };\n  }\n  _root.__themeState__ = state;\n  return state;\n}\n\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\nexport function loadStyles(styles: string | ThemableArray, loadAsync: boolean = false): void {\n  measure(() => {\n    const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\n    const { mode, buffer, flushTimer } = _themeState.runState;\n    if (loadAsync || mode === Mode.async) {\n      buffer.push(styleParts);\n      if (!flushTimer) {\n        _themeState.runState.flushTimer = asyncLoadStyles();\n      }\n    } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\nexport function configureLoadStyles(\n  loadStylesFn: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined\n): void {\n  _themeState.loadStyles = loadStylesFn;\n}\n\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\nexport function configureRunMode(mode: Mode): void {\n  _themeState.runState.mode = mode;\n}\n\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\nexport function flush(): void {\n  measure(() => {\n    const styleArrays: ThemableArray[] = _themeState.runState.buffer.slice();\n    _themeState.runState.buffer = [];\n    const mergedStyleArray: ThemableArray = ([] as ThemableArray).concat.apply([], styleArrays);\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n\n/**\n * register async loadStyles\n */\nfunction asyncLoadStyles(): number {\n  return setTimeout(() => {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nexport function loadTheme(theme: ITheme | undefined): void {\n  _themeState.theme = theme;\n\n  // reload styles.\n  reloadStyles();\n}\n\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\nexport function clearStyles(option: ClearStyleOptions = ClearStyleOptions.all): void {\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyNonThemable) {\n    clearStylesInternal(_themeState.registeredStyles);\n    _themeState.registeredStyles = [];\n  }\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyThemable) {\n    clearStylesInternal(_themeState.registeredThemableStyles);\n    _themeState.registeredThemableStyles = [];\n  }\n}\n\nfunction clearStylesInternal(records: IStyleRecord[]): void {\n  records.forEach((styleRecord: IStyleRecord) => {\n    const styleElement: HTMLStyleElement = styleRecord && (styleRecord.styleElement as HTMLStyleElement);\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n\n/**\n * Reloads styles.\n */\nfunction reloadStyles(): void {\n  if (_themeState.theme) {\n    const themableStyles: ThemableArray[] = [];\n    for (const styleRecord of _themeState.registeredThemableStyles) {\n      themableStyles.push(styleRecord.themableStyle);\n    }\n    if (themableStyles.length > 0) {\n      clearStyles(ClearStyleOptions.onlyThemable);\n      applyThemableStyles(([] as ThemableArray).concat.apply([], themableStyles));\n    }\n  }\n}\n\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nexport function detokenize(styles: string | undefined): string | undefined {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n\n  return styles;\n}\n\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray: ThemableArray): IThemableArrayResolveResult {\n  const { theme }: IThemeState = _themeState;\n  let themable: boolean = false;\n  // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n  const resolvedArray: (string | undefined)[] = (splitStyleArray || []).map(\n    (currentValue: IThemingInstruction) => {\n      const themeSlot: string | undefined = currentValue.theme;\n      if (themeSlot) {\n        themable = true;\n        // A theming annotation. Resolve it.\n        const themedValue: string | undefined = theme ? theme[themeSlot] : undefined;\n        const defaultValue: string = currentValue.defaultValue || 'inherit';\n\n        // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n        // Allow the themedValue to be undefined to explicitly request the default value.\n        if (\n          theme &&\n          !themedValue &&\n          console &&\n          !(themeSlot in theme) &&\n          typeof DEBUG !== 'undefined' &&\n          DEBUG\n        ) {\n          console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue}\".`);\n        }\n\n        return themedValue || defaultValue;\n      } else {\n        // A non-themable string. Preserve it.\n        return currentValue.rawString;\n      }\n    }\n  );\n\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nexport function splitStyles(styles: string): ThemableArray {\n  const result: ThemableArray = [];\n  if (styles) {\n    let pos: number = 0; // Current position in styles.\n    let tokenMatch: RegExpExecArray | null;\n    while ((tokenMatch = _themeTokenRegex.exec(styles))) {\n      const matchIndex: number = tokenMatch.index;\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n      });\n\n      // index of the first character after the current match\n      pos = _themeTokenRegex.lastIndex;\n    }\n\n    // Push the rest of the string after the last match.\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n\n  return result;\n}\n\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray: ThemableArray): void {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n  const styleElement: HTMLStyleElement = document.createElement('style');\n  const { styleString, themable } = resolveThemableArray(styleArray);\n\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n\n  const ev: ICustomEvent<{ newStyle: HTMLStyleElement }> = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n\n  const record: IStyleRecord = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}