{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n}; // eslint-disable-next-line deprecation/deprecation\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a, _b, _c;\n\n    var props = this.props;\n    var\n    /* eslint-disable deprecation/deprecation */\n    className = props.className,\n        containerClassName = props.containerClassName,\n        contentClassName = props.contentClassName,\n        elementToFocusOnDismiss = props.elementToFocusOnDismiss,\n        firstFocusableSelector = props.firstFocusableSelector,\n        forceFocusInsideTrap = props.forceFocusInsideTrap,\n        styles = props.styles,\n        hidden = props.hidden,\n        ignoreExternalFocusing = props.ignoreExternalFocusing,\n        isBlocking = props.isBlocking,\n        isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap,\n        isDarkOverlay = props.isDarkOverlay,\n        _d = props.isOpen,\n        isOpen = _d === void 0 ? !hidden : _d,\n        onDismiss = props.onDismiss,\n        onDismissed = props.onDismissed,\n        onLayerDidMount = props.onLayerDidMount,\n        responsiveMode = props.responsiveMode,\n        subText = props.subText,\n        theme = props.theme,\n        title = props.title,\n        topButtonsProps = props.topButtonsProps,\n        type = props.type,\n\n    /* eslint-enable deprecation/deprecation */\n    minWidth = props.minWidth,\n        maxWidth = props.maxWidth,\n        modalProps = props.modalProps;\n\n    var mergedLayerProps = __assign({\n      onLayerDidMount: onLayerDidMount\n    }, modalProps === null || modalProps === void 0 ? void 0 : modalProps.layerProps);\n\n    var dialogDraggableClassName;\n    var dragOptions; // If dragOptions are provided, but no drag handle is specified, we supply a drag handle,\n    // and inform dialog contents to add class to draggable class to the header\n\n    if ((modalProps === null || modalProps === void 0 ? void 0 : modalProps.dragOptions) && !((_a = modalProps.dragOptions) === null || _a === void 0 ? void 0 : _a.dragHandleSelector)) {\n      // spread options to avoid mutating props\n      dragOptions = __assign({}, modalProps.dragOptions);\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = \".\" + dialogDraggableClassName;\n    }\n\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      responsiveMode: responsiveMode,\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      dragOptions: dragOptions,\n      layerProps: mergedLayerProps,\n      isOpen: isOpen\n    });\n\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_b = props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleId) || this._defaultTitleTextId\n      }, (_c = props.dialogContentProps) === null || _c === void 0 ? void 0 : _c.titleProps)\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({}, mergedModalProps, {\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss || mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      showCloseButton: mergedModalProps.isBlocking,\n      onDismiss: onDismiss\n    }, dialogContentProps), props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexport { DialogBase };","map":{"version":3,"sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\nimport type { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport type { IDialogContentProps } from './DialogContent.types';\nimport type { IModalProps } from '../../Modal';\nimport type { ILayerProps } from '../../Layer';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen = !hidden,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = props;\n\n    const mergedLayerProps: ILayerProps = {\n      onLayerDidMount,\n      ...modalProps?.layerProps,\n    };\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IModalProps['dragOptions'];\n\n    // If dragOptions are provided, but no drag handle is specified, we supply a drag handle,\n    // and inform dialog contents to add class to draggable class to the header\n    if (modalProps?.dragOptions && !modalProps.dragOptions?.dragHandleSelector) {\n      // spread options to avoid mutating props\n      dragOptions = { ...modalProps.dragOptions };\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = `.${dialogDraggableClassName}`;\n    }\n\n    const mergedModalProps: IModalProps = {\n      ...DefaultModalProps,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isClickableOutsideFocusTrap,\n      responsiveMode,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      dragOptions,\n      layerProps: mergedLayerProps,\n      isOpen,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        {...mergedModalProps}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss || mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          showCloseButton={mergedModalProps.isBlocking}\n          onDismiss={onDismiss}\n          {...dialogContentProps}\n        >\n          {props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}