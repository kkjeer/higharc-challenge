{"ast":null,"code":"import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\nexport var getClassNames = memoizeFunction(function (styles, className, isOpen, disabled, required, focused, allowFreeForm, hasErrorMessage) {\n  return {\n    container: mergeStyles('ms-ComboBox-container', className, styles.container),\n    label: mergeStyles(styles.label, disabled && styles.labelDisabled),\n    root: mergeStyles('ms-ComboBox', hasErrorMessage ? styles.rootError : isOpen && 'is-open', required && 'is-required', styles.root, !allowFreeForm && styles.rootDisallowFreeForm, hasErrorMessage && !focused ? styles.rootError : !disabled && focused && styles.rootFocused, !disabled && {\n      selectors: {\n        ':hover': hasErrorMessage ? styles.rootError : !isOpen && !focused && styles.rootHovered,\n        ':active': hasErrorMessage ? styles.rootError : styles.rootPressed,\n        ':focus': hasErrorMessage ? styles.rootError : styles.rootFocused\n      }\n    }, disabled && ['is-disabled', styles.rootDisabled]),\n    input: mergeStyles('ms-ComboBox-Input', styles.input, disabled && styles.inputDisabled),\n    errorMessage: mergeStyles(styles.errorMessage),\n    callout: mergeStyles('ms-ComboBox-callout', styles.callout),\n    optionsContainerWrapper: mergeStyles('ms-ComboBox-optionsContainerWrapper', styles.optionsContainerWrapper),\n    optionsContainer: mergeStyles('ms-ComboBox-optionsContainer', styles.optionsContainer),\n    header: mergeStyles('ms-ComboBox-header', styles.header),\n    divider: mergeStyles('ms-ComboBox-divider', styles.divider),\n    screenReaderText: mergeStyles(styles.screenReaderText)\n  };\n});\nexport var getComboBoxOptionClassNames = memoizeFunction(function (styles) {\n  return {\n    optionText: mergeStyles('ms-ComboBox-optionText', styles.optionText),\n    root: mergeStyles('ms-ComboBox-option', styles.root, {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }),\n    optionTextWrapper: mergeStyles(styles.optionTextWrapper)\n  };\n});","map":{"version":3,"sources":["components/ComboBox/ComboBox.classNames.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,QAAgC,iBAAhC;AACA,SAAS,WAAT,QAA4B,eAA5B;AAuBA,OAAO,IAAM,aAAa,GAAG,eAAe,CAC1C,UACE,MADF,EAEE,SAFF,EAGE,MAHF,EAIE,QAJF,EAKE,QALF,EAME,OANF,EAOE,aAPF,EAQE,eARF,EAQ0B;EAExB,OAAO;IACL,SAAS,EAAE,WAAW,CAAC,uBAAD,EAA0B,SAA1B,EAAqC,MAAM,CAAC,SAA5C,CADjB;IAEL,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,KAAR,EAAe,QAAQ,IAAI,MAAM,CAAC,aAAlC,CAFb;IAGL,IAAI,EAAE,WAAW,CACf,aADe,EAEf,eAAe,GAAG,MAAM,CAAC,SAAV,GAAsB,MAAM,IAAI,SAFhC,EAGf,QAAQ,IAAI,aAHG,EAIf,MAAM,CAAC,IAJQ,EAKf,CAAC,aAAD,IAAkB,MAAM,CAAC,oBALV,EAMf,eAAe,IAAI,CAAC,OAApB,GAA8B,MAAM,CAAC,SAArC,GAAiD,CAAC,QAAD,IAAa,OAAb,IAAwB,MAAM,CAAC,WANjE,EAOf,CAAC,QAAD,IAAa;MACX,SAAS,EAAE;QACT,UAAU,eAAe,GAAG,MAAM,CAAC,SAAV,GAAsB,CAAC,MAAD,IAAW,CAAC,OAAZ,IAAuB,MAAM,CAAC,WADpE;QAET,WAAW,eAAe,GAAG,MAAM,CAAC,SAAV,GAAsB,MAAM,CAAC,WAF9C;QAGT,UAAU,eAAe,GAAG,MAAM,CAAC,SAAV,GAAsB,MAAM,CAAC;MAH7C;IADA,CAPE,EAcf,QAAQ,IAAI,CAAC,aAAD,EAAgB,MAAM,CAAC,YAAvB,CAdG,CAHZ;IAmBL,KAAK,EAAE,WAAW,CAAC,mBAAD,EAAsB,MAAM,CAAC,KAA7B,EAAoC,QAAQ,IAAI,MAAM,CAAC,aAAvD,CAnBb;IAoBL,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,YAAR,CApBpB;IAqBL,OAAO,EAAE,WAAW,CAAC,qBAAD,EAAwB,MAAM,CAAC,OAA/B,CArBf;IAsBL,uBAAuB,EAAE,WAAW,CAAC,qCAAD,EAAwC,MAAM,CAAC,uBAA/C,CAtB/B;IAuBL,gBAAgB,EAAE,WAAW,CAAC,8BAAD,EAAiC,MAAM,CAAC,gBAAxC,CAvBxB;IAwBL,MAAM,EAAE,WAAW,CAAC,oBAAD,EAAuB,MAAM,CAAC,MAA9B,CAxBd;IAyBL,OAAO,EAAE,WAAW,CAAC,qBAAD,EAAwB,MAAM,CAAC,OAA/B,CAzBf;IA0BL,gBAAgB,EAAE,WAAW,CAAC,MAAM,CAAC,gBAAR;EA1BxB,CAAP;AA4BD,CAvCyC,CAArC;AA0CP,OAAO,IAAM,2BAA2B,GAAG,eAAe,CACxD,UAAC,MAAD,EAAuC;EACrC,OAAO;IACL,UAAU,EAAE,WAAW,CAAC,wBAAD,EAA2B,MAAM,CAAC,UAAlC,CADlB;IAEL,IAAI,EAAE,WAAW,CAAC,oBAAD,EAAuB,MAAM,CAAC,IAA9B,EAAoC;MACnD,SAAS,EAAE;QACT,UAAU,MAAM,CAAC,WADR;QAET,UAAU,MAAM,CAAC,WAFR;QAGT,WAAW,MAAM,CAAC;MAHT;IADwC,CAApC,CAFZ;IASL,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,iBAAR;EATzB,CAAP;AAWD,CAbuD,CAAnD","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\nimport type { IComboBoxStyles, IComboBoxOptionStyles } from './ComboBox.types';\n\nexport interface IComboBoxClassNames {\n  container: string;\n  label: string;\n  root: string;\n  input: string;\n  errorMessage: string;\n  callout: string;\n  optionsContainer: string;\n  header: string;\n  divider: string;\n  optionsContainerWrapper: string;\n  screenReaderText: string;\n}\n\nexport interface IComboBoxOptionClassNames {\n  optionText: string;\n  root: string;\n  optionTextWrapper: string;\n}\n\nexport const getClassNames = memoizeFunction(\n  (\n    styles: Partial<IComboBoxStyles>,\n    className: string,\n    isOpen: boolean,\n    disabled: boolean,\n    required: boolean,\n    focused: boolean,\n    allowFreeForm: boolean,\n    hasErrorMessage: boolean,\n  ): IComboBoxClassNames => {\n    return {\n      container: mergeStyles('ms-ComboBox-container', className, styles.container),\n      label: mergeStyles(styles.label, disabled && styles.labelDisabled),\n      root: mergeStyles(\n        'ms-ComboBox',\n        hasErrorMessage ? styles.rootError : isOpen && 'is-open',\n        required && 'is-required',\n        styles.root,\n        !allowFreeForm && styles.rootDisallowFreeForm,\n        hasErrorMessage && !focused ? styles.rootError : !disabled && focused && styles.rootFocused,\n        !disabled && {\n          selectors: {\n            ':hover': hasErrorMessage ? styles.rootError : !isOpen && !focused && styles.rootHovered,\n            ':active': hasErrorMessage ? styles.rootError : styles.rootPressed,\n            ':focus': hasErrorMessage ? styles.rootError : styles.rootFocused,\n          },\n        },\n        disabled && ['is-disabled', styles.rootDisabled],\n      ),\n      input: mergeStyles('ms-ComboBox-Input', styles.input, disabled && styles.inputDisabled),\n      errorMessage: mergeStyles(styles.errorMessage),\n      callout: mergeStyles('ms-ComboBox-callout', styles.callout),\n      optionsContainerWrapper: mergeStyles('ms-ComboBox-optionsContainerWrapper', styles.optionsContainerWrapper),\n      optionsContainer: mergeStyles('ms-ComboBox-optionsContainer', styles.optionsContainer),\n      header: mergeStyles('ms-ComboBox-header', styles.header),\n      divider: mergeStyles('ms-ComboBox-divider', styles.divider),\n      screenReaderText: mergeStyles(styles.screenReaderText),\n    };\n  },\n);\n\nexport const getComboBoxOptionClassNames = memoizeFunction(\n  (styles: Partial<IComboBoxOptionStyles>): IComboBoxOptionClassNames => {\n    return {\n      optionText: mergeStyles('ms-ComboBox-optionText', styles.optionText),\n      root: mergeStyles('ms-ComboBox-option', styles.root, {\n        selectors: {\n          ':hover': styles.rootHovered,\n          ':focus': styles.rootFocused,\n          ':active': styles.rootPressed,\n        },\n      }),\n      optionTextWrapper: mergeStyles(styles.optionTextWrapper),\n    };\n  },\n);\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}