{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { find, isElementVisibleAndNotHidden, values } from '../../Utilities';\nimport { ktpTargetFromSequences, mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\n\nvar KeytipTree =\n/** @class */\nfunction () {\n  /**\n   * KeytipTree constructor\n   */\n  function KeytipTree() {\n    this.nodeMap = {}; // Root has no keytipSequence\n\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: []\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n\n\n  KeytipTree.prototype.addNode = function (keytipProps, uniqueID, persisted) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last item to calculate the parent sequence\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence); // Create node and add to map\n\n\n    var node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n\n    this.nodeMap[uniqueID] = node; // Try to add self to parents children\n\n    var parents = this.getNodes([parentID]);\n    parents.forEach(function (parent) {\n      return parent.children.push(nodeID);\n    });\n  };\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n\n\n  KeytipTree.prototype.updateNode = function (keytipProps, uniqueID) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last item to calculate the parent sequence\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    var parentID = this._getParentID(fullSequence);\n\n    var node = this.nodeMap[uniqueID];\n    var prevParent = node.parent;\n\n    if (node) {\n      // Fix parent nodes if needed\n      if (prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        this._removeChildFromParents(prevParent, node.id);\n      }\n\n      if (node.id !== nodeID) {\n        // If the ID of the node has changed, update node's parent's array of children with new ID\n        var parents = this.getNodes([parentID]);\n        parents.forEach(function (parent) {\n          var index = parent.children.indexOf(node.id);\n          index >= 0 ? parent.children[index] = nodeID : parent.children.push(nodeID);\n        });\n      } // Update values\n\n\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  };\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n\n\n  KeytipTree.prototype.removeNode = function (keytipProps, uniqueID) {\n    var fullSequence = this._getFullSequence(keytipProps);\n\n    var nodeID = sequencesToID(fullSequence); // Take off the last sequence to calculate the parent ID\n\n    fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n    this._removeChildFromParents(this._getParentID(fullSequence), nodeID);\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  };\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n\n\n  KeytipTree.prototype.getExactMatchedNode = function (keySequence, currentKeytip) {\n    var _this = this;\n\n    var possibleNodes = this.getNodes(currentKeytip.children);\n    var matchingNodes = possibleNodes.filter(function (node) {\n      return _this._getNodeSequence(node) === keySequence && !node.disabled;\n    }); // If we found no nodes, we are done\n\n    if (matchingNodes.length === 0) {\n      return undefined;\n    } // Since the matching nodes all have the same key sequence,\n    // Grab the first one build the correct selector\n\n\n    var node = matchingNodes[0]; // If we have exactly one node, return it\n\n    if (matchingNodes.length === 1) {\n      return node;\n    } // Get the potential target elements based on a selector from the sequences\n\n\n    var keySequences = node.keySequences;\n    var overflowSetSequence = node.overflowSetSequence;\n    var fullKeySequences = overflowSetSequence ? mergeOverflows(keySequences, overflowSetSequence) : keySequences;\n    var keytipTargetSelector = ktpTargetFromSequences(fullKeySequences);\n    var potentialTargetElements = document.querySelectorAll(keytipTargetSelector); // If we have less nodes than the potential target elements,\n    // we won't be able to map element to node, return the first node.\n    // Note, the number of nodes could be more than the number of potential\n    // target elements, if an OverflowSet is involved\n\n    if (matchingNodes.length < potentialTargetElements.length) {\n      return node;\n    } // Attempt to find the node that corresponds to the first visible/non-hidden element\n\n\n    var matchingIndex = Array.from(potentialTargetElements).findIndex(function (element) {\n      return isElementVisibleAndNotHidden(element);\n    });\n\n    if (matchingIndex !== -1) {\n      return matchingNodes[matchingIndex];\n    } // We did not find any visible elements associated with any of the nodes.\n    // We may be dealing with a keytip that is a submenu in an OverflowSet.\n    // Worst case, fall back to the first node returned\n\n\n    var overflowNode = matchingNodes.find(function (matchingNode) {\n      return matchingNode.hasOverflowSubMenu;\n    });\n    return overflowNode || node;\n  };\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n\n\n  KeytipTree.prototype.getPartiallyMatchedNodes = function (keySequence, currentKeytip) {\n    var _this = this; // Get children that are persisted\n\n\n    var possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter(function (node) {\n      return _this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  };\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n\n\n  KeytipTree.prototype.getChildren = function (node) {\n    var _this = this;\n\n    if (!node) {\n      node = this.currentKeytip;\n\n      if (!node) {\n        return [];\n      }\n    }\n\n    var children = node.children;\n    return Object.keys(this.nodeMap).reduce(function (nodes, key) {\n      if (children.indexOf(_this.nodeMap[key].id) >= 0 && !_this.nodeMap[key].persisted) {\n        nodes.push(_this.nodeMap[key].id);\n      }\n\n      return nodes;\n    }, []);\n  };\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n\n\n  KeytipTree.prototype.getNodes = function (ids) {\n    var _this = this;\n\n    return Object.keys(this.nodeMap).reduce(function (nodes, key) {\n      if (ids.indexOf(_this.nodeMap[key].id) >= 0) {\n        nodes.push(_this.nodeMap[key]);\n      }\n\n      return nodes;\n    }, []);\n  };\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n\n\n  KeytipTree.prototype.getNode = function (id) {\n    var nodeMapValues = values(this.nodeMap);\n    return find(nodeMapValues, function (node) {\n      return node.id === id;\n    });\n  };\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n\n\n  KeytipTree.prototype.isCurrentKeytipParent = function (keytipProps) {\n    if (this.currentKeytip) {\n      var fullSequence = __spreadArray([], keytipProps.keySequences);\n\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      } // Take off the last sequence to calculate the parent ID\n\n\n      fullSequence.pop(); // Parent ID is the root if there aren't any more sequences\n\n      var parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      var matchesCurrWithoutOverflow = false;\n\n      if (this.currentKeytip.overflowSetSequence) {\n        var currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n\n    return false;\n  };\n\n  KeytipTree.prototype._getParentID = function (fullSequence) {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  };\n\n  KeytipTree.prototype._getFullSequence = function (keytipProps) {\n    var fullSequence = __spreadArray([], keytipProps.keySequences);\n\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n\n    return fullSequence;\n  };\n\n  KeytipTree.prototype._getNodeSequence = function (node) {\n    var fullSequence = __spreadArray([], node.keySequences);\n\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n\n    return fullSequence[fullSequence.length - 1];\n  };\n\n  KeytipTree.prototype._createNode = function (id, parentId, children, keytipProps, persisted) {\n    var _this = this;\n\n    var keySequences = keytipProps.keySequences,\n        hasDynamicChildren = keytipProps.hasDynamicChildren,\n        overflowSetSequence = keytipProps.overflowSetSequence,\n        hasMenu = keytipProps.hasMenu,\n        onExecute = keytipProps.onExecute,\n        onReturn = keytipProps.onReturn,\n        disabled = keytipProps.disabled,\n        hasOverflowSubMenu = keytipProps.hasOverflowSubMenu;\n    var node = {\n      id: id,\n      keySequences: keySequences,\n      overflowSetSequence: overflowSetSequence,\n      parent: parentId,\n      children: children,\n      onExecute: onExecute,\n      onReturn: onReturn,\n      hasDynamicChildren: hasDynamicChildren,\n      hasMenu: hasMenu,\n      disabled: disabled,\n      persisted: persisted,\n      hasOverflowSubMenu: hasOverflowSubMenu\n    };\n    node.children = Object.keys(this.nodeMap).reduce(function (array, nodeMapKey) {\n      if (_this.nodeMap[nodeMapKey].parent === id) {\n        array.push(_this.nodeMap[nodeMapKey].id);\n      }\n\n      return array;\n    }, []);\n    return node;\n  };\n\n  KeytipTree.prototype._removeChildFromParents = function (parentID, childID) {\n    var parents = this.getNodes([parentID]);\n    parents.forEach(function (parent) {\n      var childIndex = parent.children.indexOf(childID);\n\n      if (childIndex >= 0) {\n        parent.children.splice(childIndex, 1);\n      }\n    });\n  };\n\n  return KeytipTree;\n}();\n\nexport { KeytipTree };","map":{"version":3,"sources":["components/KeytipLayer/KeytipTree.ts"],"names":[],"mappings":"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","sourcesContent":["import { find, isElementVisibleAndNotHidden, values } from '../../Utilities';\nimport { ktpTargetFromSequences, mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IKeytipTreeNode } from './IKeytipTreeNode';\n\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\nexport class KeytipTree {\n  public currentKeytip?: IKeytipTreeNode;\n  public root: IKeytipTreeNode;\n  public nodeMap: { [nodeId: string]: IKeytipTreeNode } = {};\n\n  /**\n   * KeytipTree constructor\n   */\n  constructor() {\n    // Root has no keytipSequence\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: [],\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n  public addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n\n    // Create node and add to map\n    const node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n    this.nodeMap[uniqueID] = node;\n\n    // Try to add self to parents children\n    const parents = this.getNodes([parentID]);\n    parents.forEach(parent => parent.children.push(nodeID));\n  }\n\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n  public updateNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const node = this.nodeMap[uniqueID];\n    const prevParent = node.parent;\n    if (node) {\n      // Fix parent nodes if needed\n      if (prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        this._removeChildFromParents(prevParent, node.id);\n      }\n      if (node.id !== nodeID) {\n        // If the ID of the node has changed, update node's parent's array of children with new ID\n        const parents = this.getNodes([parentID]);\n        parents.forEach(parent => {\n          const index = parent.children.indexOf(node.id);\n          index >= 0 ? (parent.children[index] = nodeID) : parent.children.push(nodeID);\n        });\n      }\n\n      // Update values\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  }\n\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n  public removeNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last sequence to calculate the parent ID\n    fullSequence.pop();\n\n    // Parent ID is the root if there aren't any more sequences\n    this._removeChildFromParents(this._getParentID(fullSequence), nodeID);\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  }\n\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n  public getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined {\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    const matchingNodes = possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node) === keySequence && !node.disabled;\n    });\n\n    // If we found no nodes, we are done\n    if (matchingNodes.length === 0) {\n      return undefined;\n    }\n\n    // Since the matching nodes all have the same key sequence,\n    // Grab the first one build the correct selector\n    const node = matchingNodes[0];\n\n    // If we have exactly one node, return it\n    if (matchingNodes.length === 1) {\n      return node;\n    }\n\n    // Get the potential target elements based on a selector from the sequences\n    const keySequences = node.keySequences;\n    const overflowSetSequence = node.overflowSetSequence;\n    const fullKeySequences = overflowSetSequence ? mergeOverflows(keySequences, overflowSetSequence) : keySequences;\n    const keytipTargetSelector = ktpTargetFromSequences(fullKeySequences);\n    const potentialTargetElements = document.querySelectorAll(keytipTargetSelector);\n\n    // If we have less nodes than the potential target elements,\n    // we won't be able to map element to node, return the first node.\n    // Note, the number of nodes could be more than the number of potential\n    // target elements, if an OverflowSet is involved\n    if (matchingNodes.length < potentialTargetElements.length) {\n      return node;\n    }\n\n    // Attempt to find the node that corresponds to the first visible/non-hidden element\n    const matchingIndex = Array.from(potentialTargetElements).findIndex((element: HTMLElement) =>\n      isElementVisibleAndNotHidden(element),\n    );\n    if (matchingIndex !== -1) {\n      return matchingNodes[matchingIndex];\n    }\n\n    // We did not find any visible elements associated with any of the nodes.\n    // We may be dealing with a keytip that is a submenu in an OverflowSet.\n    // Worst case, fall back to the first node returned\n    const overflowNode = matchingNodes.find(matchingNode => matchingNode.hasOverflowSubMenu);\n    return overflowNode || node;\n  }\n\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n  public getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[] {\n    // Get children that are persisted\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  }\n\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n  public getChildren(node?: IKeytipTreeNode): string[] {\n    if (!node) {\n      node = this.currentKeytip;\n      if (!node) {\n        return [];\n      }\n    }\n    const children = node.children;\n    return Object.keys(this.nodeMap).reduce((nodes: string[], key: string): string[] => {\n      if (children.indexOf(this.nodeMap[key].id) >= 0 && !this.nodeMap[key].persisted) {\n        nodes.push(this.nodeMap[key].id);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n  public getNodes(ids: string[]): IKeytipTreeNode[] {\n    return Object.keys(this.nodeMap).reduce((nodes: IKeytipTreeNode[], key: string): IKeytipTreeNode[] => {\n      if (ids.indexOf(this.nodeMap[key].id) >= 0) {\n        nodes.push(this.nodeMap[key]);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n  public getNode(id: string): IKeytipTreeNode | undefined {\n    const nodeMapValues = values<IKeytipTreeNode>(this.nodeMap);\n    return find(nodeMapValues, (node: IKeytipTreeNode): boolean => {\n      return node.id === id;\n    });\n  }\n\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n  public isCurrentKeytipParent(keytipProps: IKeytipProps): boolean {\n    if (this.currentKeytip) {\n      let fullSequence = [...keytipProps.keySequences];\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      }\n      // Take off the last sequence to calculate the parent ID\n      fullSequence.pop();\n      // Parent ID is the root if there aren't any more sequences\n      const parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      let matchesCurrWithoutOverflow = false;\n      if (this.currentKeytip.overflowSetSequence) {\n        const currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n    return false;\n  }\n\n  private _getParentID(fullSequence: string[]): string {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  }\n\n  private _getFullSequence(keytipProps: IKeytipProps): string[] {\n    let fullSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n    return fullSequence;\n  }\n\n  private _getNodeSequence(node: IKeytipTreeNode): string {\n    let fullSequence = [...node.keySequences];\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n    return fullSequence[fullSequence.length - 1];\n  }\n\n  private _createNode(\n    id: string,\n    parentId: string,\n    children: string[],\n    keytipProps: IKeytipProps,\n    persisted?: boolean,\n  ): IKeytipTreeNode {\n    const {\n      keySequences,\n      hasDynamicChildren,\n      overflowSetSequence,\n      hasMenu,\n      onExecute,\n      onReturn,\n      disabled,\n      hasOverflowSubMenu,\n    } = keytipProps;\n    const node = {\n      id,\n      keySequences,\n      overflowSetSequence,\n      parent: parentId,\n      children,\n      onExecute,\n      onReturn,\n      hasDynamicChildren,\n      hasMenu,\n      disabled,\n      persisted,\n      hasOverflowSubMenu,\n    };\n    node.children = Object.keys(this.nodeMap).reduce((array: string[], nodeMapKey: string): string[] => {\n      if (this.nodeMap[nodeMapKey].parent === id) {\n        array.push(this.nodeMap[nodeMapKey].id);\n      }\n      return array;\n    }, []);\n    return node;\n  }\n\n  private _removeChildFromParents(parentID: string, childID: string): void {\n    const parents = this.getNodes([parentID]);\n    parents.forEach(parent => {\n      const childIndex = parent.children.indexOf(childID);\n      if (childIndex >= 0) {\n        parent.children.splice(childIndex, 1);\n      }\n    });\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}