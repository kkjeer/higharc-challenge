{"ast":null,"code":"import { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\nimport { useEffect } from 'react';\n\nvar graphGet = function (graphNode, _a) {\n  var _b, _c, _d;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  return (_d = (_c = (_b = graphNode.get(windowId)) === null || _b === void 0 ? void 0 : _b.get(id)) === null || _c === void 0 ? void 0 : _c.get(theme)) === null || _d === void 0 ? void 0 : _d.classMap;\n};\n\nvar graphSet = function (graphNode, _a, classMap) {\n  var _b, _c;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  var windowNode = (_b = graphNode.get(windowId)) !== null && _b !== void 0 ? _b : new Map();\n  graphNode.set(windowId, windowNode);\n  var idNode = (_c = windowNode.get(id)) !== null && _c !== void 0 ? _c : new Map();\n  windowNode.set(id, idNode);\n  idNode.set(theme, {\n    classMap: classMap,\n    refCount: 0\n  });\n};\n\nfunction graphRef(graphNode, _a) {\n  var _b, _c;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  var node = (_c = (_b = graphNode.get(windowId)) === null || _b === void 0 ? void 0 : _b.get(id)) === null || _c === void 0 ? void 0 : _c.get(theme);\n\n  if (node) {\n    node.refCount++;\n  }\n}\n\nfunction graphDeref(graphNode, _a) {\n  var _b, _c, _d, _e, _f, _g, _h, _j;\n\n  var windowId = _a[0],\n      id = _a[1],\n      theme = _a[2];\n  var node = (_c = (_b = graphNode.get(windowId)) === null || _b === void 0 ? void 0 : _b.get(id)) === null || _c === void 0 ? void 0 : _c.get(theme);\n\n  if (node) {\n    node.refCount--;\n\n    if (node.refCount === 0) {\n      (_e = (_d = graphNode.get(windowId)) === null || _d === void 0 ? void 0 : _d.get(id)) === null || _e === void 0 ? void 0 : _e.delete(theme);\n\n      if (((_g = (_f = graphNode.get(windowId)) === null || _f === void 0 ? void 0 : _f.get(id)) === null || _g === void 0 ? void 0 : _g.size) === 0) {\n        (_h = graphNode.get(windowId)) === null || _h === void 0 ? void 0 : _h.delete(id);\n\n        if (((_j = graphNode.get(windowId)) === null || _j === void 0 ? void 0 : _j.size) === 0) {\n          graphNode.delete(windowId);\n        }\n      }\n    }\n  }\n}\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\n\n\nexport function makeStyles(styleOrFunction) {\n  // Create graph of inputs to map to output.\n  var graph = new Map(); // Retain a dictionary of window ids we're tracking\n\n  var allWindows = new Set(); // cleanupMapEntries will\n  // 1. remove all the graph branches for the window,\n  // 2. remove the event listener,\n  // 3. delete the allWindows entry.\n\n  var cleanupMapEntries = function (ev) {\n    var win = ev.currentTarget;\n    var winId = win.__id__;\n    graph.delete(winId);\n    win.removeEventListener('unload', cleanupMapEntries);\n    allWindows.delete(winId);\n  }; // eslint-disable-next-line deprecation/deprecation\n\n\n  return function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var theme = options.theme;\n    var winId;\n    var win = useWindow();\n\n    if (win) {\n      win.__id__ = win.__id__ || getId();\n      winId = win.__id__;\n\n      if (!allWindows.has(winId)) {\n        allWindows.add(winId);\n        win.addEventListener('unload', cleanupMapEntries);\n      }\n    }\n\n    var contextualTheme = useTheme();\n    theme = theme || contextualTheme;\n    var renderer = mergeStylesRenderer;\n    var id = renderer.getId();\n    var path = [winId, id, theme];\n    var value = graphGet(graph, path); // Don't keep around unused styles\n\n    useEffect(function () {\n      graphRef(graph, [winId, id, theme]);\n      return function () {\n        return graphDeref(graph, [winId, id, theme]);\n      };\n    }, [winId, id, theme]);\n\n    if (!value) {\n      var styles = isStyleFunction(styleOrFunction) ? styleOrFunction(theme) : styleOrFunction;\n      value = mergeStylesRenderer.renderStyles(styles, {\n        targetWindow: win,\n        rtl: !!theme.rtl\n      });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n\nfunction isStyleFunction(styleOrFunction) {\n  return typeof styleOrFunction === 'function';\n}","map":{"version":3,"sources":["utilities/ThemeProvider/makeStyles.ts"],"names":[],"mappings":"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","sourcesContent":["import { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\nimport type { IStyle } from '@fluentui/style-utilities';\nimport type { Theme } from '@fluentui/theme';\nimport { useEffect } from 'react';\n\ntype GraphPath = readonly [windowId: string | undefined, id: number, theme: Theme | undefined];\nexport type StylesClassMapping<TStyleSet extends { [key in keyof TStyleSet]: IStyle }> = {\n  [key in keyof TStyleSet]: string;\n};\ntype Graph<TStyleSet extends { [key in keyof TStyleSet]: IStyle }> = Map<\n  string | undefined,\n  Map<number, Map<Theme | undefined, { classMap: StylesClassMapping<TStyleSet>; refCount: number }>>\n>;\n\nconst graphGet = <TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n): StylesClassMapping<TStyleSet> | undefined => {\n  return graphNode.get(windowId)?.get(id)?.get(theme)?.classMap;\n};\n\nconst graphSet = <TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n  classMap: StylesClassMapping<TStyleSet>,\n) => {\n  const windowNode =\n    graphNode.get(windowId) ??\n    new Map<number, Map<Theme | undefined, { classMap: StylesClassMapping<TStyleSet>; refCount: number }>>();\n  graphNode.set(windowId, windowNode);\n\n  const idNode =\n    windowNode.get(id) ?? new Map<Theme | undefined, { classMap: StylesClassMapping<TStyleSet>; refCount: number }>();\n  windowNode.set(id, idNode);\n\n  idNode.set(theme, { classMap, refCount: 0 });\n};\n\nfunction graphRef<TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n) {\n  const node = graphNode.get(windowId)?.get(id)?.get(theme);\n  if (node) {\n    node.refCount++;\n  }\n}\n\nfunction graphDeref<TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  graphNode: Graph<TStyleSet>,\n  [windowId, id, theme]: GraphPath,\n) {\n  const node = graphNode.get(windowId)?.get(id)?.get(theme);\n  if (node) {\n    node.refCount--;\n\n    if (node.refCount === 0) {\n      graphNode.get(windowId)?.get(id)?.delete(theme);\n\n      if (graphNode.get(windowId)?.get(id)?.size === 0) {\n        graphNode.get(windowId)?.delete(id);\n\n        if (graphNode.get(windowId)?.size === 0) {\n          graphNode.delete(windowId);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Options that can be provided to the hook generated by `makeStyles`.\n * @deprecated Only used in deprecated `makeStyles` implementation below.\n */\nexport type UseStylesOptions = {\n  theme?: Theme;\n};\n\ntype WindowWithId = Window & {\n  __id__: string;\n};\n\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\nexport function makeStyles<TStyleSet extends { [key in keyof TStyleSet]: IStyle } = { [key: string]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n  // eslint-disable-next-line deprecation/deprecation\n): (options?: UseStylesOptions) => StylesClassMapping<TStyleSet> {\n  // Create graph of inputs to map to output.\n  const graph: Graph<TStyleSet> = new Map();\n  // Retain a dictionary of window ids we're tracking\n  const allWindows = new Set<string>();\n\n  // cleanupMapEntries will\n  // 1. remove all the graph branches for the window,\n  // 2. remove the event listener,\n  // 3. delete the allWindows entry.\n  const cleanupMapEntries = (ev: PageTransitionEvent) => {\n    const win = ev.currentTarget as WindowWithId;\n    const winId = win.__id__;\n    graph.delete(winId);\n    win.removeEventListener('unload', cleanupMapEntries);\n    allWindows.delete(winId);\n  };\n\n  // eslint-disable-next-line deprecation/deprecation\n  return (options: UseStylesOptions = {}): StylesClassMapping<TStyleSet> => {\n    let { theme } = options;\n    let winId: string | undefined;\n    const win = useWindow() as WindowWithId | undefined;\n    if (win) {\n      win.__id__ = win.__id__ || getId();\n      winId = win.__id__;\n      if (!allWindows.has(winId)) {\n        allWindows.add(winId);\n        win.addEventListener('unload', cleanupMapEntries);\n      }\n    }\n\n    const contextualTheme = useTheme();\n\n    theme = theme || contextualTheme;\n    const renderer = mergeStylesRenderer;\n\n    const id = renderer.getId();\n    const path: GraphPath = [winId, id, theme] as const;\n    let value = graphGet(graph, path);\n\n    // Don't keep around unused styles\n    useEffect(() => {\n      graphRef(graph, [winId, id, theme]);\n\n      return () => graphDeref(graph, [winId, id, theme]);\n    }, [winId, id, theme]);\n\n    if (!value) {\n      const styles = isStyleFunction(styleOrFunction)\n        ? (styleOrFunction as (theme: Theme) => TStyleSet)(theme!)\n        : styleOrFunction;\n\n      value = mergeStylesRenderer.renderStyles<TStyleSet>(styles, { targetWindow: win, rtl: !!theme!.rtl });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n\nfunction isStyleFunction<TStyleSet extends { [key in keyof TStyleSet]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n): styleOrFunction is (theme: Theme) => TStyleSet {\n  return typeof styleOrFunction === 'function';\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}