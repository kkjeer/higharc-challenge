{"ast":null,"code":"var SuggestionsStore =\n/** @class */\nfunction () {\n  function SuggestionsStore(options) {\n    var _this = this;\n\n    this._isSuggestionModel = function (value) {\n      return value.item !== undefined;\n    };\n\n    this._ensureSuggestionModel = function (suggestion) {\n      if (_this._isSuggestionModel(suggestion)) {\n        return suggestion;\n      } else {\n        return {\n          item: suggestion,\n          selected: false,\n          ariaLabel: _this.getAriaLabel !== undefined ? _this.getAriaLabel(suggestion) : suggestion.name || suggestion.text || // eslint-disable-next-line deprecation/deprecation\n          suggestion.primaryText\n        };\n      }\n    };\n\n    this.suggestions = [];\n    this.getAriaLabel = options && options.getAriaLabel;\n  }\n\n  SuggestionsStore.prototype.updateSuggestions = function (newSuggestions) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n    } else {\n      this.suggestions = [];\n    }\n  };\n\n  SuggestionsStore.prototype.getSuggestions = function () {\n    return this.suggestions;\n  };\n\n  SuggestionsStore.prototype.getSuggestionAtIndex = function (index) {\n    return this.suggestions[index];\n  };\n\n  SuggestionsStore.prototype.removeSuggestion = function (index) {\n    this.suggestions.splice(index, 1);\n  };\n\n  SuggestionsStore.prototype.convertSuggestionsToSuggestionItems = function (suggestions) {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  };\n\n  return SuggestionsStore;\n}();\n\nexport { SuggestionsStore };","map":{"version":3,"sources":["components/FloatingPicker/Suggestions/SuggestionsStore.ts"],"names":[],"mappings":"AAOA,IAAA,gBAAA;AAAA;AAAA,YAAA;EAIE,SAAA,gBAAA,CAAY,OAAZ,EAAgD;IAAhD,IAAA,KAAA,GAAA,IAAA;;IA6BQ,KAAA,kBAAA,GAAqB,UAAC,KAAD,EAA+B;MAC1D,OAA6B,KAAM,CAAC,IAAP,KAAgB,SAA7C;IACD,CAFO;;IAIA,KAAA,sBAAA,GAAyB,UAAC,UAAD,EAAoC;MACnE,IAAI,KAAI,CAAC,kBAAL,CAAwB,UAAxB,CAAJ,EAAyC;QACvC,OAAO,UAAP;MACD,CAFD,MAEO;QACL,OAAO;UACL,IAAI,EAAE,UADD;UAEL,QAAQ,EAAE,KAFL;UAGL,SAAS,EACP,KAAI,CAAC,YAAL,KAAsB,SAAtB,GACI,KAAI,CAAC,YAAL,CAAkB,UAAlB,CADJ,GAEM,UAA2B,CAAC,IAA5B,IACc,UAAW,CAAC,IAD1B,IAEF;UACgB,UAAW,CAAC;QAT7B,CAAP;MAWD;IACF,CAhBO;;IAhCN,KAAK,WAAL,GAAmB,EAAnB;IACA,KAAK,YAAL,GAAoB,OAAO,IAAI,OAAO,CAAC,YAAvC;EACD;;EAEM,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,cAAzB,EAA4C;IAC1C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAf,GAAwB,CAA9C,EAAiD;MAC/C,KAAK,WAAL,GAAmB,KAAK,mCAAL,CAAyC,cAAzC,CAAnB;IACD,CAFD,MAEO;MACL,KAAK,WAAL,GAAmB,EAAnB;IACD;EACF,CANM;;EAQA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;IACE,OAAO,KAAK,WAAZ;EACD,CAFM;;EAIA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,KAA5B,EAAyC;IACvC,OAAO,KAAK,WAAL,CAAiB,KAAjB,CAAP;EACD,CAFM;;EAIA,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,KAAxB,EAAqC;IACnC,KAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAxB,EAA+B,CAA/B;EACD,CAFM;;EAIA,gBAAA,CAAA,SAAA,CAAA,mCAAA,GAAP,UAA2C,WAA3C,EAAsF;IACpF,OAAO,KAAK,CAAC,OAAN,CAAc,WAAd,IAA6B,WAAW,CAAC,GAAZ,CAAgB,KAAK,sBAArB,CAA7B,GAA4E,EAAnF;EACD,CAFM;;EAyBT,OAAA,gBAAA;AAAC,CAtDD,EAAA","sourcesContent":["import type { ISuggestionModel, ITag } from '../../../Pickers';\nimport type { IPersonaProps } from '../../../Persona';\n\nexport type SuggestionsStoreOptions<T> = {\n  getAriaLabel?: (item: T) => string;\n};\n\nexport class SuggestionsStore<T> {\n  public suggestions: ISuggestionModel<T>[];\n  private getAriaLabel?: (item: T) => string;\n\n  constructor(options?: SuggestionsStoreOptions<T>) {\n    this.suggestions = [];\n    this.getAriaLabel = options && options.getAriaLabel;\n  }\n\n  public updateSuggestions(newSuggestions: T[]): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n    } else {\n      this.suggestions = [];\n    }\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel:\n          this.getAriaLabel !== undefined\n            ? this.getAriaLabel(suggestion)\n            : ((suggestion as any) as ITag).name ||\n              (<IPersonaProps>suggestion).text ||\n              // eslint-disable-next-line deprecation/deprecation\n              (<IPersonaProps>suggestion).primaryText,\n      };\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}