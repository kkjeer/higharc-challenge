{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\n\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar ProgressIndicatorBase =\n/** @class */\nfunction (_super) {\n  __extends(ProgressIndicatorBase, _super);\n\n  function ProgressIndicatorBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderProgress = function (props) {\n      var _a = _this.props,\n          ariaLabel = _a.ariaLabel,\n          ariaValueText = _a.ariaValueText,\n          barHeight = _a.barHeight,\n          className = _a.className,\n          description = _a.description,\n          // eslint-disable-next-line deprecation/deprecation\n      _b = _a.label,\n          // eslint-disable-next-line deprecation/deprecation\n      label = _b === void 0 ? _this.props.title : _b,\n          styles = _a.styles,\n          theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-describedby\": description ? _this._descriptionId : undefined,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": label ? _this._labelId : undefined,\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n\n    var id = getId('progress-indicator');\n    _this._labelId = id + '-label';\n    _this._descriptionId = id + '-description';\n    return _this;\n  }\n\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.label,\n        // eslint-disable-next-line deprecation/deprecation\n    label = _b === void 0 ? this.props.title : _b,\n        // Fall back to deprecated value.\n    description = _a.description,\n        styles = _a.styles,\n        theme = _a.theme,\n        progressHidden = _a.progressHidden,\n        _c = _a.onRenderProgress,\n        onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      id: this._labelId,\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      id: this._descriptionId,\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\n\nexport { ProgressIndicatorBase };","map":{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nimport type {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  private _labelId: string;\n  private _descriptionId: string;\n\n  constructor(props: IProgressIndicatorProps) {\n    super(props);\n\n    const id = getId('progress-indicator');\n    this._labelId = id + '-label';\n    this._descriptionId = id + '-description';\n  }\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? (\n          <div id={this._labelId} className={classNames.itemName}>\n            {label}\n          </div>\n        ) : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? (\n          <div id={this._descriptionId} className={classNames.itemDescription}>\n            {description}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    const {\n      ariaLabel,\n      ariaValueText,\n      barHeight,\n      className,\n      description,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title,\n      styles,\n      theme,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-describedby={description ? this._descriptionId : undefined}\n          aria-label={ariaLabel}\n          aria-labelledby={label ? this._labelId : undefined}\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}