{"ast":null,"code":"/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex(array, cb, fromIndex) {\n  if (fromIndex === void 0) {\n    fromIndex = 0;\n  }\n\n  var index = -1;\n\n  for (var i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\n\nexport function find(array, cb) {\n  var index = findIndex(array, cb);\n\n  if (index < 0) {\n    return undefined;\n  }\n\n  return array[index];\n}\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\n\nexport function createArray(size, getItem) {\n  var array = [];\n\n  for (var i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n\n  return array;\n}\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\n\nexport function toMatrix(items, columnCount) {\n  return items.reduce(function (rows, currentValue, index) {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n\n    return rows;\n  }, []);\n}\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\n\nexport function removeIndex(array, index) {\n  return array.filter(function (_, i) {\n    return index !== i;\n  });\n}\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\n\nexport function replaceElement(array, newElement, index) {\n  var copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\n\nexport function addElementAtIndex(array, index, itemToAdd) {\n  var copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\n\nexport function flatten(array) {\n  var result = [];\n  array.forEach(function (item) {\n    return result = result.concat(item);\n  });\n  return result;\n}\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\n\nexport function arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["array.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean, fromIndex: number = 0): number {\n  let index = -1;\n\n  for (let i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined {\n  let index = findIndex(array, cb);\n\n  if (index < 0) {\n    return undefined;\n  }\n\n  return array[index];\n}\n\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray<T>(size: number, getItem: (index: number) => T): T[] {\n  let array: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n\n  return array;\n}\n\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix<T>(items: T[], columnCount: number): T[][] {\n  return items.reduce((rows: T[][], currentValue: T, index: number) => {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n    return rows;\n  }, [] as T[][]);\n}\n\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex<T>(array: T[], index: number): T[] {\n  return array.filter((_: T, i: number) => index !== i);\n}\n\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement<T>(array: T[], newElement: T, index: number): T[] {\n  const copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[] {\n  const copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten<T>(array: (T | T[])[]): T[] {\n  let result: T[] = [];\n  array.forEach((item: T | T[]): T[] => (result = result.concat(item)));\n  return result;\n}\n\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual<T>(array1: T[], array2: T[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}