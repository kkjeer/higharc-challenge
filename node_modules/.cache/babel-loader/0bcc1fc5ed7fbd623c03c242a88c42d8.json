{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsxRuntime classic */\n\n/** @jsx withSlots */\n\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\n\nvar StackView = function (props) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      disableShrink = props.disableShrink,\n      wrap = props.wrap,\n      rest = __rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  }); // React.Fragment needs to be ignored before checking for Stack's children\n\n  var stackChildren = React.Children.toArray(props.children);\n\n  if (stackChildren.length === 1 && React.isValidElement(stackChildren[0]) && stackChildren[0].type === React.Fragment) {\n    stackChildren = stackChildren[0].props.children;\n  }\n\n  stackChildren = React.Children.map(stackChildren, function (child, index) {\n    if (!child) {\n      return null;\n    }\n\n    if (_isStackItem(child)) {\n      var defaultItemProps = {\n        shrink: !disableShrink\n      };\n      return React.cloneElement(child, __assign(__assign({}, defaultItemProps), child.props));\n    }\n\n    return child;\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n\n  if (wrap) {\n    return withSlots(Slots.root, __assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n\n  return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\n\nfunction _isStackItem(item) {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name\n  item.type.displayName === StackItem.displayName;\n}\n\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","map":{"version":3,"sources":["components/Stack/Stack.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nimport type { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport type { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  // React.Fragment needs to be ignored before checking for Stack's children\n  let stackChildren = React.Children.toArray(props.children);\n  if (\n    stackChildren.length === 1 &&\n    React.isValidElement(stackChildren[0]) &&\n    stackChildren[0].type === React.Fragment\n  ) {\n    stackChildren = stackChildren[0].props.children;\n  }\n\n  stackChildren = React.Children.map(stackChildren, (child: React.ReactElement<IStackItemProps>, index: number) => {\n    if (!child) {\n      return null;\n    }\n\n    if (_isStackItem(child)) {\n      const defaultItemProps: IStackItemProps = {\n        shrink: !disableShrink,\n      };\n\n      return React.cloneElement(child, {\n        ...defaultItemProps,\n        ...child.props,\n      });\n    }\n\n    return child;\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}