{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { css, getNativeProps, buttonProperties } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { useId } from '@fluentui/react-hooks';\nexport var ButtonGridCell = function (props) {\n  var _a;\n\n  var defaultId = useId('gridCell');\n  var item = props.item,\n      _b = props.id,\n      id = _b === void 0 ? defaultId : _b,\n      className = props.className,\n      selected = props.selected,\n      _c = props.disabled,\n      disabled = _c === void 0 ? false : _c,\n      onRenderItem = props.onRenderItem,\n      cellDisabledStyle = props.cellDisabledStyle,\n      cellIsSelectedStyle = props.cellIsSelectedStyle,\n      index = props.index,\n      label = props.label,\n      getClassNames = props.getClassNames,\n      onClick = props.onClick,\n      onHover = props.onHover,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onMouseEnter = props.onMouseEnter,\n      onFocus = props.onFocus;\n  var buttonProps = getNativeProps(props, buttonProperties);\n  var handleClick = React.useCallback(function (event) {\n    if (onClick && !disabled) {\n      onClick(item, event);\n    }\n  }, [disabled, item, onClick]);\n  var handleMouseEnter = React.useCallback(function (ev) {\n    var didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n    if (!didUpdateOnEnter && onHover && !disabled) {\n      onHover(item, ev);\n    }\n  }, [disabled, item, onHover, onMouseEnter]);\n  var handleMouseMove = React.useCallback(function (ev) {\n    var didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n    if (!didUpdateOnMove && onHover && !disabled) {\n      onHover(item, ev);\n    }\n  }, [disabled, item, onHover, onMouseMove]);\n  var handleMouseLeave = React.useCallback(function (ev) {\n    var didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n    if (!didUpdateOnLeave && onHover && !disabled) {\n      onHover(undefined, ev);\n    }\n  }, [disabled, onHover, onMouseLeave]);\n  var handleFocus = React.useCallback(function (event) {\n    if (onFocus && !disabled) {\n      onFocus(item, event);\n    }\n  }, [disabled, item, onFocus]);\n  return React.createElement(CommandButton, __assign({\n    id: id,\n    \"data-index\": index,\n    \"data-is-focusable\": true,\n    \"aria-selected\": selected,\n    ariaLabel: label,\n    title: label\n  }, buttonProps, {\n    className: css(className, (_a = {}, _a['' + cellIsSelectedStyle] = selected, _a['' + cellDisabledStyle] = disabled, _a)),\n    onClick: handleClick,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onFocus: handleFocus,\n    getClassNames: getClassNames\n  }), onRenderItem(item));\n};","map":{"version":3,"sources":["utilities/ButtonGrid/ButtonGridCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css, getNativeProps, buttonProperties } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { useId } from '@fluentui/react-hooks';\nimport type { IButtonGridCellProps } from './ButtonGridCell.types';\n\nexport const ButtonGridCell = <T, P extends IButtonGridCellProps<T>>(props: IButtonGridCellProps<T>) => {\n  const defaultId = useId('gridCell');\n  const {\n    item,\n    id = defaultId,\n    className,\n    selected,\n    disabled = false,\n    onRenderItem,\n    cellDisabledStyle,\n    cellIsSelectedStyle,\n    index,\n    label,\n    getClassNames,\n    onClick,\n    onHover,\n    onMouseMove,\n    onMouseLeave,\n    onMouseEnter,\n    onFocus,\n  } = props;\n\n  const buttonProps = getNativeProps(props, buttonProperties);\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>): void => {\n      if (onClick && !disabled) {\n        onClick(item, event);\n      }\n    },\n    [disabled, item, onClick],\n  );\n\n  const handleMouseEnter = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): void => {\n      const didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n      if (!didUpdateOnEnter && onHover && !disabled) {\n        onHover(item, ev);\n      }\n    },\n    [disabled, item, onHover, onMouseEnter],\n  );\n\n  const handleMouseMove = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): void => {\n      const didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n      if (!didUpdateOnMove && onHover && !disabled) {\n        onHover(item, ev);\n      }\n    },\n    [disabled, item, onHover, onMouseMove],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): void => {\n      const didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n      if (!didUpdateOnLeave && onHover && !disabled) {\n        onHover(undefined, ev);\n      }\n    },\n    [disabled, onHover, onMouseLeave],\n  );\n\n  const handleFocus = React.useCallback(\n    (event: React.FocusEvent<HTMLButtonElement>): void => {\n      if (onFocus && !disabled) {\n        onFocus(item, event);\n      }\n    },\n    [disabled, item, onFocus],\n  );\n\n  return (\n    <CommandButton\n      id={id}\n      data-index={index}\n      data-is-focusable\n      aria-selected={selected}\n      ariaLabel={label}\n      title={label}\n      {...buttonProps}\n      className={css(className, {\n        ['' + cellIsSelectedStyle]: selected,\n        ['' + cellDisabledStyle]: disabled,\n      })}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      getClassNames={getClassNames}\n    >\n      {onRenderItem(item)}\n    </CommandButton>\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}