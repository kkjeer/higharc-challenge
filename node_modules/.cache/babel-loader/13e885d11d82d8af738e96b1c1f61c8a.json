{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nexport var CalendarGridRow = function (props) {\n  var classNames = props.classNames,\n      week = props.week,\n      weeks = props.weeks,\n      weekIndex = props.weekIndex,\n      rowClassName = props.rowClassName,\n      ariaRole = props.ariaRole,\n      showWeekNumbers = props.showWeekNumbers,\n      firstDayOfWeek = props.firstDayOfWeek,\n      firstWeekOfYear = props.firstWeekOfYear,\n      navigatedDate = props.navigatedDate,\n      strings = props.strings;\n  var weekNumbers = showWeekNumbers ? getWeekNumbersInMonth(weeks.length, firstDayOfWeek, firstWeekOfYear, navigatedDate) : null;\n  var titleString = weekNumbers ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex]) : '';\n  return React.createElement(\"tr\", {\n    role: ariaRole,\n    className: rowClassName,\n    key: weekIndex + '_' + week[0].key\n  }, showWeekNumbers && weekNumbers && React.createElement(\"th\", {\n    className: classNames.weekNumberCell,\n    key: weekIndex,\n    title: titleString,\n    \"aria-label\": titleString,\n    scope: \"row\"\n  }, React.createElement(\"span\", null, weekNumbers[weekIndex])), week.map(function (day, dayIndex) {\n    return React.createElement(CalendarGridDayCell, __assign({}, props, {\n      key: day.key,\n      day: day,\n      dayIndex: dayIndex\n    }));\n  }));\n};","map":{"version":3,"sources":["components/CalendarDayGrid/CalendarGridRow.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,MAAT,QAAuB,qBAAvB;AACA,SAAS,qBAAT,QAAsC,+BAAtC;AACA,SAAS,mBAAT,QAAoC,uBAApC;AA2BA,OAAO,IAAM,eAAe,GAAmD,UAAA,KAAA,EAAK;EAEhF,IAAA,UAAU,GAWR,KAAK,CAXG,UAAV;EAAA,IACA,IAAI,GAUF,KAAK,CAVH,IADJ;EAAA,IAEA,KAAK,GASH,KAAK,CATF,KAFL;EAAA,IAGA,SAAS,GAQP,KAAK,CARE,SAHT;EAAA,IAIA,YAAY,GAOV,KAAK,CAPK,YAJZ;EAAA,IAKA,QAAQ,GAMN,KAAK,CANC,QALR;EAAA,IAMA,eAAe,GAKb,KAAK,CALQ,eANf;EAAA,IAOA,cAAc,GAIZ,KAAK,CAJO,cAPd;EAAA,IAQA,eAAe,GAGb,KAAK,CAHQ,eARf;EAAA,IASA,aAAa,GAEX,KAAK,CAFM,aATb;EAAA,IAUA,OAAO,GACL,KAAK,CADA,OAVP;EAYF,IAAM,WAAW,GAAG,eAAe,GAC/B,qBAAqB,CAAC,KAAM,CAAC,MAAR,EAAgB,cAAhB,EAAgC,eAAhC,EAAiD,aAAjD,CADU,GAE/B,IAFJ;EAIA,IAAM,WAAW,GAAG,WAAW,GAC3B,OAAO,CAAC,sBAAR,IAAkC,MAAM,CAAC,OAAO,CAAC,sBAAT,EAAiC,WAAW,CAAC,SAAD,CAA5C,CADb,GAE3B,EAFJ;EAIA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAI,IAAI,EAAE,QAAV;IAAoB,SAAS,EAAE,YAA/B;IAA6C,GAAG,EAAE,SAAS,GAAG,GAAZ,GAAkB,IAAI,CAAC,CAAD,CAAJ,CAAQ;EAA5E,CAAA,EACG,eAAe,IAAI,WAAnB,IACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IACE,SAAS,EAAE,UAAU,CAAC,cADxB;IAEE,GAAG,EAAE,SAFP;IAGE,KAAK,EAAE,WAHT;IAGoB,cACN,WAJd;IAKE,KAAK,EAAC;EALR,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAO,WAAW,CAAC,SAAD,CAAlB,CAPF,CAFJ,EAYG,IAAI,CAAC,GAAL,CAAS,UAAC,GAAD,EAAgB,QAAhB,EAAgC;IAAK,OAC7C,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB,QAAA,CAAA,EAAA,EAAK,KAAL,EAAU;MAAE,GAAG,EAAE,GAAG,CAAC,GAAX;MAAgB,GAAG,EAAE,GAArB;MAA0B,QAAQ,EADnB;IACf,CAAV,CAApB,CAD6C;EAE9C,CAFA,CAZH,CADF;AAkBD,CAxCM","sourcesContent":["import * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo, IWeekCorners } from './CalendarDayGrid.base';\n\nexport interface ICalendarGridRowProps extends ICalendarDayGridProps {\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n  weeks: IDayInfo[][];\n  week: IDayInfo[];\n  weekIndex: number;\n  weekCorners?: IWeekCorners;\n  ariaHidden?: boolean;\n  rowClassName?: string;\n  ariaRole?: string;\n  navigatedDayRef: React.MutableRefObject<HTMLTableCellElement>;\n  activeDescendantId: string;\n  calculateRoundedStyles(\n    classNames: IProcessedStyleSet<ICalendarDayGridStyles>,\n    above: boolean,\n    below: boolean,\n    left: boolean,\n    right: boolean,\n  ): string;\n  getDayInfosInRangeOfDay(dayToCompare: IDayInfo): IDayInfo[];\n  getRefsFromDayInfos(dayInfosInRange: IDayInfo[]): (HTMLElement | null)[];\n}\n\nexport const CalendarGridRow: React.FunctionComponent<ICalendarGridRowProps> = props => {\n  const {\n    classNames,\n    week,\n    weeks,\n    weekIndex,\n    rowClassName,\n    ariaRole,\n    showWeekNumbers,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    navigatedDate,\n    strings,\n  } = props;\n  const weekNumbers = showWeekNumbers\n    ? getWeekNumbersInMonth(weeks!.length, firstDayOfWeek, firstWeekOfYear, navigatedDate)\n    : null;\n\n  const titleString = weekNumbers\n    ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex])\n    : '';\n\n  return (\n    <tr role={ariaRole} className={rowClassName} key={weekIndex + '_' + week[0].key}>\n      {showWeekNumbers && weekNumbers && (\n        <th\n          className={classNames.weekNumberCell}\n          key={weekIndex}\n          title={titleString}\n          aria-label={titleString}\n          scope=\"row\"\n        >\n          <span>{weekNumbers[weekIndex]}</span>\n        </th>\n      )}\n      {week.map((day: IDayInfo, dayIndex: number) => (\n        <CalendarGridDayCell {...props} key={day.key} day={day} dayIndex={dayIndex} />\n      ))}\n    </tr>\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}