{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, classNamesFunction, DelayedRender, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\n\nvar TextFieldBase =\n/** @class */\nfunction (_super) {\n  __extends(TextFieldBase, _super);\n\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._textElement = React.createRef();\n\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required; // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n\n      return null;\n    };\n\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n\n      return null;\n    };\n\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      var _a, _b; // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n\n      var element = event.target;\n      var value = element.value; // Ignore this event if any of the following are true:\n      // - the value is undefined (in case one of the IE bugs comes back)\n      // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n      // - it's the same as the previous value\n\n      var previousValue = _getValue(_this.props, _this.state) || '';\n\n      if (value === undefined || value === _this._lastChangeValue || value === previousValue) {\n        _this._lastChangeValue = undefined;\n        return;\n      }\n\n      _this._lastChangeValue = value;\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);\n\n      if (!_this._isControlled) {\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        _this.setState({\n          uncontrolledValue: value\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n    _this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    _this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    _this._warnControlledUsage();\n\n    var _a = props.defaultValue,\n        defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n        selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n        end = selection[1];\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    var prevValue = _getValue(prevProps, prevState);\n\n    var value = this.value;\n\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps); // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n\n\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      } // Adjust height if needed based on new value\n\n\n      this._adjustInputHeight(); // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n\n\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n        borderless = _a.borderless,\n        className = _a.className,\n        disabled = _a.disabled,\n        invalid = _a.invalid,\n        iconProps = _a.iconProps,\n        inputClassName = _a.inputClassName,\n        label = _a.label,\n        multiline = _a.multiline,\n        required = _a.required,\n        underlined = _a.underlined,\n        prefix = _a.prefix,\n        resizable = _a.resizable,\n        suffix = _a.suffix,\n        theme = _a.theme,\n        styles = _a.styles,\n        autoAdjustHeight = _a.autoAdjustHeight,\n        canRevealPassword = _a.canRevealPassword,\n        revealPasswordAriaLabel = _a.revealPasswordAriaLabel,\n        type = _a.type,\n        _b = _a.onRenderPrefix,\n        onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n        _c = _a.onRenderSuffix,\n        onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n        _d = _a.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n        _e = _a.onRenderDescription,\n        onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n        isFocused = _f.isFocused,\n        isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n    var isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return (// eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", {\n        ref: this.props.elementRef,\n        className: classNames.root\n      }, React.createElement(\"div\", {\n        className: classNames.wrapper\n      }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n        className: classNames.fieldGroup\n      }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n        className: classNames.prefix,\n        id: this._prefixId\n      }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n        className: classNames.icon\n      }, iconProps)), hasRevealButton && // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n      React.createElement(\"button\", {\n        \"aria-label\": revealPasswordAriaLabel,\n        className: classNames.revealButton,\n        onClick: this._onRevealButtonClick,\n        \"aria-pressed\": !!isRevealingPassword,\n        type: \"button\"\n      }, React.createElement(\"span\", {\n        className: classNames.revealSpan\n      }, React.createElement(Icon, {\n        className: classNames.revealIcon,\n        iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n      }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n        className: classNames.suffix,\n        id: this._suffixId\n      }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n        id: this._descriptionId\n      }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n        role: \"alert\"\n      }, React.createElement(DelayedRender, null, this._renderErrorMessage()))))\n    );\n  };\n  /**\n   * Sets focus on the text field\n   */\n\n\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n\n\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n\n\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n\n\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n          errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n\n  TextFieldBase.prototype._renderErrorMessage = function () {\n    var errorMessage = this._errorMessage;\n    return errorMessage ? typeof errorMessage === 'string' ? React.createElement(\"p\", {\n      className: this._classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage)) : React.createElement(\"div\", {\n      className: this._classNames.errorMessage,\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage) : null;\n  };\n\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TextFieldBase.prototype._renderTextArea = function () {\n    var _a = this.props.invalid,\n        invalid = _a === void 0 ? !!this._errorMessage : _a;\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": invalid,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n\n  TextFieldBase.prototype._renderInput = function () {\n    var _a = this.props,\n        ariaLabel = _a.ariaLabel,\n        _b = _a.invalid,\n        invalid = _b === void 0 ? !!this._errorMessage : _b,\n        onRenderPrefix = _a.onRenderPrefix,\n        onRenderSuffix = _a.onRenderSuffix,\n        prefix = _a.prefix,\n        suffix = _a.suffix,\n        _c = _a.type,\n        type = _c === void 0 ? 'text' : _c,\n        label = _a.label; // build aria-labelledby list from label, prefix, and suffix\n\n    var labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    var inputProps = __assign(__assign({\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id\n    }, getNativeProps(this.props, inputProperties, ['defaultValue', 'type'])), {\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    });\n\n    var defaultRender = function (updatedInputProps) {\n      return React.createElement(\"input\", __assign({}, updatedInputProps));\n    };\n\n    var onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  };\n\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this; // In case _validate is called again while validation promise is executing\n\n\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true\n  };\n  return TextFieldBase;\n}(React.Component);\n\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\n\nfunction _getValue(props, state) {\n  var _a = props.value,\n      value = _a === void 0 ? state.uncontrolledValue : _a;\n\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\n\n\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n} // Only calculate this once across all TextFields, since will stay the same\n\n\nvar __browserNeedsRevealButton;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n\n    if (win === null || win === void 0 ? void 0 : win.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /^Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"sources":["components/TextField/TextField.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /^Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}