{"ast":null,"code":"var _layersByHostId = {};\nvar _layerHostsById = {};\nvar defaultHostId = 'fluent-default-layer-host';\n\nvar _defaultHostSelector = \"#\" + defaultHostId;\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\n\nexport function registerLayer(hostId, callback) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  var layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {\n      var layerHost = layerHosts_1[_i];\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\n\nexport function unregisterLayer(hostId, callback) {\n  var layers = _layersByHostId[hostId];\n\n  if (layers) {\n    var idx = layers.indexOf(callback);\n\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  var layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {\n      var layerHost = layerHosts_2[_i];\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\n\nexport function getLayerCount(hostId) {\n  var layers = _layerHostsById[hostId];\n  return layers ? layers.length : 0;\n}\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId\n * @returns A component ref for the associated layer host.\n */\n\nexport function getLayerHost(hostId) {\n  var layerHosts = _layerHostsById[hostId];\n  return layerHosts && layerHosts[0] || undefined;\n}\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\n\nexport function registerLayerHost(hostId, layerHost) {\n  var layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []); // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n\n  layerHosts.unshift(layerHost);\n}\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\n\nexport function unregisterLayerHost(hostId, layerHost) {\n  var layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    var idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n/**\n * When no default layer host is provided, this function is executed to create the default host.\n */\n\nexport function createDefaultLayerHost(doc) {\n  var host = doc.createElement('div');\n  host.setAttribute('id', defaultHostId);\n  host.style.cssText = 'position:fixed;z-index:1000000';\n  doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);\n  return host;\n}\n/**\n * This function can be optionally called to clean up the default layer host as needed.\n */\n\nexport function cleanupDefaultLayerHost(doc) {\n  var host = doc.querySelector(\"#\" + defaultHostId);\n\n  if (host) {\n    doc.removeChild(host);\n  }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\n\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (callback) {\n      return callback();\n    });\n  }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\n\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\n\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":{"version":3,"sources":["components/Layer/Layer.notification.ts"],"names":[],"mappings":"AAEA,IAAM,eAAe,GAAyC,EAA9D;AACA,IAAM,eAAe,GAAuC,EAA5D;AAEA,IAAM,aAAa,GAAG,2BAAtB;;AACA,IAAI,oBAAoB,GAAuB,MAAI,aAAnD;AAEA;;;;AAIG;;;AACH,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAAwC,QAAxC,EAA4D;EAChE,IAAI,CAAC,eAAe,CAAC,MAAD,CAApB,EAA8B;IAC5B,eAAe,CAAC,MAAD,CAAf,GAA0B,EAA1B;EACD;;EAED,eAAe,CAAC,MAAD,CAAf,CAAwB,IAAxB,CAA6B,QAA7B;;EAEA,IAAM,UAAU,GAAG,eAAe,CAAC,MAAD,CAAlC;;EAEA,IAAI,UAAJ,EAAgB;IACd,KAAwB,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAA,UAAxB,EAAwB,EAAA,GAAA,YAAA,CAAA,MAAxB,EAAwB,EAAA,EAAxB,EAAoC;MAA/B,IAAM,SAAS,GAAA,YAAA,CAAA,EAAA,CAAf;MACH,SAAS,CAAC,mBAAV;IACD;EACF;AACF;AAED;;;;AAIG;;AACH,OAAM,SAAU,eAAV,CAA0B,MAA1B,EAA0C,QAA1C,EAA8D;EAClE,IAAM,MAAM,GAAG,eAAe,CAAC,MAAD,CAA9B;;EAEA,IAAI,MAAJ,EAAY;IACV,IAAM,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,QAAf,CAAZ;;IACA,IAAI,GAAG,IAAI,CAAX,EAAc;MACZ,MAAM,CAAC,MAAP,CAAc,GAAd,EAAmB,CAAnB;;MAEA,IAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;QACvB,OAAO,eAAe,CAAC,MAAD,CAAtB;MACD;IACF;EACF;;EAED,IAAM,UAAU,GAAG,eAAe,CAAC,MAAD,CAAlC;;EAEA,IAAI,UAAJ,EAAgB;IACd,KAAwB,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAA,UAAxB,EAAwB,EAAA,GAAA,YAAA,CAAA,MAAxB,EAAwB,EAAA,EAAxB,EAAoC;MAA/B,IAAM,SAAS,GAAA,YAAA,CAAA,EAAA,CAAf;MACH,SAAS,CAAC,mBAAV;IACD;EACF;AACF;AAED;;;;AAIG;;AACH,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAAsC;EAC1C,IAAM,MAAM,GAAG,eAAe,CAAC,MAAD,CAA9B;EAEA,OAAO,MAAM,GAAG,MAAM,CAAC,MAAV,GAAmB,CAAhC;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,YAAV,CAAuB,MAAvB,EAAqC;EACzC,IAAM,UAAU,GAAG,eAAe,CAAC,MAAD,CAAlC;EAEA,OAAQ,UAAU,IAAI,UAAU,CAAC,CAAD,CAAzB,IAAiC,SAAxC;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA4C,SAA5C,EAAiE;EACrE,IAAM,UAAU,GAAG,eAAe,CAAC,MAAD,CAAf,KAA4B,eAAe,CAAC,MAAD,CAAf,GAA0B,EAAtD,CAAnB,CADqE,CAGrE;EACA;EACA;EACA;;EACA,UAAU,CAAC,OAAX,CAAmB,SAAnB;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,mBAAV,CAA8B,MAA9B,EAA8C,SAA9C,EAAmE;EACvE,IAAM,UAAU,GAAG,eAAe,CAAC,MAAD,CAAlC;;EAEA,IAAI,UAAJ,EAAgB;IACd,IAAM,GAAG,GAAG,UAAU,CAAC,OAAX,CAAmB,SAAnB,CAAZ;;IAEA,IAAI,GAAG,IAAI,CAAX,EAAc;MACZ,UAAU,CAAC,MAAX,CAAkB,GAAlB,EAAuB,CAAvB;IACD;;IAED,IAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;MAC3B,OAAO,eAAe,CAAC,MAAD,CAAtB;IACD;EACF;AACF;AAED;;AAEG;;AACH,OAAM,SAAU,sBAAV,CAAiC,GAAjC,EAA8C;EAClD,IAAM,IAAI,GAAG,GAAG,CAAC,aAAJ,CAAkB,KAAlB,CAAb;EACA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,aAAxB;EACC,IAAoB,CAAC,KAArB,CAA2B,OAA3B,GAAqC,gCAArC;EAED,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,IAAL,CAAU,WAAV,CAAsB,IAAtB,CAAA;EAEA,OAAO,IAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,uBAAV,CAAkC,GAAlC,EAA+C;EACnD,IAAM,IAAI,GAAG,GAAG,CAAC,aAAJ,CAAkB,MAAI,aAAtB,CAAb;;EAEA,IAAI,IAAJ,EAAU;IACR,GAAG,CAAC,WAAJ,CAAgB,IAAhB;EACD;AACF;AAED;;;AAGG;;AACH,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAAsC;EAC1C,IAAI,eAAe,CAAC,EAAD,CAAnB,EAAyB;IACvB,eAAe,CAAC,EAAD,CAAf,CAAoB,OAApB,CAA4B,UAAA,QAAA,EAAQ;MAAI,OAAA,QAAA,EAAA;IAAU,CAAlD;EACD;AACF;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,gBAAV,CAA2B,QAA3B,EAA4C;EAChD,oBAAoB,GAAG,QAAvB;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,gBAAV,GAA0B;EAC9B,OAAO,oBAAP;AACD","sourcesContent":["import { ILayerHost } from './LayerHost.types';\n\nconst _layersByHostId: { [hostId: string]: (() => void)[] } = {};\nconst _layerHostsById: { [hostId: string]: ILayerHost[] } = {};\n\nconst defaultHostId = 'fluent-default-layer-host';\nlet _defaultHostSelector: string | undefined = `#${defaultHostId}`;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  const layers = _layersByHostId[hostId];\n\n  if (layers) {\n    const idx = layers.indexOf(callback);\n    if (idx >= 0) {\n      layers.splice(idx, 1);\n\n      if (layers.length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    for (const layerHost of layerHosts) {\n      layerHost.notifyLayersChanged();\n    }\n  }\n}\n\n/**\n * Gets the number of layers currently registered with a host id.\n * @param hostId Id of the layer host.\n * @returns The number of layers currently registered with the host.\n */\nexport function getLayerCount(hostId: string): number {\n  const layers = _layerHostsById[hostId];\n\n  return layers ? layers.length : 0;\n}\n\n/**\n * Gets the Layer Host instance associated with a hostId, if applicable.\n * @param hostId\n * @returns A component ref for the associated layer host.\n */\nexport function getLayerHost(hostId: string): ILayerHost | undefined {\n  const layerHosts = _layerHostsById[hostId];\n\n  return (layerHosts && layerHosts[0]) || undefined;\n}\n\n/**\n * Registers a Layer Host with an associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\nexport function registerLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId] || (_layerHostsById[hostId] = []);\n\n  // Insert this at the start of an array to avoid race conditions between mount and unmount.\n  // If a LayerHost is re-mounted, and mount of the new instance may occur before the unmount of the old one.\n  // Putting the new instance at the start of this array ensures that calls to `getLayerHost` will immediately\n  // get the new one even if the old one is around briefly.\n  layerHosts.unshift(layerHost);\n}\n\n/**\n * Unregisters a Layer Host from the associated hostId.\n * @param hostId Id of the layer host\n * @param layerHost layer host instance\n */\nexport function unregisterLayerHost(hostId: string, layerHost: ILayerHost): void {\n  const layerHosts = _layerHostsById[hostId];\n\n  if (layerHosts) {\n    const idx = layerHosts.indexOf(layerHost);\n\n    if (idx >= 0) {\n      layerHosts.splice(idx, 1);\n    }\n\n    if (layerHosts.length === 0) {\n      delete _layerHostsById[hostId];\n    }\n  }\n}\n\n/**\n * When no default layer host is provided, this function is executed to create the default host.\n */\nexport function createDefaultLayerHost(doc: Document): Node | null {\n  const host = doc.createElement('div');\n  host.setAttribute('id', defaultHostId);\n  (host as HTMLElement).style.cssText = 'position:fixed;z-index:1000000';\n\n  doc?.body.appendChild(host);\n\n  return host;\n}\n\n/**\n * This function can be optionally called to clean up the default layer host as needed.\n */\nexport function cleanupDefaultLayerHost(doc: Document) {\n  const host = doc.querySelector(`#${defaultHostId}`);\n\n  if (host) {\n    doc.removeChild(host);\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsy value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}