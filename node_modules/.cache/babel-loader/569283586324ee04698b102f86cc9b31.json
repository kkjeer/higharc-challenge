{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nvar getClassNames = classNamesFunction();\nvar DialogFooterType = React.createElement(DialogFooter, null).type;\nvar COMPONENT_NAME = 'DialogContent'; // eslint-disable-next-line deprecation/deprecation\n\nvar DialogContentBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogContentBase, _super);\n\n  function DialogContentBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id'\n    });\n    return _this;\n  }\n\n  DialogContentBase.prototype.render = function () {\n    var _a = this.props,\n        showCloseButton = _a.showCloseButton,\n        className = _a.className,\n        closeButtonAriaLabel = _a.closeButtonAriaLabel,\n        onDismiss = _a.onDismiss,\n        subTextId = _a.subTextId,\n        subText = _a.subText,\n        _b = _a.titleProps,\n        titleProps = _b === void 0 ? {} : _b,\n        // eslint-disable-next-line deprecation/deprecation\n    titleId = _a.titleId,\n        title = _a.title,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        draggableHeaderClassName = _a.draggableHeaderClassName;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName: draggableHeaderClassName\n    });\n\n    var groupings = this._groupChildren();\n\n    var subTextContent;\n\n    if (subText) {\n      subTextContent = React.createElement(\"p\", {\n        className: classNames.subText,\n        id: subTextId\n      }, subText);\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames.content\n    }, React.createElement(\"div\", {\n      className: classNames.header\n    }, React.createElement(\"div\", __assign({\n      id: titleId,\n      role: \"heading\",\n      \"aria-level\": 1\n    }, titleProps, {\n      className: css(classNames.title, titleProps.className)\n    }), title), React.createElement(\"div\", {\n      className: classNames.topButton\n    }, this.props.topButtonsProps.map(function (props, index) {\n      return React.createElement(IconButton, __assign({\n        key: props.uniqueId || index\n      }, props));\n    }), (type === DialogType.close || showCloseButton && type !== DialogType.largeHeader) && React.createElement(IconButton, {\n      className: classNames.button,\n      iconProps: {\n        iconName: 'Cancel'\n      },\n      ariaLabel: closeButtonAriaLabel,\n      onClick: onDismiss\n    }))), React.createElement(\"div\", {\n      className: classNames.inner\n    }, React.createElement(\"div\", {\n      className: classNames.innerContent\n    }, subTextContent, groupings.contents), groupings.footers));\n  }; // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n\n\n  DialogContentBase.prototype._groupChildren = function () {\n    var groupings = {\n      footers: [],\n      contents: []\n    };\n    React.Children.map(this.props.children, function (child) {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n    return groupings;\n  };\n\n  DialogContentBase.defaultProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n  DialogContentBase = __decorate([withResponsiveMode], DialogContentBase);\n  return DialogContentBase;\n}(React.Component);\n\nexport { DialogContentBase };","map":{"version":3,"sources":["components/Dialog/DialogContent.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nimport type { IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\nimport type { IDialogFooterProps } from './DialogFooter.types';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\nconst DialogFooterType = ((<DialogFooter />) as React.ReactElement<IDialogFooterProps>).type;\n\nconst COMPONENT_NAME = 'DialogContent';\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogContentBase extends React.Component<IDialogContentProps, {}> {\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close',\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id',\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleProps = {},\n      // eslint-disable-next-line deprecation/deprecation\n      titleId,\n      title,\n      type,\n      styles,\n      theme,\n      draggableHeaderClassName,\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName,\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = (\n        <p className={classNames.subText} id={subTextId}>\n          {subText}\n        </p>\n      );\n    }\n\n    return (\n      <div className={classNames.content}>\n        <div className={classNames.header}>\n          <div\n            id={titleId}\n            role=\"heading\"\n            aria-level={1}\n            {...titleProps}\n            className={css(classNames.title, titleProps.className)}\n          >\n            {title}\n          </div>\n          <div className={classNames.topButton}>\n            {this.props.topButtonsProps!.map((props, index) => (\n              <IconButton key={props.uniqueId || index} {...props} />\n            ))}\n            {(type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (\n              <IconButton\n                className={classNames.button}\n                iconProps={{ iconName: 'Cancel' }}\n                ariaLabel={closeButtonAriaLabel}\n                onClick={onDismiss as any}\n              />\n            )}\n          </div>\n        </div>\n        <div className={classNames.inner}>\n          <div className={classNames.innerContent}>\n            {subTextContent}\n            {groupings.contents}\n          </div>\n          {groupings.footers}\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[] } {\n    const groupings: { footers: any[]; contents: any[] } = {\n      footers: [],\n      contents: [],\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && (child as any).type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}