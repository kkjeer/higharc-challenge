{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Format date to a day string representation\n * @param date - input date to format\n */\n\nexport var formatDay = function (date) {\n  return date.getDate().toString();\n};\n/**\n * Format date to a month-day-year string\n * @param date - input date to format\n * @param strings - localized strings\n */\n\nexport var formatMonthDayYear = function (date, strings) {\n  return strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n};\n/**\n * Format date to a month-year string\n * @param date - input date to format\n * @param strings - localized strings\n */\n\nexport var formatMonthYear = function (date, strings) {\n  return strings.months[date.getMonth()] + ' ' + date.getFullYear();\n};\n/**\n * Format date to a month string\n * @param date - input date to format\n * @param strings - localized strings\n */\n\nexport var formatMonth = function (date, strings) {\n  return strings.months[date.getMonth()];\n};\n/**\n * Format date to a year string representation\n * @param date - input date to format\n */\n\nexport var formatYear = function (date) {\n  return date.getFullYear().toString();\n};\nexport var DEFAULT_DATE_GRID_STRINGS = {\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\nexport var DEFAULT_DATE_FORMATTING = {\n  formatDay: formatDay,\n  formatMonth: formatMonth,\n  formatYear: formatYear,\n  formatMonthDayYear: formatMonthDayYear,\n  formatMonthYear: formatMonthYear\n};\nexport var DEFAULT_CALENDAR_STRINGS = __assign(__assign({}, DEFAULT_DATE_GRID_STRINGS), {\n  goToToday: 'Go to today',\n  weekNumberFormatString: 'Week number {0}',\n  prevMonthAriaLabel: 'Previous month',\n  nextMonthAriaLabel: 'Next month',\n  prevYearAriaLabel: 'Previous year',\n  nextYearAriaLabel: 'Next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close',\n  selectedDateFormatString: 'Selected date {0}',\n  todayDateFormatString: \"Today's date {0}\",\n  monthPickerHeaderAriaLabel: '{0}, change year',\n  yearPickerHeaderAriaLabel: '{0}, change month',\n  dayMarkedAriaLabel: 'marked'\n});","map":{"version":3,"sources":["dateFormatting/dateFormatting.defaults.ts"],"names":[],"mappings":";AAEA;;;AAGG;;AACH,OAAO,IAAM,SAAS,GAAG,UAAC,IAAD,EAAW;EAAK,OAAA,IAAI,CAAC,OAAL,GAAA,QAAA,EAAA;AAAyB,CAA3D;AAEP;;;;AAIG;;AACH,OAAO,IAAM,kBAAkB,GAAG,UAAC,IAAD,EAAa,OAAb,EAAsC;EACtE,OAAA,OAAO,CAAC,MAAR,CAAe,IAAI,CAAC,QAAL,EAAf,IAAkC,GAAlC,GAAwC,IAAI,CAAC,OAAL,EAAxC,GAAyD,IAAzD,GAAgE,IAAI,CAAC,WAAL,EAAhE;AAAkF,CAD7E;AAGP;;;;AAIG;;AACH,OAAO,IAAM,eAAe,GAAG,UAAC,IAAD,EAAa,OAAb,EAAsC;EACnE,OAAA,OAAO,CAAC,MAAR,CAAe,IAAI,CAAC,QAAL,EAAf,IAAkC,GAAlC,GAAwC,IAAI,CAAC,WAAL,EAAxC;AAA0D,CADrD;AAGP;;;;AAIG;;AACH,OAAO,IAAM,WAAW,GAAG,UAAC,IAAD,EAAa,OAAb,EAAsC;EAAK,OAAA,OAAO,CAAC,MAAR,CAAe,IAAI,CAAnB,QAAe,EAAf,CAAA;AAA+B,CAA9F;AAEP;;;AAGG;;AACH,OAAO,IAAM,UAAU,GAAG,UAAC,IAAD,EAAW;EAAK,OAAA,IAAI,CAAC,WAAL,GAAA,QAAA,EAAA;AAA6B,CAAhE;AAEP,OAAO,IAAM,yBAAyB,GAAqB;EACzD,MAAM,EAAE,CACN,SADM,EAEN,UAFM,EAGN,OAHM,EAIN,OAJM,EAKN,KALM,EAMN,MANM,EAON,MAPM,EAQN,QARM,EASN,WATM,EAUN,SAVM,EAWN,UAXM,EAYN,UAZM,CADiD;EAezD,WAAW,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAf4C;EAgBzD,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAhBmD;EAiBzD,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B;AAjB8C,CAApD;AAoBP,OAAO,IAAM,uBAAuB,GAAoB;EACtD,SAAS,EAAA,SAD6C;EAEtD,WAAW,EAAA,WAF2C;EAGtD,UAAU,EAAA,UAH4C;EAItD,kBAAkB,EAAA,kBAJoC;EAKtD,eAAe,EAAA;AALuC,CAAjD;AAQP,OAAO,IAAM,wBAAwB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAChC,yBADgC,CAAA,EACP;EAE5B,SAAS,EAAE,aAFiB;EAG5B,sBAAsB,EAAE,iBAHI;EAI5B,kBAAkB,EAAE,gBAJQ;EAK5B,kBAAkB,EAAE,YALQ;EAM5B,iBAAiB,EAAE,eANS;EAO5B,iBAAiB,EAAE,WAPS;EAQ5B,sBAAsB,EAAE,qBARI;EAS5B,sBAAsB,EAAE,iBATI;EAU5B,oBAAoB,EAAE,OAVM;EAW5B,wBAAwB,EAAE,mBAXE;EAY5B,qBAAqB,EAAE,kBAZK;EAa5B,0BAA0B,EAAE,kBAbA;EAc5B,yBAAyB,EAAE,mBAdC;EAe5B,kBAAkB,EAAE;AAfQ,CADO,CAA9B","sourcesContent":["import { IDateGridStrings, IDateFormatting, ICalendarStrings } from './dateFormatting.types';\n\n/**\n * Format date to a day string representation\n * @param date - input date to format\n */\nexport const formatDay = (date: Date) => date.getDate().toString();\n\n/**\n * Format date to a month-day-year string\n * @param date - input date to format\n * @param strings - localized strings\n */\nexport const formatMonthDayYear = (date: Date, strings: IDateGridStrings) =>\n  strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n\n/**\n * Format date to a month-year string\n * @param date - input date to format\n * @param strings - localized strings\n */\nexport const formatMonthYear = (date: Date, strings: IDateGridStrings) =>\n  strings.months[date.getMonth()] + ' ' + date.getFullYear();\n\n/**\n * Format date to a month string\n * @param date - input date to format\n * @param strings - localized strings\n */\nexport const formatMonth = (date: Date, strings: IDateGridStrings) => strings.months[date.getMonth()];\n\n/**\n * Format date to a year string representation\n * @param date - input date to format\n */\nexport const formatYear = (date: Date) => date.getFullYear().toString();\n\nexport const DEFAULT_DATE_GRID_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\nexport const DEFAULT_DATE_FORMATTING: IDateFormatting = {\n  formatDay,\n  formatMonth,\n  formatYear,\n  formatMonthDayYear,\n  formatMonthYear,\n};\n\nexport const DEFAULT_CALENDAR_STRINGS: ICalendarStrings = {\n  ...DEFAULT_DATE_GRID_STRINGS,\n\n  goToToday: 'Go to today',\n  weekNumberFormatString: 'Week number {0}',\n  prevMonthAriaLabel: 'Previous month',\n  nextMonthAriaLabel: 'Next month',\n  prevYearAriaLabel: 'Previous year',\n  nextYearAriaLabel: 'Next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close',\n  selectedDateFormatString: 'Selected date {0}',\n  todayDateFormatString: \"Today's date {0}\",\n  monthPickerHeaderAriaLabel: '{0}, change year',\n  yearPickerHeaderAriaLabel: '{0}, change month',\n  dayMarkedAriaLabel: 'marked',\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}