{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { allowScrollOnElement, allowOverscrollOnElement, classNamesFunction, divProperties, elementContains, getId, getNativeProps, getRTL, css, warnDeprecations, Async, EventGroup, initializeComponentRef } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Panel';\nvar PanelVisibilityState;\n\n(function (PanelVisibilityState) {\n  PanelVisibilityState[PanelVisibilityState[\"closed\"] = 0] = \"closed\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingOpen\"] = 1] = \"animatingOpen\";\n  PanelVisibilityState[PanelVisibilityState[\"open\"] = 2] = \"open\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingClosed\"] = 3] = \"animatingClosed\";\n})(PanelVisibilityState || (PanelVisibilityState = {}));\n\nvar PanelBase =\n/** @class */\nfunction (_super) {\n  __extends(PanelBase, _super);\n\n  function PanelBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._panel = React.createRef();\n    _this._animationCallback = null;\n    _this._hasCustomNavigation = !!(_this.props.onRenderNavigation || _this.props.onRenderNavigationContent);\n\n    _this.dismiss = function (ev) {\n      if (_this.props.onDismiss && _this.isActive) {\n        _this.props.onDismiss(ev);\n      }\n\n      if (!ev || ev && !ev.defaultPrevented) {\n        _this.close();\n      }\n    }; // Allow the user to scroll within the panel but not on the body\n\n\n    _this._allowScrollOnPanel = function (elt) {\n      if (elt) {\n        if (_this._allowTouchBodyScroll) {\n          allowOverscrollOnElement(elt, _this._events);\n        } else {\n          allowScrollOnElement(elt, _this._events);\n        }\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this._onRenderNavigation = function (props) {\n      if (!_this.props.onRenderNavigationContent && !_this.props.onRenderNavigation && !_this.props.hasCloseButton) {\n        return null;\n      }\n\n      var _a = _this.props.onRenderNavigationContent,\n          onRenderNavigationContent = _a === void 0 ? _this._onRenderNavigationContent : _a;\n      return React.createElement(\"div\", {\n        className: _this._classNames.navigation\n      }, onRenderNavigationContent(props, _this._onRenderNavigationContent));\n    };\n\n    _this._onRenderNavigationContent = function (props) {\n      var _a;\n\n      var closeButtonAriaLabel = props.closeButtonAriaLabel,\n          hasCloseButton = props.hasCloseButton,\n          _b = props.onRenderHeader,\n          onRenderHeader = _b === void 0 ? _this._onRenderHeader : _b;\n\n      if (hasCloseButton) {\n        var iconButtonStyles = (_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.closeButton();\n        return React.createElement(React.Fragment, null, !_this._hasCustomNavigation && onRenderHeader(_this.props, _this._onRenderHeader, _this._headerTextId), React.createElement(IconButton, {\n          styles: iconButtonStyles,\n          className: _this._classNames.closeButton,\n          onClick: _this._onPanelClick,\n          ariaLabel: closeButtonAriaLabel,\n          title: closeButtonAriaLabel,\n          \"data-is-visible\": true,\n          iconProps: {\n            iconName: 'Cancel'\n          }\n        }));\n      }\n\n      return null;\n    };\n\n    _this._onRenderHeader = function (props, defaultRender, headerTextId) {\n      var headerText = props.headerText,\n          _a = props.headerTextProps,\n          headerTextProps = _a === void 0 ? {} : _a;\n\n      if (headerText) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.header\n        }, React.createElement(\"div\", __assign({\n          id: headerTextId,\n          role: \"heading\",\n          \"aria-level\": 1\n        }, headerTextProps, {\n          className: css(_this._classNames.headerText, headerTextProps.className)\n        }), headerText));\n      }\n\n      return null;\n    };\n\n    _this._onRenderBody = function (props) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.content\n      }, props.children);\n    };\n\n    _this._onRenderFooter = function (props) {\n      var _a = _this.props.onRenderFooterContent,\n          onRenderFooterContent = _a === void 0 ? null : _a;\n\n      if (onRenderFooterContent) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.footer\n        }, React.createElement(\"div\", {\n          className: _this._classNames.footerInner\n        }, onRenderFooterContent()));\n      }\n\n      return null;\n    };\n\n    _this._animateTo = function (newVisibilityState) {\n      if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpen) {\n        _this.props.onOpen();\n      }\n\n      _this._animationCallback = _this._async.setTimeout(function () {\n        _this.setState({\n          visibility: newVisibilityState\n        });\n\n        _this._onTransitionComplete();\n      }, 200);\n    };\n\n    _this._clearExistingAnimationTimer = function () {\n      if (_this._animationCallback !== null) {\n        _this._async.clearTimeout(_this._animationCallback);\n      }\n    };\n\n    _this._onPanelClick = function (ev) {\n      _this.dismiss(ev);\n    };\n\n    _this._onTransitionComplete = function () {\n      _this._updateFooterPosition();\n\n      if (_this.state.visibility === PanelVisibilityState.open && _this.props.onOpened) {\n        _this.props.onOpened();\n      }\n\n      if (_this.state.visibility === PanelVisibilityState.closed && _this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n\n    var _a = _this.props.allowTouchBodyScroll,\n        allowTouchBodyScroll = _a === void 0 ? false : _a;\n    _this._allowTouchBodyScroll = allowTouchBodyScroll;\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps'\n    });\n    _this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel')\n    };\n    return _this;\n  }\n\n  PanelBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n\n    if (nextProps.isOpen && (prevState.visibility === PanelVisibilityState.closed || prevState.visibility === PanelVisibilityState.animatingClosed)) {\n      return {\n        visibility: PanelVisibilityState.animatingOpen\n      };\n    }\n\n    if (!nextProps.isOpen && (prevState.visibility === PanelVisibilityState.open || prevState.visibility === PanelVisibilityState.animatingOpen)) {\n      return {\n        visibility: PanelVisibilityState.animatingClosed\n      };\n    }\n\n    return null;\n  };\n\n  PanelBase.prototype.componentDidMount = function () {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({\n        visibility: PanelVisibilityState.animatingOpen\n      });\n    }\n  };\n\n  PanelBase.prototype.componentDidUpdate = function (previousProps, previousState) {\n    var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n\n    var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  };\n\n  PanelBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  PanelBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? '' : _b,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n\n    /* eslint-disable deprecation/deprecation */\n    firstFocusableSelector = _a.firstFocusableSelector,\n        focusTrapZoneProps = _a.focusTrapZoneProps,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        hasCloseButton = _a.hasCloseButton,\n        headerText = _a.headerText,\n        _c = _a.headerClassName,\n        headerClassName = _c === void 0 ? '' : _c,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isFooterAtBottom = _a.isFooterAtBottom,\n        isLightDismiss = _a.isLightDismiss,\n        isHiddenOnDismiss = _a.isHiddenOnDismiss,\n        layerProps = _a.layerProps,\n        overlayProps = _a.overlayProps,\n        popupProps = _a.popupProps,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        customWidth = _a.customWidth,\n        _d = _a.onLightDismissClick,\n        onLightDismissClick = _d === void 0 ? this._onPanelClick : _d,\n        _e = _a.onRenderNavigation,\n        onRenderNavigation = _e === void 0 ? this._onRenderNavigation : _e,\n        _f = _a.onRenderHeader,\n        onRenderHeader = _f === void 0 ? this._onRenderHeader : _f,\n        _g = _a.onRenderBody,\n        onRenderBody = _g === void 0 ? this._onRenderBody : _g,\n        _h = _a.onRenderFooter,\n        onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;\n    var _j = this.state,\n        isFooterSticky = _j.isFooterSticky,\n        visibility = _j.visibility,\n        id = _j.id;\n    var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    var isRTL = getRTL(theme);\n    var isOnRightSide = isRTL ? isLeft : !isLeft;\n    var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? {\n      width: customWidth\n    } : {};\n    var nativeProps = getNativeProps(this.props, divProperties);\n    var isOpen = this.isActive;\n    var isAnimating = visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton: hasCloseButton,\n      headerClassName: headerClassName,\n      isAnimating: isAnimating,\n      isFooterSticky: isFooterSticky,\n      isFooterAtBottom: isFooterAtBottom,\n      isOnRightSide: isOnRightSide,\n      isOpen: isOpen,\n      isHiddenOnDismiss: isHiddenOnDismiss,\n      type: type,\n      hasCustomNavigation: this._hasCustomNavigation\n    });\n\n    var _k = this,\n        _classNames = _k._classNames,\n        _allowTouchBodyScroll = _k._allowTouchBodyScroll;\n\n    var overlay;\n\n    if (isBlocking && isOpen) {\n      overlay = React.createElement(Overlay, __assign({\n        className: _classNames.overlay,\n        isDarkThemed: false,\n        onClick: isLightDismiss ? onLightDismissClick : undefined,\n        allowTouchBodyScroll: _allowTouchBodyScroll\n      }, overlayProps));\n    }\n\n    return React.createElement(Layer, __assign({}, layerProps), React.createElement(Popup, __assign({\n      role: \"dialog\",\n      \"aria-modal\": isBlocking ? 'true' : undefined,\n      ariaLabelledBy: this._headerTextId ? this._headerTextId : undefined,\n      onDismiss: this.dismiss,\n      className: _classNames.hiddenPanel,\n      enableAriaHiddenSiblings: isOpen ? true : undefined\n    }, popupProps), React.createElement(\"div\", __assign({\n      \"aria-hidden\": !isOpen && isAnimating\n    }, nativeProps, {\n      ref: this._panel,\n      className: _classNames.root\n    }), overlay, React.createElement(FocusTrapZone, __assign({\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: !isBlocking || isHiddenOnDismiss && !isOpen ? false : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      isClickableOutsideFocusTrap: true\n    }, focusTrapZoneProps, {\n      className: _classNames.main,\n      style: customWidthStyles,\n      elementToFocusOnDismiss: elementToFocusOnDismiss\n    }), React.createElement(\"div\", {\n      className: _classNames.contentInner\n    }, React.createElement(\"div\", {\n      ref: this._allowScrollOnPanel,\n      className: _classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, React.createElement(\"div\", {\n      className: _classNames.commands,\n      \"data-is-visible\": true\n    }, onRenderNavigation(this.props, this._onRenderNavigation)), (this._hasCustomNavigation || !hasCloseButton) && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId), onRenderBody(this.props, this._onRenderBody), onRenderFooter(this.props, this._onRenderFooter)))))));\n  };\n\n  PanelBase.prototype.open = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({\n      visibility: PanelVisibilityState.animatingOpen\n    });\n  };\n\n  PanelBase.prototype.close = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({\n      visibility: PanelVisibilityState.animatingClosed\n    });\n  };\n\n  Object.defineProperty(PanelBase.prototype, \"isActive\", {\n    /** isActive is true when panel is open or opening. */\n    get: function () {\n      return this.state.visibility === PanelVisibilityState.open || this.state.visibility === PanelVisibilityState.animatingOpen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PanelBase.prototype._shouldListenForOuterClick = function (props) {\n    return !!props.isBlocking && !!props.isOpen;\n  };\n\n  PanelBase.prototype._updateFooterPosition = function () {\n    var scrollableContent = this._scrollableContent;\n\n    if (scrollableContent) {\n      var height = scrollableContent.clientHeight;\n      var innerHeight_1 = scrollableContent.scrollHeight;\n      this.setState({\n        isFooterSticky: height < innerHeight_1 ? true : false\n      });\n    }\n  };\n\n  PanelBase.prototype._dismissOnOuterClick = function (ev) {\n    var panel = this._panel.current;\n\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick(ev);\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  };\n\n  PanelBase.defaultProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar\n  };\n  return PanelBase;\n}(React.Component);\n\nexport { PanelBase };","map":{"version":3,"sources":["components/Panel/Panel.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport {\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  classNamesFunction,\n  divProperties,\n  elementContains,\n  getId,\n  getNativeProps,\n  getRTL,\n  css,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IPanel, IPanelProps, IPanelStyleProps, IPanelStyles } from './Panel.types';\n\nconst getClassNames = classNamesFunction<IPanelStyleProps, IPanelStyles>();\nconst COMPONENT_NAME = 'Panel';\n\nenum PanelVisibilityState {\n  closed,\n  animatingOpen,\n  open,\n  animatingClosed,\n}\n\ninterface IPanelState {\n  isFooterSticky?: boolean;\n  id?: string;\n  visibility: PanelVisibilityState;\n}\n\nexport class PanelBase extends React.Component<IPanelProps, IPanelState> implements IPanel {\n  public static defaultProps: IPanelProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _panel = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IPanelStyles>;\n  private _scrollableContent: HTMLDivElement | null;\n  private _animationCallback: number | null = null;\n  private _hasCustomNavigation: boolean = !!(this.props.onRenderNavigation || this.props.onRenderNavigationContent);\n  private _headerTextId: string | undefined;\n  private _allowTouchBodyScroll: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IPanelProps>,\n    prevState: Readonly<IPanelState>,\n  ): Partial<IPanelState> | null {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n    if (\n      nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.closed ||\n        prevState.visibility === PanelVisibilityState.animatingClosed)\n    ) {\n      return { visibility: PanelVisibilityState.animatingOpen };\n    }\n    if (\n      !nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.open ||\n        prevState.visibility === PanelVisibilityState.animatingOpen)\n    ) {\n      return { visibility: PanelVisibilityState.animatingClosed };\n    }\n    return null;\n  }\n\n  constructor(props: IPanelProps) {\n    super(props);\n\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps',\n    });\n\n    this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel'),\n    };\n  }\n\n  public componentDidMount(): void {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({ visibility: PanelVisibilityState.animatingOpen });\n    }\n  }\n\n  public componentDidUpdate(previousProps: IPanelProps, previousState: IPanelState): void {\n    const shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n    const previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      className = '',\n      elementToFocusOnDismiss,\n      /* eslint-disable deprecation/deprecation */\n      firstFocusableSelector,\n      focusTrapZoneProps,\n      forceFocusInsideTrap,\n      hasCloseButton,\n      headerText,\n      headerClassName = '',\n      ignoreExternalFocusing,\n      isBlocking,\n      isFooterAtBottom,\n      isLightDismiss,\n      isHiddenOnDismiss,\n      layerProps,\n      overlayProps,\n      popupProps,\n      type,\n      styles,\n      theme,\n      customWidth,\n      onLightDismissClick = this._onPanelClick,\n      onRenderNavigation = this._onRenderNavigation,\n      onRenderHeader = this._onRenderHeader,\n      onRenderBody = this._onRenderBody,\n      onRenderFooter = this._onRenderFooter,\n    } = this.props;\n    const { isFooterSticky, visibility, id } = this.state;\n    const isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    const isRTL = getRTL(theme);\n    const isOnRightSide = isRTL ? isLeft : !isLeft;\n    const customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? { width: customWidth } : {};\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n    const isOpen = this.isActive;\n    const isAnimating =\n      visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton,\n      headerClassName,\n      isAnimating,\n      isFooterSticky,\n      isFooterAtBottom,\n      isOnRightSide,\n      isOpen,\n      isHiddenOnDismiss,\n      type,\n      hasCustomNavigation: this._hasCustomNavigation,\n    });\n\n    const { _classNames, _allowTouchBodyScroll } = this;\n\n    let overlay;\n    if (isBlocking && isOpen) {\n      overlay = (\n        <Overlay\n          className={_classNames.overlay}\n          isDarkThemed={false}\n          onClick={isLightDismiss ? onLightDismissClick : undefined}\n          allowTouchBodyScroll={_allowTouchBodyScroll}\n          {...overlayProps}\n        />\n      );\n    }\n\n    return (\n      <Layer {...layerProps}>\n        <Popup\n          role=\"dialog\"\n          aria-modal={isBlocking ? 'true' : undefined}\n          ariaLabelledBy={this._headerTextId ? this._headerTextId : undefined}\n          onDismiss={this.dismiss}\n          className={_classNames.hiddenPanel}\n          enableAriaHiddenSiblings={isOpen ? true : undefined}\n          {...popupProps}\n        >\n          <div aria-hidden={!isOpen && isAnimating} {...nativeProps} ref={this._panel} className={_classNames.root}>\n            {overlay}\n            <FocusTrapZone\n              ignoreExternalFocusing={ignoreExternalFocusing}\n              forceFocusInsideTrap={!isBlocking || (isHiddenOnDismiss && !isOpen) ? false : forceFocusInsideTrap}\n              firstFocusableSelector={firstFocusableSelector}\n              isClickableOutsideFocusTrap={true}\n              {...focusTrapZoneProps}\n              className={_classNames.main}\n              style={customWidthStyles}\n              elementToFocusOnDismiss={elementToFocusOnDismiss}\n            >\n              <div className={_classNames.contentInner}>\n                <div ref={this._allowScrollOnPanel} className={_classNames.scrollableContent} data-is-scrollable={true}>\n                  <div className={_classNames.commands} data-is-visible={true}>\n                    {onRenderNavigation(this.props, this._onRenderNavigation)}\n                  </div>\n                  {(this._hasCustomNavigation || !hasCloseButton) &&\n                    onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n                  {onRenderBody(this.props, this._onRenderBody)}\n                  {onRenderFooter(this.props, this._onRenderFooter)}\n                </div>\n              </div>\n            </FocusTrapZone>\n          </div>\n        </Popup>\n      </Layer>\n    );\n  }\n\n  public open() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingOpen });\n  }\n\n  public close() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingClosed });\n  }\n\n  public dismiss = (ev?: React.SyntheticEvent<HTMLElement> | KeyboardEvent): void => {\n    if (this.props.onDismiss && this.isActive) {\n      this.props.onDismiss(ev);\n    }\n\n    if (!ev || (ev && !ev.defaultPrevented)) {\n      this.close();\n    }\n  };\n\n  /** isActive is true when panel is open or opening. */\n  public get isActive(): boolean {\n    return (\n      this.state.visibility === PanelVisibilityState.open ||\n      this.state.visibility === PanelVisibilityState.animatingOpen\n    );\n  }\n\n  // Allow the user to scroll within the panel but not on the body\n  private _allowScrollOnPanel = (elt: HTMLDivElement | null): void => {\n    if (elt) {\n      if (this._allowTouchBodyScroll) {\n        allowOverscrollOnElement(elt, this._events);\n      } else {\n        allowScrollOnElement(elt, this._events);\n      }\n    } else {\n      this._events.off(this._scrollableContent);\n    }\n    this._scrollableContent = elt;\n  };\n\n  private _shouldListenForOuterClick(props: IPanelProps): boolean {\n    return !!props.isBlocking && !!props.isOpen;\n  }\n\n  private _onRenderNavigation = (props: IPanelProps): JSX.Element | null => {\n    if (!this.props.onRenderNavigationContent && !this.props.onRenderNavigation && !this.props.hasCloseButton) {\n      return null;\n    }\n    const { onRenderNavigationContent = this._onRenderNavigationContent } = this.props;\n    return (\n      <div className={this._classNames.navigation}>\n        {onRenderNavigationContent(props, this._onRenderNavigationContent)}\n      </div>\n    );\n  };\n\n  private _onRenderNavigationContent = (props: IPanelProps): JSX.Element | null => {\n    const { closeButtonAriaLabel, hasCloseButton, onRenderHeader = this._onRenderHeader } = props;\n    if (hasCloseButton) {\n      const iconButtonStyles = this._classNames.subComponentStyles?.closeButton();\n\n      return (\n        <>\n          {!this._hasCustomNavigation && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n          <IconButton\n            styles={iconButtonStyles}\n            className={this._classNames.closeButton}\n            onClick={this._onPanelClick}\n            ariaLabel={closeButtonAriaLabel}\n            title={closeButtonAriaLabel}\n            data-is-visible={true}\n            iconProps={{ iconName: 'Cancel' }}\n          />\n        </>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderHeader = (\n    props: IPanelProps,\n    defaultRender?: (props?: IPanelProps) => JSX.Element | null,\n    headerTextId?: string | undefined,\n  ): JSX.Element | null => {\n    const { headerText, headerTextProps = {} } = props;\n\n    if (headerText) {\n      return (\n        <div className={this._classNames.header}>\n          <div\n            id={headerTextId}\n            role=\"heading\"\n            aria-level={1}\n            {...headerTextProps}\n            className={css(this._classNames.headerText, headerTextProps.className)}\n          >\n            {headerText}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderBody = (props: IPanelProps): JSX.Element => {\n    return <div className={this._classNames.content}>{props.children}</div>;\n  };\n\n  private _onRenderFooter = (props: IPanelProps): JSX.Element | null => {\n    const { onRenderFooterContent = null } = this.props;\n    if (onRenderFooterContent) {\n      return (\n        <div className={this._classNames.footer}>\n          <div className={this._classNames.footerInner}>{onRenderFooterContent()}</div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _updateFooterPosition(): void {\n    const scrollableContent = this._scrollableContent;\n    if (scrollableContent) {\n      const height = scrollableContent.clientHeight;\n      const innerHeight = scrollableContent.scrollHeight;\n\n      this.setState({\n        isFooterSticky: height < innerHeight ? true : false,\n      });\n    }\n  }\n\n  private _dismissOnOuterClick(ev: React.MouseEvent<HTMLDivElement>): void {\n    const panel = this._panel.current;\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target as HTMLElement)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick(ev);\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  }\n\n  private _animateTo = (newVisibilityState: PanelVisibilityState): void => {\n    if (newVisibilityState === PanelVisibilityState.open && this.props.onOpen) {\n      this.props.onOpen();\n    }\n\n    this._animationCallback = this._async.setTimeout(() => {\n      this.setState({ visibility: newVisibilityState });\n      this._onTransitionComplete();\n    }, 200);\n  };\n\n  private _clearExistingAnimationTimer = (): void => {\n    if (this._animationCallback !== null) {\n      this._async.clearTimeout(this._animationCallback);\n    }\n  };\n\n  private _onPanelClick = (ev?: any): void => {\n    this.dismiss(ev);\n  };\n\n  private _onTransitionComplete = (): void => {\n    this._updateFooterPosition();\n\n    if (this.state.visibility === PanelVisibilityState.open && this.props.onOpened) {\n      this.props.onOpened();\n    }\n\n    if (this.state.visibility === PanelVisibilityState.closed && this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}