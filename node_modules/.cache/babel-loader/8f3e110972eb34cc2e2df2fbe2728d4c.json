{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport { clearNext, clearPrev, clearRange, DEFAULT_MASK_FORMAT_CHARS, getLeftFormatIndex, getMaskDisplay, getRightFormatIndex, insertString, parseMask } from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nvar COMPONENT_NAME = 'MaskedTextField';\n\nvar useComponentRef = function (componentRef, internalState, textField) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get value() {\n        var value = '';\n\n        for (var i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n\n          value += internalState.maskCharData[i].value;\n        }\n\n        return value;\n      },\n\n      get selectionStart() {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd() {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus: function () {\n        textField.current && textField.current.focus();\n      },\n      blur: function () {\n        textField.current && textField.current.blur();\n      },\n      select: function () {\n        textField.current && textField.current.select();\n      },\n      setSelectionStart: function (value) {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n      setSelectionEnd: function (value) {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n      setSelectionRange: function (start, end) {\n        textField.current && textField.current.setSelectionRange(start, end);\n      }\n    };\n  }, [internalState, textField]);\n};\n\nexport var DEFAULT_MASK_CHAR = '_';\nexport var MaskedTextField = React.forwardRef(function (props, ref) {\n  var textField = React.useRef(null);\n  var componentRef = props.componentRef,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onMouseDown = props.onMouseDown,\n      onMouseUp = props.onMouseUp,\n      onChange = props.onChange,\n      onPaste = props.onPaste,\n      onKeyDown = props.onKeyDown,\n      mask = props.mask,\n      _a = props.maskChar,\n      maskChar = _a === void 0 ? DEFAULT_MASK_CHAR : _a,\n      _b = props.maskFormat,\n      maskFormat = _b === void 0 ? DEFAULT_MASK_FORMAT_CHARS : _b,\n      value = props.value;\n  var internalState = useConst(function () {\n    return {\n      maskCharData: parseMask(mask, maskFormat),\n      isFocused: false,\n      moveCursorOnMouseUp: false,\n      changeSelectionData: null\n    };\n  });\n  /** The index into the rendered value of the first unfilled format character */\n\n  var _c = React.useState(),\n      maskCursorPosition = _c[0],\n      setMaskCursorPosition = _c[1];\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n\n\n  var _d = React.useState(function () {\n    return getMaskDisplay(mask, internalState.maskCharData, maskChar);\n  }),\n      displayValue = _d[0],\n      setDisplayValue = _d[1];\n\n  var setValue = React.useCallback(function (newValue) {\n    var valueIndex = 0;\n    var charDataIndex = 0;\n\n    while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      var testVal = newValue[valueIndex];\n\n      if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n        internalState.maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n\n      valueIndex++;\n    }\n  }, [internalState]);\n  var handleFocus = React.useCallback(function (ev) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(ev);\n    internalState.isFocused = true; // Move the cursor position to the leftmost unfilled position\n\n    for (var i = 0; i < internalState.maskCharData.length; i++) {\n      if (!internalState.maskCharData[i].value) {\n        setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n        break;\n      }\n    }\n  }, [internalState, onFocus]);\n  var handleBlur = React.useCallback(function (ev) {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(ev);\n    internalState.isFocused = false;\n    internalState.moveCursorOnMouseUp = true;\n  }, [internalState, onBlur]);\n  var handleMouseDown = React.useCallback(function (ev) {\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(ev);\n\n    if (!internalState.isFocused) {\n      internalState.moveCursorOnMouseUp = true;\n    }\n  }, [internalState, onMouseDown]);\n  var handleMouseUp = React.useCallback(function (ev) {\n    onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(ev); // Move the cursor on mouseUp after focusing the textField\n\n    if (internalState.moveCursorOnMouseUp) {\n      internalState.moveCursorOnMouseUp = false; // Move the cursor position to the rightmost unfilled position\n\n      for (var i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    }\n  }, [internalState, onMouseUp]);\n  var handleInputChange = React.useCallback(function (ev, inputValue) {\n    if (internalState.changeSelectionData === null && textField.current) {\n      internalState.changeSelectionData = {\n        changeType: 'default',\n        selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n        selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1\n      };\n    }\n\n    if (!internalState.changeSelectionData) {\n      return;\n    } // The initial value of cursorPos does not matter\n\n\n    var cursorPos = 0;\n    var _a = internalState.changeSelectionData,\n        changeType = _a.changeType,\n        selectionStart = _a.selectionStart,\n        selectionEnd = _a.selectionEnd;\n\n    if (changeType === 'textPasted') {\n      var charsSelected = selectionEnd - selectionStart;\n      var charCount = inputValue.length + charsSelected - displayValue.length;\n      var startPos = selectionStart;\n      var pastedString = inputValue.substr(startPos, charCount); // Clear any selected characters\n\n      if (charsSelected) {\n        internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n      }\n\n      cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n    } else if (changeType === 'delete' || changeType === 'backspace') {\n      // isDel is true If the characters are removed LTR, otherwise RTL\n      var isDel = changeType === 'delete';\n      var charCount = selectionEnd - selectionStart;\n\n      if (charCount) {\n        // charCount is > 0 if range was deleted\n        internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n        cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n      } else {\n        // If charCount === 0, there was no selection and a single character was deleted\n        if (isDel) {\n          internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n          cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n        }\n      }\n    } else if (inputValue.length > displayValue.length) {\n      // This case is if the user added characters\n      var charCount = inputValue.length - displayValue.length;\n      var startPos = selectionEnd - charCount;\n      var enteredString = inputValue.substr(startPos, charCount);\n      cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n    } else if (inputValue.length <= displayValue.length) {\n      /**\n       * This case is reached only if the user has selected a block of 1 or more\n       * characters and input a character replacing the characters they've selected.\n       */\n      var charCount = 1;\n      var selectCount = displayValue.length + charCount - inputValue.length;\n      var startPos = selectionEnd - charCount;\n      var enteredString = inputValue.substr(startPos, charCount); // Clear the selected range\n\n      internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount); // Insert the printed character\n\n      cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n    }\n\n    internalState.changeSelectionData = null;\n    var newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n    setDisplayValue(newValue);\n    setMaskCursorPosition(cursorPos); // Perform onChange after input has been processed. Return value is expected to be the displayed text\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);\n  }, [displayValue.length, internalState, mask, maskChar, onChange]);\n  var handleKeyDown = React.useCallback(function (ev) {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);\n    internalState.changeSelectionData = null;\n\n    if (textField.current && textField.current.value) {\n      // eslint-disable-next-line deprecation/deprecation\n      var keyCode = ev.keyCode,\n          ctrlKey = ev.ctrlKey,\n          metaKey = ev.metaKey; // Ignore ctrl and meta keydown\n\n      if (ctrlKey || metaKey) {\n        return;\n      } // On backspace or delete, store the selection and the keyCode\n\n\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n        var selectionStart = ev.target.selectionStart;\n        var selectionEnd = ev.target.selectionEnd; // Check if backspace or delete press is valid.\n\n        if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) && !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)) {\n          return;\n        }\n\n        internalState.changeSelectionData = {\n          changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n          selectionStart: selectionStart !== null ? selectionStart : -1,\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1\n        };\n      }\n    }\n  }, [internalState, onKeyDown]);\n  var handlePaste = React.useCallback(function (ev) {\n    onPaste === null || onPaste === void 0 ? void 0 : onPaste(ev);\n    var selectionStart = ev.target.selectionStart;\n    var selectionEnd = ev.target.selectionEnd; // Store the paste selection range\n\n    internalState.changeSelectionData = {\n      changeType: 'textPasted',\n      selectionStart: selectionStart !== null ? selectionStart : -1,\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1\n    };\n  }, [internalState, onPaste]); // Updates the display value if mask or value props change.\n\n  React.useEffect(function () {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar)); // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]); // Run before browser paint to avoid flickering from selection reset.\n\n  useIsomorphicLayoutEffect(function () {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]); // Run after browser paint.\n\n  React.useEffect(function () {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n  useComponentRef(componentRef, internalState, textField);\n  return React.createElement(TextField, __assign({}, props, {\n    elementRef: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onPaste: handlePaste,\n    value: displayValue || '',\n    componentRef: textField\n  }));\n});\nMaskedTextField.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/TextField/MaskedTextField/MaskedTextField.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,QAA0B,cAA1B;AACA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SACE,SADF,EAEE,SAFF,EAGE,UAHF,EAIE,yBAJF,EAKE,kBALF,EAME,cANF,EAOE,mBAPF,EAQE,YARF,EASE,SATF,QAUO,aAVP;AAWA,SAAS,QAAT,EAAmB,yBAAnB,QAAoD,uBAApD;AAgBA,IAAM,cAAc,GAAG,iBAAvB;;AAEA,IAAM,eAAe,GAAG,UACtB,YADsB,EAEtB,aAFsB,EAGtB,SAHsB,EAGsB;EAE5C,KAAK,CAAC,mBAAN,CACE,YADF,EAEE,YAAA;IAAwB,OAAC;MACvB,IAAI,KAAJ,GAAS;QACP,IAAI,KAAK,GAAG,EAAZ;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,YAAd,CAA2B,MAA/C,EAAuD,CAAC,EAAxD,EAA4D;UAC1D,IAAI,CAAC,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,KAAnC,EAA0C;YACxC,OAAO,SAAP;UACD;;UACD,KAAK,IAAI,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,KAAvC;QACD;;QACD,OAAO,KAAP;MACD,CAXsB;;MAavB,IAAI,cAAJ,GAAkB;QAChB,OAAO,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,cAAlB,KAAqC,IAA1D,GAAiE,SAAS,CAAC,OAAV,CAAkB,cAAnF,GAAoG,CAAC,CAA5G;MACD,CAfsB;;MAiBvB,IAAI,YAAJ,GAAgB;QACd,OAAO,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,YAAvC,GAAsD,SAAS,CAAC,OAAV,CAAkB,YAAxE,GAAuF,CAAC,CAA/F;MACD,CAnBsB;;MAqBvB,KAAK,EAAL,YAAA;QACE,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,KAAlB,EAArB;MACD,CAvBsB;MAyBvB,IAAI,EAAJ,YAAA;QACE,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,IAAlB,EAArB;MACD,CA3BsB;MA6BvB,MAAM,EAAN,YAAA;QACE,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,MAAlB,EAArB;MACD,CA/BsB;MAiCvB,iBAAiB,EAAjB,UAAkB,KAAlB,EAA+B;QAC7B,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,iBAAlB,CAAoC,KAApC,CAArB;MACD,CAnCsB;MAqCvB,eAAe,EAAf,UAAgB,KAAhB,EAA6B;QAC3B,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,eAAlB,CAAkC,KAAlC,CAArB;MACD,CAvCsB;MAyCvB,iBAAiB,EAAjB,UAAkB,KAAlB,EAAiC,GAAjC,EAA4C;QAC1C,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,iBAAlB,CAAoC,KAApC,EAA2C,GAA3C,CAArB;MACD;IA3CsB,CAAD;EA4CtB,CA9CJ,EA+CE,CAAC,aAAD,EAAgB,SAAhB,CA/CF;AAiDD,CAtDD;;AAwDA,OAAO,IAAM,iBAAiB,GAAG,GAA1B;AAEP,OAAO,IAAM,eAAe,GAAmD,KAAK,CAAC,UAAN,CAG7E,UAAC,KAAD,EAAQ,GAAR,EAAW;EACX,IAAM,SAAS,GAAG,KAAK,CAAC,MAAN,CAA+B,IAA/B,CAAlB;EAGE,IAAA,YAAY,GAYV,KAAK,CAZK,YAAZ;EAAA,IACA,OAAO,GAWL,KAAK,CAXA,OADP;EAAA,IAEA,MAAM,GAUJ,KAAK,CAVD,MAFN;EAAA,IAGA,WAAW,GAST,KAAK,CATI,WAHX;EAAA,IAIA,SAAS,GAQP,KAAK,CARE,SAJT;EAAA,IAKA,QAAQ,GAON,KAAK,CAPC,QALR;EAAA,IAMA,OAAO,GAML,KAAK,CANA,OANP;EAAA,IAOA,SAAS,GAKP,KAAK,CALE,SAPT;EAAA,IAQA,IAAI,GAIF,KAAK,CAJH,IARJ;EAAA,IASA,EAAA,GAGE,KAAK,CAHqB,QAT5B;EAAA,IASA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,iBAAH,GAAoB,EAT5B;EAAA,IAUA,EAAA,GAEE,KAAK,CAF+B,UAVtC;EAAA,IAUA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,yBAAH,GAA4B,EAVtC;EAAA,IAWA,KAAK,GACH,KAAK,CADF,KAXL;EAcF,IAAM,aAAa,GAAG,QAAQ,CAAgC,YAAA;IAAM,OAAC;MACnE,YAAY,EAAE,SAAS,CAAC,IAAD,EAAO,UAAP,CAD4C;MAEnE,SAAS,EAAE,KAFwD;MAGnE,mBAAmB,EAAE,KAH8C;MAInE,mBAAmB,EAAE;IAJ8C,CAAD;EAKlE,CAL4B,CAA9B;EAOA;;EACM,IAAA,EAAA,GAA8C,KAAK,CAAC,QAAN,EAA9C;EAAA,IAAC,kBAAkB,GAAA,EAAA,CAAA,CAAA,CAAnB;EAAA,IAAqB,qBAAqB,GAAA,EAAA,CAAA,CAAA,CAA1C;EAEN;;;;;AAKG;;;EACG,IAAA,EAAA,GAAkC,KAAK,CAAC,QAAN,CAAuB,YAAA;IAC7D,OAAA,cAAc,CAAC,IAAD,EAAO,aAAa,CAAC,YAArB,EAAmC,QAAnC,CAAd;EAA0D,CADpB,CAAlC;EAAA,IAAC,YAAY,GAAA,EAAA,CAAA,CAAA,CAAb;EAAA,IAAe,eAAe,GAAA,EAAA,CAAA,CAAA,CAA9B;;EAIN,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAN,CACf,UAAC,QAAD,EAAiB;IACf,IAAI,UAAU,GAAG,CAAjB;IACA,IAAI,aAAa,GAAG,CAApB;;IAEA,OAAO,UAAU,GAAG,QAAQ,CAAC,MAAtB,IAAgC,aAAa,GAAG,aAAa,CAAC,YAAd,CAA2B,MAAlF,EAA0F;MACxF;MACA,IAAM,OAAO,GAAG,QAAQ,CAAC,UAAD,CAAxB;;MACA,IAAI,aAAa,CAAC,YAAd,CAA2B,aAA3B,EAA0C,MAA1C,CAAiD,IAAjD,CAAsD,OAAtD,CAAJ,EAAoE;QAClE,aAAa,CAAC,YAAd,CAA2B,aAA3B,EAA0C,KAA1C,GAAkD,OAAlD;QACA,aAAa;MACd;;MACD,UAAU;IACX;EACF,CAdc,EAef,CAAC,aAAD,CAfe,CAAjB;EAkBA,IAAM,WAAW,GAAG,KAAK,CAAC,WAAN,CAClB,UAAC,EAAD,EAA6D;IAC3D,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAG,EAAH,CAAP;IACA,aAAa,CAAC,SAAd,GAA0B,IAA1B,CAF2D,CAI3D;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,YAAd,CAA2B,MAA/C,EAAuD,CAAC,EAAxD,EAA4D;MAC1D,IAAI,CAAC,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,KAAnC,EAA0C;QACxC,qBAAqB,CAAC,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,YAA/B,CAArB;QACA;MACD;IACF;EACF,CAZiB,EAalB,CAAC,aAAD,EAAgB,OAAhB,CAbkB,CAApB;EAgBA,IAAM,UAAU,GAAG,KAAK,CAAC,WAAN,CACjB,UAAC,EAAD,EAA6D;IAC3D,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAG,EAAH,CAAN;IACA,aAAa,CAAC,SAAd,GAA0B,KAA1B;IACA,aAAa,CAAC,mBAAd,GAAoC,IAApC;EACD,CALgB,EAMjB,CAAC,aAAD,EAAgB,MAAhB,CANiB,CAAnB;EASA,IAAM,eAAe,GAAG,KAAK,CAAC,WAAN,CACtB,UAAC,EAAD,EAAuC;IACrC,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAG,EAAH,CAAX;;IACA,IAAI,CAAC,aAAa,CAAC,SAAnB,EAA8B;MAC5B,aAAa,CAAC,mBAAd,GAAoC,IAApC;IACD;EACF,CANqB,EAOtB,CAAC,aAAD,EAAgB,WAAhB,CAPsB,CAAxB;EAUA,IAAM,aAAa,GAAG,KAAK,CAAC,WAAN,CACpB,UAAC,EAAD,EAAuC;IACrC,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAG,EAAH,CAAT,CADqC,CAErC;;IACA,IAAI,aAAa,CAAC,mBAAlB,EAAuC;MACrC,aAAa,CAAC,mBAAd,GAAoC,KAApC,CADqC,CAErC;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,YAAd,CAA2B,MAA/C,EAAuD,CAAC,EAAxD,EAA4D;QAC1D,IAAI,CAAC,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,KAAnC,EAA0C;UACxC,qBAAqB,CAAC,aAAa,CAAC,YAAd,CAA2B,CAA3B,EAA8B,YAA/B,CAArB;UACA;QACD;MACF;IACF;EACF,CAdmB,EAepB,CAAC,aAAD,EAAgB,SAAhB,CAfoB,CAAtB;EAkBA,IAAM,iBAAiB,GAAG,KAAK,CAAC,WAAN,CACxB,UAAC,EAAD,EAA8D,UAA9D,EAAgF;IAC9E,IAAI,aAAa,CAAC,mBAAd,KAAsC,IAAtC,IAA8C,SAAS,CAAC,OAA5D,EAAqE;MACnE,aAAa,CAAC,mBAAd,GAAoC;QAClC,UAAU,EAAE,SADsB;QAElC,cAAc,EAAE,SAAS,CAAC,OAAV,CAAkB,cAAlB,KAAqC,IAArC,GAA4C,SAAS,CAAC,OAAV,CAAkB,cAA9D,GAA+E,CAAC,CAF9D;QAGlC,YAAY,EAAE,SAAS,CAAC,OAAV,CAAkB,YAAlB,KAAmC,IAAnC,GAA0C,SAAS,CAAC,OAAV,CAAkB,YAA5D,GAA2E,CAAC;MAHxD,CAApC;IAKD;;IACD,IAAI,CAAC,aAAa,CAAC,mBAAnB,EAAwC;MACtC;IACD,CAV6E,CAY9E;;;IACA,IAAI,SAAS,GAAG,CAAhB;IACM,IAAA,EAAA,GAA+C,aAAa,CAAC,mBAA7D;IAAA,IAAE,UAAU,GAAA,EAAA,CAAA,UAAZ;IAAA,IAAc,cAAc,GAAA,EAAA,CAAA,cAA5B;IAAA,IAA8B,YAAY,GAAA,EAAA,CAAA,YAA1C;;IAEN,IAAI,UAAU,KAAK,YAAnB,EAAiC;MAC/B,IAAM,aAAa,GAAG,YAAY,GAAG,cAArC;MACA,IAAM,SAAS,GAAG,UAAU,CAAC,MAAX,GAAoB,aAApB,GAAoC,YAAY,CAAC,MAAnE;MACA,IAAM,QAAQ,GAAG,cAAjB;MACA,IAAM,YAAY,GAAG,UAAU,CAAC,MAAX,CAAkB,QAAlB,EAA4B,SAA5B,CAArB,CAJ+B,CAM/B;;MACA,IAAI,aAAJ,EAAmB;QACjB,aAAa,CAAC,YAAd,GAA6B,UAAU,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,EAA6C,aAA7C,CAAvC;MACD;;MACD,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,YAAf,EAA6B,QAA7B,EAAuC,YAAvC,CAAxB;IACD,CAXD,MAWO,IAAI,UAAU,KAAK,QAAf,IAA2B,UAAU,KAAK,WAA9C,EAA2D;MAChE;MACA,IAAM,KAAK,GAAG,UAAU,KAAK,QAA7B;MACA,IAAM,SAAS,GAAG,YAAY,GAAG,cAAjC;;MAEA,IAAI,SAAJ,EAAe;QACb;QACA,aAAa,CAAC,YAAd,GAA6B,UAAU,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,EAA6C,SAA7C,CAAvC;QACA,SAAS,GAAG,mBAAmB,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,CAA/B;MACD,CAJD,MAIO;QACL;QACA,IAAI,KAAJ,EAAW;UACT,aAAa,CAAC,YAAd,GAA6B,SAAS,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,CAAtC;UACA,SAAS,GAAG,mBAAmB,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,CAA/B;QACD,CAHD,MAGO;UACL,aAAa,CAAC,YAAd,GAA6B,SAAS,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,CAAtC;UACA,SAAS,GAAG,kBAAkB,CAAC,aAAa,CAAC,YAAf,EAA6B,cAA7B,CAA9B;QACD;MACF;IACF,CAnBM,MAmBA,IAAI,UAAU,CAAC,MAAX,GAAoB,YAAY,CAAC,MAArC,EAA6C;MAClD;MACA,IAAM,SAAS,GAAG,UAAU,CAAC,MAAX,GAAoB,YAAY,CAAC,MAAnD;MACA,IAAM,QAAQ,GAAG,YAAY,GAAG,SAAhC;MACA,IAAM,aAAa,GAAG,UAAU,CAAC,MAAX,CAAkB,QAAlB,EAA4B,SAA5B,CAAtB;MAEA,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,YAAf,EAA6B,QAA7B,EAAuC,aAAvC,CAAxB;IACD,CAPM,MAOA,IAAI,UAAU,CAAC,MAAX,IAAqB,YAAY,CAAC,MAAtC,EAA8C;MACnD;;;AAGG;MACH,IAAM,SAAS,GAAG,CAAlB;MACA,IAAM,WAAW,GAAG,YAAY,CAAC,MAAb,GAAsB,SAAtB,GAAkC,UAAU,CAAC,MAAjE;MACA,IAAM,QAAQ,GAAG,YAAY,GAAG,SAAhC;MACA,IAAM,aAAa,GAAG,UAAU,CAAC,MAAX,CAAkB,QAAlB,EAA4B,SAA5B,CAAtB,CARmD,CAUnD;;MACA,aAAa,CAAC,YAAd,GAA6B,UAAU,CAAC,aAAa,CAAC,YAAf,EAA6B,QAA7B,EAAuC,WAAvC,CAAvC,CAXmD,CAYnD;;MACA,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,YAAf,EAA6B,QAA7B,EAAuC,aAAvC,CAAxB;IACD;;IAED,aAAa,CAAC,mBAAd,GAAoC,IAApC;IAEA,IAAM,QAAQ,GAAG,cAAc,CAAC,IAAD,EAAO,aAAa,CAAC,YAArB,EAAmC,QAAnC,CAA/B;IAEA,eAAe,CAAC,QAAD,CAAf;IACA,qBAAqB,CAAC,SAAD,CAArB,CA1E8E,CA4E9E;;IACA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAG,EAAH,EAAO,QAAP,CAAR;EACD,CA/EuB,EAgFxB,CAAC,YAAY,CAAC,MAAd,EAAsB,aAAtB,EAAqC,IAArC,EAA2C,QAA3C,EAAqD,QAArD,CAhFwB,CAA1B;EAmFA,IAAM,aAAa,GAAG,KAAK,CAAC,WAAN,CACpB,UAAC,EAAD,EAA0C;IACxC,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAG,EAAH,CAAT;IAEA,aAAa,CAAC,mBAAd,GAAoC,IAApC;;IACA,IAAI,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,KAA3C,EAAkD;MAChD;MACQ,IAAA,OAAO,GAAuB,EAAE,CAAzB,OAAP;MAAA,IAAS,OAAO,GAAc,EAAE,CAAhB,OAAhB;MAAA,IAAkB,OAAO,GAAK,EAAE,CAAP,OAAzB,CAFwC,CAIhD;;MACA,IAAI,OAAO,IAAI,OAAf,EAAwB;QACtB;MACD,CAP+C,CAShD;;;MACA,IAAI,OAAO,KAAK,QAAQ,CAAC,SAArB,IAAkC,OAAO,KAAK,QAAQ,CAAC,GAA3D,EAAgE;QAC9D,IAAM,cAAc,GAAI,EAAE,CAAC,MAAH,CAA+B,cAAvD;QACA,IAAM,YAAY,GAAI,EAAE,CAAC,MAAH,CAA+B,YAArD,CAF8D,CAI9D;;QACA,IACE,EAAE,OAAO,KAAK,QAAQ,CAAC,SAArB,IAAkC,YAAlC,IAAkD,YAAY,GAAG,CAAnE,KACA,EAAE,OAAO,KAAK,QAAQ,CAAC,GAArB,IAA4B,cAAc,KAAK,IAA/C,IAAuD,cAAc,GAAG,SAAS,CAAC,OAAV,CAAkB,KAAlB,CAAwB,MAAlG,CAFF,EAGE;UACA;QACD;;QAED,aAAa,CAAC,mBAAd,GAAoC;UAClC,UAAU,EAAE,OAAO,KAAK,QAAQ,CAAC,SAArB,GAAiC,WAAjC,GAA+C,QADzB;UAElC,cAAc,EAAE,cAAc,KAAK,IAAnB,GAA0B,cAA1B,GAA2C,CAAC,CAF1B;UAGlC,YAAY,EAAE,YAAY,KAAK,IAAjB,GAAwB,YAAxB,GAAuC,CAAC;QAHpB,CAApC;MAKD;IACF;EACF,CAlCmB,EAmCpB,CAAC,aAAD,EAAgB,SAAhB,CAnCoB,CAAtB;EAsCA,IAAM,WAAW,GAAG,KAAK,CAAC,WAAN,CAClB,UAAC,EAAD,EAA2C;IACzC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAG,EAAH,CAAP;IAEA,IAAM,cAAc,GAAI,EAAE,CAAC,MAAH,CAA+B,cAAvD;IACA,IAAM,YAAY,GAAI,EAAE,CAAC,MAAH,CAA+B,YAArD,CAJyC,CAKzC;;IACA,aAAa,CAAC,mBAAd,GAAoC;MAClC,UAAU,EAAE,YADsB;MAElC,cAAc,EAAE,cAAc,KAAK,IAAnB,GAA0B,cAA1B,GAA2C,CAAC,CAF1B;MAGlC,YAAY,EAAE,YAAY,KAAK,IAAjB,GAAwB,YAAxB,GAAuC,CAAC;IAHpB,CAApC;EAKD,CAZiB,EAalB,CAAC,aAAD,EAAgB,OAAhB,CAbkB,CAApB,CAtOW,CAsPX;;EACA,KAAK,CAAC,SAAN,CAAgB,YAAA;IACd,aAAa,CAAC,YAAd,GAA6B,SAAS,CAAC,IAAD,EAAO,UAAP,CAAtC;IACA,KAAK,KAAK,SAAV,IAAuB,QAAQ,CAAC,KAAD,CAA/B;IACA,eAAe,CAAC,cAAc,CAAC,IAAD,EAAO,aAAa,CAAC,YAArB,EAAmC,QAAnC,CAAf,CAAf,CAHc,CAId;EACD,CALD,EAKG,CAAC,IAAD,EAAO,KAAP,CALH,EAvPW,CA8PX;;EACA,yBAAyB,CAAC,YAAA;IACxB;IACA,IAAI,kBAAkB,KAAK,SAAvB,IAAoC,SAAS,CAAC,OAAlD,EAA2D;MACzD,SAAS,CAAC,OAAV,CAAkB,iBAAlB,CAAoC,kBAApC,EAAwD,kBAAxD;IACD;EACF,CALwB,EAKtB,CAAC,kBAAD,CALsB,CAAzB,CA/PW,CAsQX;;EACA,KAAK,CAAC,SAAN,CAAgB,YAAA;IACd;IACA,IAAI,aAAa,CAAC,SAAd,IAA2B,kBAAkB,KAAK,SAAlD,IAA+D,SAAS,CAAC,OAA7E,EAAsF;MACpF,SAAS,CAAC,OAAV,CAAkB,iBAAlB,CAAoC,kBAApC,EAAwD,kBAAxD;IACD;EACF,CALD;EAOA,eAAe,CAAC,YAAD,EAAe,aAAf,EAA8B,SAA9B,CAAf;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,QAAA,CAAA,EAAA,EACJ,KADI,EACC;IACT,UAAU,EAAE,GADH;IAET,OAAO,EAAE,WAFA;IAGT,MAAM,EAAE,UAHC;IAIT,WAAW,EAAE,eAJJ;IAKT,SAAS,EAAE,aALF;IAMT,QAAQ,EAAE,iBAND;IAOT,SAAS,EAAE,aAPF;IAQT,OAAO,EAAE,WARA;IAST,KAAK,EAAE,YAAY,IAAI,EATd;IAUT,YAAY,EAAE;EAVL,CADD,CAAV,CADF;AAeD,CAlS8E,CAAxE;AAmSP,eAAe,CAAC,WAAhB,GAA8B,cAA9B","sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  insertString,\n  parseMask,\n} from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nimport type { IMaskedTextFieldProps, IMaskedTextField } from '../TextField.types';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IMaskValue } from './inputMask';\n\ninterface IMaskedTextFieldInternalState {\n  maskCharData: IMaskValue[];\n  isFocused: boolean;\n  moveCursorOnMouseUp: boolean;\n  changeSelectionData: {\n    changeType: 'default' | 'backspace' | 'delete' | 'textPasted';\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n}\n\nconst COMPONENT_NAME = 'MaskedTextField';\n\nconst useComponentRef = (\n  componentRef: IRefObject<IMaskedTextField> | undefined,\n  internalState: IMaskedTextFieldInternalState,\n  textField: React.RefObject<IMaskedTextField>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    (): IMaskedTextField => ({\n      get value() {\n        let value = '';\n\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n\n      get selectionStart(): number | null {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd(): number | null {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus(): void {\n        textField.current && textField.current.focus();\n      },\n\n      blur(): void {\n        textField.current && textField.current.blur();\n      },\n\n      select(): void {\n        textField.current && textField.current.select();\n      },\n\n      setSelectionStart(value: number): void {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n\n      setSelectionEnd(value: number): void {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n\n      setSelectionRange(start: number, end: number): void {\n        textField.current && textField.current.setSelectionRange(start, end);\n      },\n    }),\n    [internalState, textField],\n  );\n};\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nexport const MaskedTextField: React.FunctionComponent<IMaskedTextFieldProps> = React.forwardRef<\n  HTMLDivElement,\n  IMaskedTextFieldProps\n>((props, ref) => {\n  const textField = React.useRef<IMaskedTextField>(null);\n\n  const {\n    componentRef,\n    onFocus,\n    onBlur,\n    onMouseDown,\n    onMouseUp,\n    onChange,\n    onPaste,\n    onKeyDown,\n    mask,\n    maskChar = DEFAULT_MASK_CHAR,\n    maskFormat = DEFAULT_MASK_FORMAT_CHARS,\n    value,\n  } = props;\n\n  const internalState = useConst<IMaskedTextFieldInternalState>(() => ({\n    maskCharData: parseMask(mask, maskFormat),\n    isFocused: false,\n    moveCursorOnMouseUp: false,\n    changeSelectionData: null,\n  }));\n\n  /** The index into the rendered value of the first unfilled format character */\n  const [maskCursorPosition, setMaskCursorPosition] = React.useState<number | undefined>();\n\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  const [displayValue, setDisplayValue] = React.useState<string>(() =>\n    getMaskDisplay(mask, internalState.maskCharData, maskChar),\n  );\n\n  const setValue = React.useCallback(\n    (newValue: string): void => {\n      let valueIndex = 0;\n      let charDataIndex = 0;\n\n      while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n        // Test if the next character in the new value fits the next format character\n        const testVal = newValue[valueIndex];\n        if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n          internalState.maskCharData[charDataIndex].value = testVal;\n          charDataIndex++;\n        }\n        valueIndex++;\n      }\n    },\n    [internalState],\n  );\n\n  const handleFocus = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onFocus?.(ev);\n      internalState.isFocused = true;\n\n      // Move the cursor position to the leftmost unfilled position\n      for (let i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    },\n    [internalState, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onBlur?.(ev);\n      internalState.isFocused = false;\n      internalState.moveCursorOnMouseUp = true;\n    },\n    [internalState, onBlur],\n  );\n\n  const handleMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseDown?.(ev);\n      if (!internalState.isFocused) {\n        internalState.moveCursorOnMouseUp = true;\n      }\n    },\n    [internalState, onMouseDown],\n  );\n\n  const handleMouseUp = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseUp?.(ev);\n      // Move the cursor on mouseUp after focusing the textField\n      if (internalState.moveCursorOnMouseUp) {\n        internalState.moveCursorOnMouseUp = false;\n        // Move the cursor position to the rightmost unfilled position\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n            break;\n          }\n        }\n      }\n    },\n    [internalState, onMouseUp],\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, inputValue: string) => {\n      if (internalState.changeSelectionData === null && textField.current) {\n        internalState.changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n          selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,\n        };\n      }\n      if (!internalState.changeSelectionData) {\n        return;\n      }\n\n      // The initial value of cursorPos does not matter\n      let cursorPos = 0;\n      const { changeType, selectionStart, selectionEnd } = internalState.changeSelectionData;\n\n      if (changeType === 'textPasted') {\n        const charsSelected = selectionEnd - selectionStart;\n        const charCount = inputValue.length + charsSelected - displayValue.length;\n        const startPos = selectionStart;\n        const pastedString = inputValue.substr(startPos, charCount);\n\n        // Clear any selected characters\n        if (charsSelected) {\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n        }\n        cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        const isDel = changeType === 'delete';\n        const charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n          } else {\n            internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n          }\n        }\n      } else if (inputValue.length > displayValue.length) {\n        // This case is if the user added characters\n        const charCount = inputValue.length - displayValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      } else if (inputValue.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        const charCount = 1;\n        const selectCount = displayValue.length + charCount - inputValue.length;\n        const startPos = selectionEnd - charCount;\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        // Clear the selected range\n        internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n        // Insert the printed character\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      }\n\n      internalState.changeSelectionData = null;\n\n      const newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n\n      setDisplayValue(newValue);\n      setMaskCursorPosition(cursorPos);\n\n      // Perform onChange after input has been processed. Return value is expected to be the displayed text\n      onChange?.(ev, newValue);\n    },\n    [displayValue.length, internalState, mask, maskChar, onChange],\n  );\n\n  const handleKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(ev);\n\n      internalState.changeSelectionData = null;\n      if (textField.current && textField.current.value) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode, ctrlKey, metaKey } = ev;\n\n        // Ignore ctrl and meta keydown\n        if (ctrlKey || metaKey) {\n          return;\n        }\n\n        // On backspace or delete, store the selection and the keyCode\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n          const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n\n          // Check if backspace or delete press is valid.\n          if (\n            !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n            !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)\n          ) {\n            return;\n          }\n\n          internalState.changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n          };\n        }\n      }\n    },\n    [internalState, onKeyDown],\n  );\n\n  const handlePaste = React.useCallback(\n    (ev: React.ClipboardEvent<HTMLInputElement>) => {\n      onPaste?.(ev);\n\n      const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n      const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n      // Store the paste selection range\n      internalState.changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n      };\n    },\n    [internalState, onPaste],\n  );\n\n  // Updates the display value if mask or value props change.\n  React.useEffect(() => {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n\n  // Run before browser paint to avoid flickering from selection reset.\n  useIsomorphicLayoutEffect(() => {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n\n  // Run after browser paint.\n  React.useEffect(() => {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n\n  useComponentRef(componentRef, internalState, textField);\n\n  return (\n    <TextField\n      {...props}\n      elementRef={ref}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onChange={handleInputChange}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      value={displayValue || ''}\n      componentRef={textField}\n    />\n  );\n});\nMaskedTextField.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}