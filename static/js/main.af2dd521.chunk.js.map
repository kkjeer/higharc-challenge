{"version":3,"sources":["types.ts","AddSmoothie.tsx","ViewSmoothies.tsx","App.tsx","index.tsx"],"names":["UNITS","EMPTY_INGREDIENT","name","quantity","unit","AddSmoothie","props","_changeSmoothieName","ev","val","setState","_addSmoothie","onAddSmoothie","state","ingredients","tags","filter","ingredient","map","currTag","_ingredient","index","quantityErrorMsg","isNaN","Number","Stack","horizontal","verticalAlign","tokens","childrenGap","TextField","label","value","required","onChange","_changeIngredientName","_changeIngredientQuantity","errorMessage","Dropdown","options","key","text","selectedKey","_changeUnit","styles","root","minWidth","IconButton","iconProps","iconName","onClick","_deleteIngredient","_addIngredient","JSON","parse","stringify","option","toString","splice","_tag","tag","borderRadius","backgroundColor","paddingRight","_deleteTag","Text","_changeCurrTag","_addTag","_duplicateTag","_isNameConflict","smoothies","existingName","toLowerCase","_checkIngredients","i","quant","this","ingredientError","className","horizontalAlign","padding","alignSelf","variant","PrimaryButton","disabled","length","maxWidth","DefaultButton","placeholder","underlined","onKeyDown","wrap","React","ViewSmoothies","_searchChange","searchName","_searchForSmoothie","_clearSearch","_smoothie","smoothie","paddingBottom","paddingLeft","_deleteSmoothie","unitStr","substring","onDeleteSmoothie","namesToShow","Object","keys","indexOf","SearchBox","onSearch","onClear","initializeIcons","STORAGE_KEY","App","_updateStorage","window","localStorage","setItem","currSmoothies","getItem","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af2dd521.chunk.js","sourcesContent":["export type Smoothies = { [name: string]: ISmoothie };\r\n\r\nexport interface ISmoothie {\r\n  ingredients: IIngredient[];\r\n  tags: string[];\r\n}\r\n\r\nexport interface IIngredient {\r\n  name: string;\r\n  quantity: string;\r\n  unit: string;\r\n}\r\n\r\nexport const UNITS = [\"cups\", \"ounces\", \"pounds\"];","import * as React from \"react\";\r\nimport { Smoothies, IIngredient, ISmoothie, UNITS } from \"./types\";\r\nimport { Stack, Text, TextField, DefaultButton, IconButton, PrimaryButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\r\n\r\ninterface IAddSmoothieProps {\r\n  smoothies: Smoothies;\r\n  onAddSmoothie: (name: string, smoothie: ISmoothie) => void;\r\n}\r\n\r\ninterface IAddSmoothieState {\r\n  name: string;\r\n  ingredients: IIngredient[];\r\n  tags: string[];\r\n  currTag: string;\r\n}\r\n\r\nconst EMPTY_INGREDIENT = {\r\n  name: \"\",\r\n  quantity: \"0\",\r\n  unit: UNITS[0]\r\n};\r\n\r\n/**\r\n * Renders UI that allows the user to add or edit one new smoothie at a time.\r\n */\r\nexport class AddSmoothie extends React.Component<IAddSmoothieProps, IAddSmoothieState> {\r\n  constructor(props: IAddSmoothieProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      ingredients: [EMPTY_INGREDIENT],\r\n      tags: [],\r\n      currTag: \"\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { name, ingredients, tags, currTag } = this.state;\r\n\r\n    const ingredientError = !this._checkIngredients();\r\n\r\n    return (\r\n      <Stack\r\n        className=\"card\"\r\n        tokens={{childrenGap: 10}}\r\n        horizontalAlign=\"start\"\r\n        styles={{root: {\r\n          padding: 10,\r\n          alignSelf: \"flex-start\"\r\n        }}}>\r\n        <Text variant=\"large\">Add a smoothie</Text>\r\n        <Stack horizontal verticalAlign=\"end\" tokens={{childrenGap: 10}}>\r\n          <TextField\r\n            label=\"Smoothie name\"\r\n            value={name}\r\n            required\r\n            onChange={this._changeSmoothieName}\r\n            errorMessage={this._isNameConflict() ? \"A smoothie with this name already exists.\" : \"\"}\r\n          />\r\n          <PrimaryButton\r\n            text=\"Add smoothie\"\r\n            onClick={this._addSmoothie}\r\n            disabled={this._isNameConflict() || !name || ingredients.length < 1 || ingredientError}\r\n          />\r\n          <Stack tokens={{childrenGap: 5}} styles={{root: {maxWidth: 250}}}>\r\n            {\r\n              !name &&\r\n              <Text className=\"errorText\">\r\n                Smoothie must have a nonempty name.\r\n              </Text>\r\n            }\r\n            {\r\n              ingredients.length < 1 &&\r\n              <Text className=\"errorText\">\r\n                Smoothie must have at least one ingredient.\r\n              </Text>\r\n            }\r\n            {\r\n              ingredientError &&\r\n              <Text className=\"errorText\">\r\n                All ingredients must have a nonempty name and a positive numerical quantity.\r\n              </Text>\r\n            }\r\n          </Stack>\r\n        </Stack>\r\n        {ingredients.map((ingredient: IIngredient, index: number) => this._ingredient(ingredient, index))}\r\n        <DefaultButton text=\"Add ingredient\" onClick={this._addIngredient} />\r\n        <TextField\r\n          placeholder=\"Add tags (optional)\"\r\n          underlined\r\n          value={currTag}\r\n          errorMessage={this._duplicateTag() ? \"Tag already exists.\" : \"\"}\r\n          onChange={this._changeCurrTag}\r\n          onKeyDown={this._addTag}\r\n        />\r\n        <Stack\r\n          horizontal\r\n          wrap\r\n          tokens={{childrenGap: 10}}\r\n          styles={{root: { maxWidth: 550 }}}>\r\n          {tags.map((tag, index) => this._tag(tag, index))}\r\n        </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler for changing the pending name of the smoothie to add.\r\n   */\r\n  _changeSmoothieName = (ev: any, val?: string) => {\r\n    this.setState({ name: val || \"\" });\r\n  }\r\n\r\n  /**\r\n   * Event handler to add the current pending smoothie.\r\n   */\r\n  _addSmoothie = (ev: any) => {\r\n    const { onAddSmoothie } = this.props;\r\n    const { name, ingredients, tags } = this.state;\r\n\r\n    const smoothie = {\r\n      ingredients: ingredients.filter(ingredient => ingredient.name != \"\").map(ingredient => ({\r\n        ...ingredient,\r\n        unit: ingredient.unit || UNITS[0]\r\n      })),\r\n      tags\r\n    };\r\n\r\n    onAddSmoothie(name, smoothie);\r\n    this.setState({\r\n      name: \"\",\r\n      ingredients: [EMPTY_INGREDIENT],\r\n      tags: [],\r\n      currTag: \"\"\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Renders the UI to construct a single pending ingredient.\r\n   */\r\n  _ingredient = (ingredient: IIngredient, index: number) => {\r\n    const quantityErrorMsg = isNaN(Number(ingredient.quantity || \"0\")) ? \"Quantity must be a number.\" : \"\";\r\n\r\n    return (\r\n      <Stack key={index} horizontal verticalAlign=\"end\" tokens={{childrenGap: 10}}>\r\n        <TextField\r\n          label=\"Ingredient name\"\r\n          value={ingredient.name}\r\n          required\r\n          onChange={this._changeIngredientName(index)}\r\n        />\r\n        <TextField\r\n          label=\"Quantity\"\r\n          value={ingredient.quantity}\r\n          required\r\n          onChange={this._changeIngredientQuantity(index)}\r\n          errorMessage={quantityErrorMsg}\r\n        />\r\n        <Dropdown\r\n          label=\"Unit\"\r\n          options={UNITS.map(unit => ({ key: unit, text: unit }))}\r\n          selectedKey={ingredient.unit || UNITS[0]}\r\n          onChange={this._changeUnit(index)}\r\n          styles={{\r\n            root: {\r\n              minWidth: 80\r\n            }\r\n          }}\r\n        />\r\n        <IconButton iconProps={{iconName: \"Delete\"}} onClick={this._deleteIngredient(index)} />\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler to add a new blank pending ingredient.\r\n   */\r\n  _addIngredient = (ev: any) => {\r\n    const ingredients = [...this.state.ingredients, {\r\n      name: \"\",\r\n      quantity: \"0\",\r\n      unit: \"\"\r\n    }];\r\n    this.setState({ ingredients });\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to change the name of the pending ingredient at the given index.\r\n   */\r\n  _changeIngredientName = (index: number) => {\r\n    return (ev: any, val?: string) => {\r\n      const ingredients = JSON.parse(JSON.stringify(this.state.ingredients));\r\n      ingredients[index].name = val || \"\";\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to change the quantity of the pending ingredient at the given index.\r\n   */\r\n  _changeIngredientQuantity = (index: number) => {\r\n    return (ev: any, val?: string) => {\r\n      const ingredients = JSON.parse(JSON.stringify(this.state.ingredients));\r\n      ingredients[index].quantity = val || \"\";\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to change the unit of the pending ingredient at the given index.\r\n   */\r\n  _changeUnit = (index: number) => {\r\n    return (ev: any, option?: IDropdownOption) => {\r\n      if (!option) return;\r\n      const ingredients = [...this.state.ingredients];\r\n      ingredients[index].unit = option.key.toString();\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to delete the pending ingredient at the given index.\r\n   */\r\n  _deleteIngredient = (index: number) => {\r\n    return (ev: any) => {\r\n      let ingredients = this.state.ingredients;\r\n      ingredients.splice(index, 1);\r\n      this.setState({ ingredients });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the UI for one pending tag.\r\n   * Includes the ability to delete the pending tag.\r\n   */\r\n  _tag = (tag: string, index: number) => {\r\n    const borderRadius = 15;\r\n\r\n    return (\r\n      <Stack\r\n        key={tag}\r\n        horizontal\r\n        verticalAlign=\"center\"\r\n        tokens={{childrenGap: 5}}\r\n        styles={{root: {\r\n          borderRadius,\r\n          backgroundColor: \"#cccccc\",\r\n          paddingRight: 10\r\n        }}}\r\n      >\r\n        <IconButton\r\n          iconProps={{iconName: \"StatusCircleErrorX\"}}\r\n          styles={{root: { borderRadius }}}\r\n          onClick={this._deleteTag(index)}\r\n        />\r\n        <Text>{tag}</Text>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler for changing the current tag to be added to the set of pending tags.\r\n   */\r\n  _changeCurrTag = (ev: any, val?: string) => {\r\n    this.setState({ currTag: val || \"\" });\r\n  }\r\n\r\n  /**\r\n   * Event handler for adding a tag to the set of pending tags.\r\n   */\r\n  _addTag = (ev: any) => {\r\n    if (ev.key != \"Enter\" || this._duplicateTag()) {\r\n      return;\r\n    }\r\n\r\n    const tags = [...this.state.tags, this.state.currTag];\r\n    this.setState({ tags, currTag: \"\" });\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler for removing the tag at the given index\r\n   * from the set of pending tags.\r\n   */\r\n  _deleteTag = (index: number) => {\r\n    return (ev: any) => {\r\n      const tags = [...this.state.tags];\r\n      tags.splice(index, 1);\r\n      this.setState({ tags });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns true if and only if there is already a smoothie with the same\r\n   * (case-insensitive) name as the name of the pending smoothie.\r\n   */\r\n  _isNameConflict = () => {\r\n    const { smoothies } = this.props;\r\n    const { name } = this.state;\r\n\r\n    if (!name) {\r\n      return false;\r\n    }\r\n\r\n    for (const existingName in smoothies) {\r\n      if (existingName.toLowerCase() == name.toLowerCase()) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns true if and only if all pending ingredients:\r\n   * 1. Have nonempty names, and:\r\n   * 2. Have positive numerical quantities\r\n   */\r\n  _checkIngredients = () => {\r\n    const { ingredients } = this.state;\r\n    for (const i in ingredients) {\r\n      const { name, quantity } = ingredients[i];\r\n      if (!name) {\r\n        return false;\r\n      }\r\n      const quant = Number(quantity);\r\n      if (isNaN(quant) || quant <= 0) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns true if and only if the current tag the user has typed in\r\n   * already exists (case insensitive) in the set of pending tags.\r\n   */\r\n  _duplicateTag = () => {\r\n    const { currTag, tags } = this.state;\r\n    for (const i in tags) {\r\n      if (tags[i].toLowerCase() == currTag.toLowerCase()) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}","import * as React from \"react\";\r\nimport { Stack, Text, IconButton, SearchBox } from \"@fluentui/react\";\r\nimport { Smoothies, IIngredient } from \"./types\";\r\n\r\ninterface IViewSmoothiesProps {\r\n  smoothies: Smoothies;\r\n  onDeleteSmoothie: (name: string) => void;\r\n}\r\n\r\ninterface IViewSmoothiesState {\r\n  searchName: string;\r\n}\r\n\r\n/**\r\n * Renders a set of smoothies in a grid view.\r\n * Each smoothie UI contains the capability to delete that smoothie.\r\n */\r\nexport class ViewSmoothies extends React.Component<IViewSmoothiesProps, IViewSmoothiesState> {\r\n  constructor(props: IViewSmoothiesProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchName: \"\"\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { smoothies } = this.props;\r\n    const { searchName } = this.state;\r\n\r\n    // If the search text is nonempty, only show smoothies whose names contain (case insensitive) the search text.\r\n    let namesToShow = Object.keys(smoothies);\r\n    if (searchName) {\r\n      namesToShow = namesToShow.filter(name => name.toLowerCase().indexOf(searchName.toLowerCase()) != -1);\r\n    }\r\n    \r\n    return (\r\n      <Stack tokens={{childrenGap: 20}} horizontalAlign=\"start\">\r\n        <SearchBox\r\n          underlined\r\n          placeholder=\"Search for a smoothie by name\"\r\n          onChange={this._searchChange}\r\n          onSearch={this._searchForSmoothie}\r\n          onClear={this._clearSearch}\r\n          styles={{root: {\r\n            minWidth: 250\r\n          }}}\r\n        />\r\n        <Stack\r\n          horizontal\r\n          wrap\r\n          tokens={{childrenGap: 20}}\r\n          horizontalAlign=\"start\">\r\n            {namesToShow.map(name => this._smoothie(name))}\r\n        </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler for changing the smoothie name search text.\r\n   */\r\n  _searchChange = (ev: any, val?: string) => {\r\n    this.setState({ searchName: val || \"\" });\r\n  }\r\n\r\n  /**\r\n   * Event handler for pressing Enter on the search box to search smoothies by name.\r\n   */\r\n  _searchForSmoothie = (val?: string) => {\r\n    this.setState({ searchName: val || \"\" });\r\n  }\r\n\r\n  /**\r\n   * Event handler for clearing the smoothie name search text.\r\n   */\r\n  _clearSearch = (ev: any) => {\r\n    this.setState({ searchName: \"\" });\r\n  }\r\n\r\n  /**\r\n   * Renders one smoothie.\r\n   */\r\n  _smoothie = (name: string) => {\r\n    const smoothie = this.props.smoothies[name];\r\n\r\n    return (\r\n      <Stack\r\n        className=\"card\"\r\n        key={name}\r\n        tokens={{childrenGap: 10}}\r\n        styles={{root: {\r\n          padding: 5,\r\n          paddingBottom: 10,\r\n          paddingLeft: 10\r\n        }}}>\r\n          <Stack\r\n            horizontal\r\n            horizontalAlign=\"space-between\"\r\n            verticalAlign=\"center\"\r\n            tokens={{childrenGap: 20}}>\r\n            <Text variant=\"mediumPlus\">{name}</Text>\r\n            <IconButton iconProps={{iconName: \"Delete\"}} onClick={this._deleteSmoothie(name)} />\r\n          </Stack>\r\n          <Stack tokens={{childrenGap: 10}} styles={{root: {paddingLeft: 5}}}>\r\n            {smoothie.ingredients.map(ingredient => this._ingredient(ingredient))}\r\n          </Stack>\r\n          <Stack\r\n            horizontal\r\n            wrap\r\n            tokens={{childrenGap: 5}}\r\n            styles={{root: { maxWidth: 250 }}}>\r\n            {smoothie.tags.map(tag => <Text key={tag} variant=\"small\">#{tag}</Text>)}\r\n          </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Renders the information for one ingredient.\r\n   */\r\n  _ingredient = (ingredient: IIngredient) => {\r\n    const { name, quantity, unit } = ingredient;\r\n\r\n    // Remove the last \"s\" in the unit display string if the quantity is 1\r\n    let unitStr = unit;\r\n    if (Number(quantity) === 1) {\r\n      unitStr = unitStr.substring(0, unitStr.length - 1);\r\n    }\r\n\r\n    return <Text key={name}>{quantity} {unitStr} of {name.toLowerCase()}</Text>\r\n  }\r\n\r\n  /**\r\n   * Returns an event handler to delete the smoothie with the given name.\r\n   */\r\n  _deleteSmoothie = (name: string) => {\r\n    return (ev: any) => {\r\n      this.props.onDeleteSmoothie(name);\r\n    }\r\n  }\r\n}","import React from \"react\";\nimport { Stack, Text } from \"@fluentui/react\";\nimport { initializeIcons } from '@fluentui/font-icons-mdl2';\nimport { Smoothies, ISmoothie } from \"./types\";\nimport { AddSmoothie } from \"./AddSmoothie\";\nimport { ViewSmoothies } from \"./ViewSmoothies\";\n\n// Initialize the Fluent UI icons to enable their use across the app.\ninitializeIcons();\n\ninterface IAppState {\n  smoothies: Smoothies;\n}\n\n// Key used to store smoothies in window.localStorage.\nconst STORAGE_KEY = \"smoothies\";\n\nexport class App extends React.Component<{}, IAppState> {\n  constructor(props: {}) {\n    super(props);\n\n    // Populate the initialize set of smoothies using the contents of local storage.\n    const currSmoothies = window.localStorage.getItem(STORAGE_KEY) || \"{}\";\n    this.state = {\n      smoothies: JSON.parse(currSmoothies)\n    };\n  }\n\n  render() {\n    const { smoothies } = this.state;\n    return (\n      <Stack tokens={{childrenGap: 20}} styles={{root: {padding: 10}}}>\n        <Text variant=\"large\">Smoothie Recipe Book</Text>\n        <AddSmoothie smoothies={smoothies} onAddSmoothie={this._addSmoothie} />\n        <ViewSmoothies smoothies={smoothies} onDeleteSmoothie={this._deleteSmoothie} />\n      </Stack>\n    );\n  }\n\n  /**\n   * Adds the given smoothie to local storage and updates the app state.\n   */\n  _addSmoothie = (name: string, smoothie: ISmoothie) => {\n    const smoothies = {\n      ...this.state.smoothies,\n      [name]: smoothie\n    };\n    this._updateStorage(smoothies);\n    this.setState({ smoothies });\n  }\n\n  /**\n   * Deletes the smoothie with the given name from local storage and updates the app state.\n   */\n  _deleteSmoothie = (name: string) => {\n    const smoothies = {\n      ...this.state.smoothies\n    };\n    delete smoothies[name];\n    this._updateStorage(smoothies);\n    this.setState({ smoothies })\n  }\n\n  /**\n   * Updates local storage to reflect the given set of smoothies.\n   */\n  _updateStorage = (smoothies: Smoothies) => {\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(smoothies));\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}